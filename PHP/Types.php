<?php
/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


/**
 * **line.thrift****
 * 
 * | Author : GoogleX
 * |
 * | Copyright (c) 2018
 * 
 */
final class ApplicationType {
  const IOS = 16;
  const IOS_RC = 17;
  const IOS_BETA = 18;
  const IOS_ALPHA = 19;
  const ANDROID = 32;
  const ANDROID_RC = 33;
  const ANDROID_BETA = 34;
  const ANDROID_ALPHA = 35;
  const WAP = 48;
  const WAP_RC = 49;
  const WAP_BETA = 50;
  const WAP_ALPHA = 51;
  const BOT = 64;
  const BOT_RC = 65;
  const BOT_BETA = 66;
  const BOT_ALPHA = 67;
  const WEB = 80;
  const WEB_RC = 81;
  const WEB_BETA = 82;
  const WEB_ALPHA = 83;
  const DESKTOPWIN = 96;
  const DESKTOPWIN_RC = 97;
  const DESKTOPWIN_BETA = 98;
  const DESKTOPWIN_ALPHA = 99;
  const DESKTOPMAC = 112;
  const DESKTOPMAC_RC = 113;
  const DESKTOPMAC_BETA = 114;
  const DESKTOPMAC_ALPHA = 115;
  const CHANNELGW = 128;
  const CHANNELGW_RC = 129;
  const CHANNELGW_BETA = 130;
  const CHANNELGW_ALPHA = 131;
  const CHANNELCP = 144;
  const CHANNELCP_RC = 145;
  const CHANNELCP_BETA = 146;
  const CHANNELCP_ALPHA = 147;
  const WINPHONE = 160;
  const WINPHONE_RC = 161;
  const WINPHONE_BETA = 162;
  const WINPHONE_ALPHA = 163;
  const BLACKBERRY = 176;
  const BLACKBERRY_RC = 177;
  const BLACKBERRY_BETA = 178;
  const BLACKBERRY_ALPHA = 179;
  const WINMETRO = 192;
  const WINMETRO_RC = 193;
  const WINMETRO_BETA = 194;
  const WINMETRO_ALPHA = 195;
  const S40 = 208;
  const S40_RC = 209;
  const S40_BETA = 210;
  const S40_ALPHA = 211;
  const CHRONO = 224;
  const CHRONO_RC = 225;
  const CHRONO_BETA = 226;
  const CHRONO_ALPHA = 227;
  const TIZEN = 256;
  const TIZEN_RC = 257;
  const TIZEN_BETA = 258;
  const TIZEN_ALPHA = 259;
  const VIRTUAL = 272;
  const FIREFOXOS = 288;
  const FIREFOXOS_RC = 289;
  const FIREFOXOS_BETA = 290;
  const FIREFOXOS_ALPHA = 291;
  const IOSIPAD = 304;
  const IOSIPAD_RC = 305;
  const IOSIPAD_BETA = 306;
  const IOSIPAD_ALPHA = 307;
  const BIZIOS = 320;
  const BIZIOS_RC = 321;
  const BIZIOS_BETA = 322;
  const BIZIOS_ALPHA = 323;
  const BIZANDROID = 336;
  const BIZANDROID_RC = 337;
  const BIZANDROID_BETA = 338;
  const BIZANDROID_ALPHA = 339;
  const BIZBOT = 352;
  const BIZBOT_RC = 353;
  const BIZBOT_BETA = 354;
  const BIZBOT_ALPHA = 355;
  const CHROMEOS = 368;
  const CHROMEOS_RC = 369;
  const CHROMEOS_BETA = 370;
  const CHROMEOS_ALPHA = 371;
  const ANDROIDLITE = 384;
  const ANDROIDLITE_RC = 385;
  const ANDROIDLITE_BETA = 386;
  const ANDROIDLITE_ALPHA = 387;
  const WIN10 = 400;
  const WIN10_RC = 401;
  const WIN10_BETA = 402;
  const WIN10_ALPHA = 403;
  const BIZWEB = 416;
  const BIZWEB_RC = 417;
  const BIZWEB_BETA = 418;
  const BIZWEB_ALPHA = 419;
  const DUMMYPRIMARY = 432;
  const DUMMYPRIMARY_RC = 433;
  const DUMMYPRIMARY_BETA = 434;
  const DUMMYPRIMARY_ALPHA = 435;
  const SQUARE = 448;
  const SQUARE_RC = 449;
  const SQUARE_BETA = 450;
  const SQUARE_ALPHA = 451;
  const INTERNAL = 464;
  const INTERNAL_RC = 465;
  const INTERNAL_BETA = 466;
  const INTERNAL_ALPHA = 467;
  const CLOVAFRIENDS = 480;
  const CLOVAFRIENDS_RC = 481;
  const CLOVAFRIENDS_BETA = 482;
  const CLOVAFRIENDS_ALPHA = 483;
  static public $__names = array(
    16 => 'IOS',
    17 => 'IOS_RC',
    18 => 'IOS_BETA',
    19 => 'IOS_ALPHA',
    32 => 'ANDROID',
    33 => 'ANDROID_RC',
    34 => 'ANDROID_BETA',
    35 => 'ANDROID_ALPHA',
    48 => 'WAP',
    49 => 'WAP_RC',
    50 => 'WAP_BETA',
    51 => 'WAP_ALPHA',
    64 => 'BOT',
    65 => 'BOT_RC',
    66 => 'BOT_BETA',
    67 => 'BOT_ALPHA',
    80 => 'WEB',
    81 => 'WEB_RC',
    82 => 'WEB_BETA',
    83 => 'WEB_ALPHA',
    96 => 'DESKTOPWIN',
    97 => 'DESKTOPWIN_RC',
    98 => 'DESKTOPWIN_BETA',
    99 => 'DESKTOPWIN_ALPHA',
    112 => 'DESKTOPMAC',
    113 => 'DESKTOPMAC_RC',
    114 => 'DESKTOPMAC_BETA',
    115 => 'DESKTOPMAC_ALPHA',
    128 => 'CHANNELGW',
    129 => 'CHANNELGW_RC',
    130 => 'CHANNELGW_BETA',
    131 => 'CHANNELGW_ALPHA',
    144 => 'CHANNELCP',
    145 => 'CHANNELCP_RC',
    146 => 'CHANNELCP_BETA',
    147 => 'CHANNELCP_ALPHA',
    160 => 'WINPHONE',
    161 => 'WINPHONE_RC',
    162 => 'WINPHONE_BETA',
    163 => 'WINPHONE_ALPHA',
    176 => 'BLACKBERRY',
    177 => 'BLACKBERRY_RC',
    178 => 'BLACKBERRY_BETA',
    179 => 'BLACKBERRY_ALPHA',
    192 => 'WINMETRO',
    193 => 'WINMETRO_RC',
    194 => 'WINMETRO_BETA',
    195 => 'WINMETRO_ALPHA',
    208 => 'S40',
    209 => 'S40_RC',
    210 => 'S40_BETA',
    211 => 'S40_ALPHA',
    224 => 'CHRONO',
    225 => 'CHRONO_RC',
    226 => 'CHRONO_BETA',
    227 => 'CHRONO_ALPHA',
    256 => 'TIZEN',
    257 => 'TIZEN_RC',
    258 => 'TIZEN_BETA',
    259 => 'TIZEN_ALPHA',
    272 => 'VIRTUAL',
    288 => 'FIREFOXOS',
    289 => 'FIREFOXOS_RC',
    290 => 'FIREFOXOS_BETA',
    291 => 'FIREFOXOS_ALPHA',
    304 => 'IOSIPAD',
    305 => 'IOSIPAD_RC',
    306 => 'IOSIPAD_BETA',
    307 => 'IOSIPAD_ALPHA',
    320 => 'BIZIOS',
    321 => 'BIZIOS_RC',
    322 => 'BIZIOS_BETA',
    323 => 'BIZIOS_ALPHA',
    336 => 'BIZANDROID',
    337 => 'BIZANDROID_RC',
    338 => 'BIZANDROID_BETA',
    339 => 'BIZANDROID_ALPHA',
    352 => 'BIZBOT',
    353 => 'BIZBOT_RC',
    354 => 'BIZBOT_BETA',
    355 => 'BIZBOT_ALPHA',
    368 => 'CHROMEOS',
    369 => 'CHROMEOS_RC',
    370 => 'CHROMEOS_BETA',
    371 => 'CHROMEOS_ALPHA',
    384 => 'ANDROIDLITE',
    385 => 'ANDROIDLITE_RC',
    386 => 'ANDROIDLITE_BETA',
    387 => 'ANDROIDLITE_ALPHA',
    400 => 'WIN10',
    401 => 'WIN10_RC',
    402 => 'WIN10_BETA',
    403 => 'WIN10_ALPHA',
    416 => 'BIZWEB',
    417 => 'BIZWEB_RC',
    418 => 'BIZWEB_BETA',
    419 => 'BIZWEB_ALPHA',
    432 => 'DUMMYPRIMARY',
    433 => 'DUMMYPRIMARY_RC',
    434 => 'DUMMYPRIMARY_BETA',
    435 => 'DUMMYPRIMARY_ALPHA',
    448 => 'SQUARE',
    449 => 'SQUARE_RC',
    450 => 'SQUARE_BETA',
    451 => 'SQUARE_ALPHA',
    464 => 'INTERNAL',
    465 => 'INTERNAL_RC',
    466 => 'INTERNAL_BETA',
    467 => 'INTERNAL_ALPHA',
    480 => 'CLOVAFRIENDS',
    481 => 'CLOVAFRIENDS_RC',
    482 => 'CLOVAFRIENDS_BETA',
    483 => 'CLOVAFRIENDS_ALPHA',
  );
}

final class ExtendedProfileAttribute {
  static public $__names = array(
  );
}

final class PrivacyLevelType {
  const PUBLIC = 0;
  const PRIVATE = 1;
  static public $__names = array(
    0 => 'PUBLIC',
    1 => 'PRIVATE',
  );
}

final class PaidCallerIdStatus {
  const NOT_SPECIFIED = 0;
  const VALID = 1;
  const VERIFICATION_REQUIRED = 2;
  const NOT_PERMITTED = 3;
  const LIMIT_EXCEEDED = 4;
  const LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED = 5;
  static public $__names = array(
    0 => 'NOT_SPECIFIED',
    1 => 'VALID',
    2 => 'VERIFICATION_REQUIRED',
    3 => 'NOT_PERMITTED',
    4 => 'LIMIT_EXCEEDED',
    5 => 'LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED',
  );
}

final class PaidCallProductType {
  const COIN = 0;
  const CREDIT = 1;
  const MONTHLY = 2;
  static public $__names = array(
    0 => 'COIN',
    1 => 'CREDIT',
    2 => 'MONTHLY',
  );
}

final class PaidCallType {
  const OUT = 0;
  const IN = 1;
  const TOLLFREE = 2;
  const RECORD = 3;
  const AD = 4;
  const CS = 5;
  static public $__names = array(
    0 => 'OUT',
    1 => 'IN',
    2 => 'TOLLFREE',
    3 => 'RECORD',
    4 => 'AD',
    5 => 'CS',
  );
}

final class BotType {
  const RESERVED = 0;
  const OFFICIAL = 1;
  const LINE_AT_0 = 2;
  const LINE_AT = 3;
  static public $__names = array(
    0 => 'RESERVED',
    1 => 'OFFICIAL',
    2 => 'LINE_AT_0',
    3 => 'LINE_AT',
  );
}

final class BuddyOnAirLabel {
  const ON_AIR = 0;
  const LIVE = 1;
  static public $__names = array(
    0 => 'ON_AIR',
    1 => 'LIVE',
  );
}

final class BuddyBannerLinkType {
  const BUDDY_BANNER_LINK_HIDDEN = 0;
  const BUDDY_BANNER_LINK_MID = 1;
  const BUDDY_BANNER_LINK_URL = 2;
  static public $__names = array(
    0 => 'BUDDY_BANNER_LINK_HIDDEN',
    1 => 'BUDDY_BANNER_LINK_MID',
    2 => 'BUDDY_BANNER_LINK_URL',
  );
}

final class BuddyOnAirType {
  const NORMAL = 0;
  const LIVE = 1;
  const VOIP = 2;
  static public $__names = array(
    0 => 'NORMAL',
    1 => 'LIVE',
    2 => 'VOIP',
  );
}

final class Diff {
  const ADDED = 0;
  const UPDATED = 1;
  const REMOVED = 2;
  static public $__names = array(
    0 => 'ADDED',
    1 => 'UPDATED',
    2 => 'REMOVED',
  );
}

final class ReportType {
  const ADVERTISING = 1;
  const GENDER_HARASSMENT = 2;
  const HARASSMENT = 3;
  const OTHER = 4;
  static public $__names = array(
    1 => 'ADVERTISING',
    2 => 'GENDER_HARASSMENT',
    3 => 'HARASSMENT',
    4 => 'OTHER',
  );
}

final class SyncTriggerReason {
  const OTHER = 0;
  const REVISION_GAP_TOO_LARGE = 1;
  const OPERATION_EXPIRED = 2;
  static public $__names = array(
    0 => 'OTHER',
    1 => 'REVISION_GAP_TOO_LARGE',
    2 => 'OPERATION_EXPIRED',
  );
}

final class ReportCategory {
  const PUSH_NORMAL_PLAIN = 0;
  const PUSH_NORMAL_E2EE = 1;
  const PUSH_VOIP_PLAIN = 2;
  const PUSH_VOIP_E2EE = 3;
  static public $__names = array(
    0 => 'PUSH_NORMAL_PLAIN',
    1 => 'PUSH_NORMAL_E2EE',
    2 => 'PUSH_VOIP_PLAIN',
    3 => 'PUSH_VOIP_E2EE',
  );
}

final class BuddyResultState {
  const ACCEPTED = 1;
  const SUCCEEDED = 2;
  const FAILED = 3;
  const CANCELLED = 4;
  const NOTIFY_FAILED = 5;
  const STORING = 11;
  const UPLOADING = 21;
  const NOTIFYING = 31;
  const REMOVING_SUBSCRIPTION = 41;
  const UNREGISTERING_ACCOUNT = 42;
  const NOTIFYING_LEAVE_CHAT = 43;
  static public $__names = array(
    1 => 'ACCEPTED',
    2 => 'SUCCEEDED',
    3 => 'FAILED',
    4 => 'CANCELLED',
    5 => 'NOTIFY_FAILED',
    11 => 'STORING',
    21 => 'UPLOADING',
    31 => 'NOTIFYING',
    41 => 'REMOVING_SUBSCRIPTION',
    42 => 'UNREGISTERING_ACCOUNT',
    43 => 'NOTIFYING_LEAVE_CHAT',
  );
}

final class BuddySearchRequestSource {
  const NA = 0;
  const FRIEND_VIEW = 1;
  const OFFICIAL_ACCOUNT_VIEW = 2;
  static public $__names = array(
    0 => 'NA',
    1 => 'FRIEND_VIEW',
    2 => 'OFFICIAL_ACCOUNT_VIEW',
  );
}

final class CarrierCode {
  const NOT_SPECIFIED = 0;
  const JP_DOCOMO = 1;
  const JP_AU = 2;
  const JP_SOFTBANK = 3;
  const JP_DOCOMO_LINE = 4;
  const KR_SKT = 17;
  const KR_KT = 18;
  const KR_LGT = 19;
  static public $__names = array(
    0 => 'NOT_SPECIFIED',
    1 => 'JP_DOCOMO',
    2 => 'JP_AU',
    3 => 'JP_SOFTBANK',
    4 => 'JP_DOCOMO_LINE',
    17 => 'KR_SKT',
    18 => 'KR_KT',
    19 => 'KR_LGT',
  );
}

final class ChannelConfiguration {
  const MESSAGE = 0;
  const MESSAGE_NOTIFICATION = 1;
  const NOTIFICATION_CENTER = 2;
  static public $__names = array(
    0 => 'MESSAGE',
    1 => 'MESSAGE_NOTIFICATION',
    2 => 'NOTIFICATION_CENTER',
  );
}

final class ChannelPermission {
  const PROFILE = 0;
  const FRIENDS = 1;
  const GROUP = 2;
  static public $__names = array(
    0 => 'PROFILE',
    1 => 'FRIENDS',
    2 => 'GROUP',
  );
}

final class ChannelFeatureLicense {
  const BLE_LCS_API_USABLE = 26;
  const PROHIBIT_MINIMIZE_CHANNEL_BROWSER = 27;
  const ALLOW_IOS_WEBKIT = 28;
  static public $__names = array(
    26 => 'BLE_LCS_API_USABLE',
    27 => 'PROHIBIT_MINIMIZE_CHANNEL_BROWSER',
    28 => 'ALLOW_IOS_WEBKIT',
  );
}

final class ChannelErrorCode {
  const ILLEGAL_ARGUMENT = 0;
  const INTERNAL_ERROR = 1;
  const CONNECTION_ERROR = 2;
  const AUTHENTICATIONI_FAILED = 3;
  const NEED_PERMISSION_APPROVAL = 4;
  const COIN_NOT_USABLE = 5;
  const WEBVIEW_NOT_ALLOWED = 6;
  static public $__names = array(
    0 => 'ILLEGAL_ARGUMENT',
    1 => 'INTERNAL_ERROR',
    2 => 'CONNECTION_ERROR',
    3 => 'AUTHENTICATIONI_FAILED',
    4 => 'NEED_PERMISSION_APPROVAL',
    5 => 'COIN_NOT_USABLE',
    6 => 'WEBVIEW_NOT_ALLOWED',
  );
}

final class ChannelSyncType {
  const SYNC = 0;
  const REMOVE = 1;
  const REMOVE_ALL = 2;
  static public $__names = array(
    0 => 'SYNC',
    1 => 'REMOVE',
    2 => 'REMOVE_ALL',
  );
}

final class LoginType {
  const ID_CREDENTIAL = 0;
  const QRCODE = 1;
  const ID_CREDENTIAL_WITH_E2EE = 2;
  static public $__names = array(
    0 => 'ID_CREDENTIAL',
    1 => 'QRCODE',
    2 => 'ID_CREDENTIAL_WITH_E2EE',
  );
}

final class ContactAttribute {
  const CONTACT_ATTRIBUTE_CAPABLE_VOICE_CALL = 1;
  const CONTACT_ATTRIBUTE_CAPABLE_VIDEO_CALL = 2;
  const CONTACT_ATTRIBUTE_CAPABLE_MY_HOME = 16;
  const CONTACT_ATTRIBUTE_CAPABLE_BUDDY = 32;
  static public $__names = array(
    1 => 'CONTACT_ATTRIBUTE_CAPABLE_VOICE_CALL',
    2 => 'CONTACT_ATTRIBUTE_CAPABLE_VIDEO_CALL',
    16 => 'CONTACT_ATTRIBUTE_CAPABLE_MY_HOME',
    32 => 'CONTACT_ATTRIBUTE_CAPABLE_BUDDY',
  );
}

final class ContactCategory {
  const NORMAL = 0;
  const RECOMMEND = 1;
  static public $__names = array(
    0 => 'NORMAL',
    1 => 'RECOMMEND',
  );
}

final class ContactRelation {
  const ONEWAY = 0;
  const BOTH = 1;
  const NOT_REGISTERED = 2;
  static public $__names = array(
    0 => 'ONEWAY',
    1 => 'BOTH',
    2 => 'NOT_REGISTERED',
  );
}

final class AsymmetricKeyAlgorithm {
  const ASYMMETRIC_KEY_ALGORITHM_RSA = 1;
  const ASYMMETRIC_KEY_ALGORITHM_ECDH = 2;
  static public $__names = array(
    1 => 'ASYMMETRIC_KEY_ALGORITHM_RSA',
    2 => 'ASYMMETRIC_KEY_ALGORITHM_ECDH',
  );
}

final class ContactSetting {
  const CONTACT_SETTING_NOTIFICATION_DISABLE = 1;
  const CONTACT_SETTING_DISPLAY_NAME_OVERRIDE = 2;
  const CONTACT_SETTING_CONTACT_HIDE = 4;
  const CONTACT_SETTING_FAVORITE = 8;
  const CONTACT_SETTING_DELETE = 16;
  static public $__names = array(
    1 => 'CONTACT_SETTING_NOTIFICATION_DISABLE',
    2 => 'CONTACT_SETTING_DISPLAY_NAME_OVERRIDE',
    4 => 'CONTACT_SETTING_CONTACT_HIDE',
    8 => 'CONTACT_SETTING_FAVORITE',
    16 => 'CONTACT_SETTING_DELETE',
  );
}

final class ContactStatus {
  const UNSPECIFIED = 0;
  const FRIEND = 1;
  const FRIEND_BLOCKED = 2;
  const RECOMMEND = 3;
  const RECOMMEND_BLOCKED = 4;
  const DELETED = 5;
  const DELETED_BLOCKED = 6;
  static public $__names = array(
    0 => 'UNSPECIFIED',
    1 => 'FRIEND',
    2 => 'FRIEND_BLOCKED',
    3 => 'RECOMMEND',
    4 => 'RECOMMEND_BLOCKED',
    5 => 'DELETED',
    6 => 'DELETED_BLOCKED',
  );
}

final class ContactType {
  const MID = 0;
  const PHONE = 1;
  const EMAIL = 2;
  const USERID = 3;
  const PROXIMITY = 4;
  const GROUP = 5;
  const USER = 6;
  const QRCODE = 7;
  const PROMOTION_BOT = 8;
  const CONTACT_MESSAGE = 9;
  const FRIEND_REQUEST = 10;
  const REPAIR = 128;
  const FACEBOOK = 2305;
  const SINA = 2306;
  const RENREN = 2307;
  const FEIXIN = 2308;
  const BBM = 2309;
  const BEACON = 11;
  static public $__names = array(
    0 => 'MID',
    1 => 'PHONE',
    2 => 'EMAIL',
    3 => 'USERID',
    4 => 'PROXIMITY',
    5 => 'GROUP',
    6 => 'USER',
    7 => 'QRCODE',
    8 => 'PROMOTION_BOT',
    9 => 'CONTACT_MESSAGE',
    10 => 'FRIEND_REQUEST',
    128 => 'REPAIR',
    2305 => 'FACEBOOK',
    2306 => 'SINA',
    2307 => 'RENREN',
    2308 => 'FEIXIN',
    2309 => 'BBM',
    11 => 'BEACON',
  );
}

final class GroupPreferenceAttribute {
  const INVITATION_TICKET = 1;
  const FAVORITE_TIMESTAMP = 2;
  static public $__names = array(
    1 => 'INVITATION_TICKET',
    2 => 'FAVORITE_TIMESTAMP',
  );
}

final class ContentType {
  const NONE = 0;
  const IMAGE = 1;
  const VIDEO = 2;
  const AUDIO = 3;
  const HTML = 4;
  const PDF = 5;
  const CALL = 6;
  const STICKER = 7;
  const PRESENCE = 8;
  const GIFT = 9;
  const GROUPBOARD = 10;
  const APPLINK = 11;
  const LINK = 12;
  const CONTACT = 13;
  const FILE = 14;
  const LOCATION = 15;
  const POSTNOTIFICATION = 16;
  const RICH = 17;
  const CHATEVENT = 18;
  const MUSIC = 19;
  const PAYMENT = 20;
  const EXTIMAGE = 21;
  static public $__names = array(
    0 => 'NONE',
    1 => 'IMAGE',
    2 => 'VIDEO',
    3 => 'AUDIO',
    4 => 'HTML',
    5 => 'PDF',
    6 => 'CALL',
    7 => 'STICKER',
    8 => 'PRESENCE',
    9 => 'GIFT',
    10 => 'GROUPBOARD',
    11 => 'APPLINK',
    12 => 'LINK',
    13 => 'CONTACT',
    14 => 'FILE',
    15 => 'LOCATION',
    16 => 'POSTNOTIFICATION',
    17 => 'RICH',
    18 => 'CHATEVENT',
    19 => 'MUSIC',
    20 => 'PAYMENT',
    21 => 'EXTIMAGE',
  );
}

final class MessageRelationType {
  const FORWARD = 0;
  const AUTO_REPLY = 1;
  const SUBORDINATE = 2;
  static public $__names = array(
    0 => 'FORWARD',
    1 => 'AUTO_REPLY',
    2 => 'SUBORDINATE',
  );
}

final class CustomMode {
  const PROMOTION_FRIENDS_INVITE = 1;
  const CAPABILITY_SERVER_SIDE_SMS = 2;
  const LINE_CLIENT_ANALYTICS_CONFIGURATION = 3;
  static public $__names = array(
    1 => 'PROMOTION_FRIENDS_INVITE',
    2 => 'CAPABILITY_SERVER_SIDE_SMS',
    3 => 'LINE_CLIENT_ANALYTICS_CONFIGURATION',
  );
}

final class RoomAttribute {
  const ALL = 255;
  const NOTIFICATION_SETTING = 1;
  static public $__names = array(
    255 => 'ALL',
    1 => 'NOTIFICATION_SETTING',
  );
}

final class UserStatus {
  const NORMAL = 0;
  const UNBOUND = 1;
  const UNREGISTERED = 2;
  static public $__names = array(
    0 => 'NORMAL',
    1 => 'UNBOUND',
    2 => 'UNREGISTERED',
  );
}

final class EmailConfirmationStatus {
  const NOT_SPECIFIED = 0;
  const NOT_YET = 1;
  const DONE = 3;
  const NEED_ENFORCED_INPUT = 4;
  static public $__names = array(
    0 => 'NOT_SPECIFIED',
    1 => 'NOT_YET',
    3 => 'DONE',
    4 => 'NEED_ENFORCED_INPUT',
  );
}

final class AccountMigrationPincodeType {
  const NOT_APPLICABLE = 0;
  const NOT_SET = 1;
  const SET = 2;
  const NEED_ENFORCED_INPUT = 3;
  static public $__names = array(
    0 => 'NOT_APPLICABLE',
    1 => 'NOT_SET',
    2 => 'SET',
    3 => 'NEED_ENFORCED_INPUT',
  );
}

final class AccountMigrationCheckType {
  const SKIP = 0;
  const PINCODE = 1;
  const SECURITY_CENTER = 2;
  static public $__names = array(
    0 => 'SKIP',
    1 => 'PINCODE',
    2 => 'SECURITY_CENTER',
  );
}

final class SecurityCenterSettingsType {
  const NOT_APPLICABLE = 0;
  const NOT_SET = 1;
  const SET = 2;
  const NEED_ENFORCED_INPUT = 3;
  static public $__names = array(
    0 => 'NOT_APPLICABLE',
    1 => 'NOT_SET',
    2 => 'SET',
    3 => 'NEED_ENFORCED_INPUT',
  );
}

final class EmailConfirmationType {
  const SERVER_SIDE_EMAIL = 0;
  const CLIENT_SIDE_EMAIL = 1;
  static public $__names = array(
    0 => 'SERVER_SIDE_EMAIL',
    1 => 'CLIENT_SIDE_EMAIL',
  );
}

final class SquareChatAnnouncementType {
  const TEXT_MESSAGE = 0;
  static public $__names = array(
    0 => 'TEXT_MESSAGE',
  );
}

final class SquareChatAttribute {
  const NAME = 2;
  const SQUARE_CHAT_IMAGE = 3;
  const STATE = 4;
  static public $__names = array(
    2 => 'NAME',
    3 => 'SQUARE_CHAT_IMAGE',
    4 => 'STATE',
  );
}

final class SquareMemberAttribute {
  const DISPLAY_NAME = 1;
  const PROFILE_IMAGE = 2;
  const ABLE_TO_RECEIVE_MESSAGE = 3;
  const MEMBERSHIP_STATE = 5;
  const ROLE = 6;
  const PREFERENCE = 7;
  static public $__names = array(
    1 => 'DISPLAY_NAME',
    2 => 'PROFILE_IMAGE',
    3 => 'ABLE_TO_RECEIVE_MESSAGE',
    5 => 'MEMBERSHIP_STATE',
    6 => 'ROLE',
    7 => 'PREFERENCE',
  );
}

final class SquareMemberRelationAttribute {
  const BLOCKED = 1;
  static public $__names = array(
    1 => 'BLOCKED',
  );
}

final class SquarePreferenceAttribute {
  const FAVORITE = 1;
  const NOTI_FOR_NEW_JOIN_REQUEST = 2;
  static public $__names = array(
    1 => 'FAVORITE',
    2 => 'NOTI_FOR_NEW_JOIN_REQUEST',
  );
}

final class SquareState {
  const ALIVE = 0;
  const DELETED = 1;
  const SUSPENDED = 2;
  static public $__names = array(
    0 => 'ALIVE',
    1 => 'DELETED',
    2 => 'SUSPENDED',
  );
}

final class CommitMessageResultCode {
  const DELIVERED = 0;
  const DELIVERY_SKIPPED = 1;
  const DELIVERY_RESTRICTED = 2;
  static public $__names = array(
    0 => 'DELIVERED',
    1 => 'DELIVERY_SKIPPED',
    2 => 'DELIVERY_RESTRICTED',
  );
}

final class ErrorCode {
  const ILLEGAL_ARGUMENT = 0;
  const AUTHENTICATION_FAILED = 1;
  const DB_FAILED = 2;
  const INVALID_STATE = 3;
  const EXCESSIVE_ACCESS = 4;
  const NOT_FOUND = 5;
  const INVALID_MID = 9;
  const NOT_A_MEMBER = 10;
  const INVALID_LENGTH = 6;
  const NOT_AVAILABLE_USER = 7;
  const NOT_AUTHORIZED_DEVICE = 8;
  const NOT_AUTHORIZED_SESSION = 14;
  const INCOMPATIBLE_APP_VERSION = 11;
  const NOT_READY = 12;
  const NOT_AVAILABLE_SESSION = 13;
  const SYSTEM_ERROR = 15;
  const NO_AVAILABLE_VERIFICATION_METHOD = 16;
  const NOT_AUTHENTICATED = 17;
  const INVALID_IDENTITY_CREDENTIAL = 18;
  const NOT_AVAILABLE_IDENTITY_IDENTIFIER = 19;
  const INTERNAL_ERROR = 20;
  const NO_SUCH_IDENTITY_IDENFIER = 21;
  const DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY = 22;
  const ILLEGAL_IDENTITY_CREDENTIAL = 23;
  const UNKNOWN_CHANNEL = 24;
  const NO_SUCH_MESSAGE_BOX = 25;
  const NOT_AVAILABLE_MESSAGE_BOX = 26;
  const CHANNEL_DOES_NOT_MATCH = 27;
  const NOT_YOUR_MESSAGE = 28;
  const MESSAGE_DEFINED_ERROR = 29;
  const USER_CANNOT_ACCEPT_PRESENTS = 30;
  const USER_NOT_STICKER_OWNER = 32;
  const MAINTENANCE_ERROR = 33;
  const ACCOUNT_NOT_MATCHED = 34;
  const ABUSE_BLOCK = 35;
  const NOT_FRIEND = 36;
  const NOT_ALLOWED_CALL = 37;
  const BLOCK_FRIEND = 38;
  const INCOMPATIBLE_VOIP_VERSION = 39;
  const INVALID_SNS_ACCESS_TOKEN = 40;
  const EXTERNAL_SERVICE_NOT_AVAILABLE = 41;
  const NOT_ALLOWED_ADD_CONTACT = 42;
  const NOT_CERTIFICATED = 43;
  const NOT_ALLOWED_SECONDARY_DEVICE = 44;
  const INVALID_PIN_CODE = 45;
  const NOT_FOUND_IDENTITY_CREDENTIAL = 46;
  const EXCEED_FILE_MAX_SIZE = 47;
  const EXCEED_DAILY_QUOTA = 48;
  const NOT_SUPPORT_SEND_FILE = 49;
  const MUST_UPGRADE = 50;
  const NOT_AVAILABLE_PIN_CODE_SESSION = 51;
  const EXPIRED_REVISION = 52;
  const NOT_YET_PHONE_NUMBER = 54;
  const BAD_CALL_NUMBER = 55;
  const UNAVAILABLE_CALL_NUMBER = 56;
  const NOT_SUPPORT_CALL_SERVICE = 57;
  const CONGESTION_CONTROL = 58;
  const NO_BALANCE = 59;
  const NOT_PERMITTED_CALLER_ID = 60;
  const NO_CALLER_ID_LIMIT_EXCEEDED = 61;
  const CALLER_ID_VERIFICATION_REQUIRED = 62;
  const NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED = 63;
  const MESSAGE_NOT_FOUND = 64;
  const INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT = 65;
  const ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED = 66;
  const ACCOUNT_MIGRATION_PINCODE_BLOCKED = 67;
  const INVALID_PASSWORD_FORMAT = 69;
  const FEATURE_RESTRICTED = 70;
  const MESSAGE_NOT_DESTRUCTIBLE = 71;
  const PAID_CALL_REDEEM_FAILED = 72;
  const PREVENTED_JOIN_BY_TICKET = 73;
  const SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT = 75;
  const SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY = 76;
  const SECURITY_CENTER_NOT_VERIFIED = 77;
  const SECURITY_CENTER_BLOCKED_BY_SETTING = 78;
  const SECURITY_CENTER_BLOCKED = 79;
  const TALK_PROXY_EXCEPTION = 80;
  const E2EE_INVALID_PROTOCOL = 81;
  const E2EE_RETRY_ENCRYPT = 82;
  const E2EE_UPDATE_SENDER_KEY = 83;
  const E2EE_UPDATE_RECEIVER_KEY = 84;
  const E2EE_INVALID_ARGUMENT = 85;
  const E2EE_INVALID_VERSION = 86;
  const E2EE_SENDER_DISABLED = 87;
  const E2EE_RECEIVER_DISABLED = 88;
  const E2EE_SENDER_NOT_ALLOWED = 89;
  const E2EE_RECEIVER_NOT_ALLOWED = 90;
  const E2EE_RESEND_FAIL = 91;
  const E2EE_RESEND_OK = 92;
  const HITOKOTO_BACKUP_NO_AVAILABLE_DATA = 93;
  const E2EE_UPDATE_PRIMARY_DEVICE = 94;
  const SUCCESS = 95;
  const CANCEL = 96;
  const E2EE_PRIMARY_NOT_SUPPORT = 97;
  const E2EE_RETRY_PLAIN = 98;
  const E2EE_RECREATE_GROUP_KEY = 99;
  const E2EE_GROUP_TOO_MANY_MEMBERS = 100;
  const SERVER_BUSY = 101;
  const NOT_ALLOWED_ADD_FOLLOW = 102;
  const INCOMING_FRIEND_REQUEST_LIMIT = 103;
  const OUTGOING_FRIEND_REQUEST_LIMIT = 104;
  const OUTGOING_FRIEND_REQUEST_QUOTA = 105;
  const DUPLICATED = 106;
  const BANNED = 107;
  static public $__names = array(
    0 => 'ILLEGAL_ARGUMENT',
    1 => 'AUTHENTICATION_FAILED',
    2 => 'DB_FAILED',
    3 => 'INVALID_STATE',
    4 => 'EXCESSIVE_ACCESS',
    5 => 'NOT_FOUND',
    9 => 'INVALID_MID',
    10 => 'NOT_A_MEMBER',
    6 => 'INVALID_LENGTH',
    7 => 'NOT_AVAILABLE_USER',
    8 => 'NOT_AUTHORIZED_DEVICE',
    14 => 'NOT_AUTHORIZED_SESSION',
    11 => 'INCOMPATIBLE_APP_VERSION',
    12 => 'NOT_READY',
    13 => 'NOT_AVAILABLE_SESSION',
    15 => 'SYSTEM_ERROR',
    16 => 'NO_AVAILABLE_VERIFICATION_METHOD',
    17 => 'NOT_AUTHENTICATED',
    18 => 'INVALID_IDENTITY_CREDENTIAL',
    19 => 'NOT_AVAILABLE_IDENTITY_IDENTIFIER',
    20 => 'INTERNAL_ERROR',
    21 => 'NO_SUCH_IDENTITY_IDENFIER',
    22 => 'DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY',
    23 => 'ILLEGAL_IDENTITY_CREDENTIAL',
    24 => 'UNKNOWN_CHANNEL',
    25 => 'NO_SUCH_MESSAGE_BOX',
    26 => 'NOT_AVAILABLE_MESSAGE_BOX',
    27 => 'CHANNEL_DOES_NOT_MATCH',
    28 => 'NOT_YOUR_MESSAGE',
    29 => 'MESSAGE_DEFINED_ERROR',
    30 => 'USER_CANNOT_ACCEPT_PRESENTS',
    32 => 'USER_NOT_STICKER_OWNER',
    33 => 'MAINTENANCE_ERROR',
    34 => 'ACCOUNT_NOT_MATCHED',
    35 => 'ABUSE_BLOCK',
    36 => 'NOT_FRIEND',
    37 => 'NOT_ALLOWED_CALL',
    38 => 'BLOCK_FRIEND',
    39 => 'INCOMPATIBLE_VOIP_VERSION',
    40 => 'INVALID_SNS_ACCESS_TOKEN',
    41 => 'EXTERNAL_SERVICE_NOT_AVAILABLE',
    42 => 'NOT_ALLOWED_ADD_CONTACT',
    43 => 'NOT_CERTIFICATED',
    44 => 'NOT_ALLOWED_SECONDARY_DEVICE',
    45 => 'INVALID_PIN_CODE',
    46 => 'NOT_FOUND_IDENTITY_CREDENTIAL',
    47 => 'EXCEED_FILE_MAX_SIZE',
    48 => 'EXCEED_DAILY_QUOTA',
    49 => 'NOT_SUPPORT_SEND_FILE',
    50 => 'MUST_UPGRADE',
    51 => 'NOT_AVAILABLE_PIN_CODE_SESSION',
    52 => 'EXPIRED_REVISION',
    54 => 'NOT_YET_PHONE_NUMBER',
    55 => 'BAD_CALL_NUMBER',
    56 => 'UNAVAILABLE_CALL_NUMBER',
    57 => 'NOT_SUPPORT_CALL_SERVICE',
    58 => 'CONGESTION_CONTROL',
    59 => 'NO_BALANCE',
    60 => 'NOT_PERMITTED_CALLER_ID',
    61 => 'NO_CALLER_ID_LIMIT_EXCEEDED',
    62 => 'CALLER_ID_VERIFICATION_REQUIRED',
    63 => 'NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED',
    64 => 'MESSAGE_NOT_FOUND',
    65 => 'INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT',
    66 => 'ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED',
    67 => 'ACCOUNT_MIGRATION_PINCODE_BLOCKED',
    69 => 'INVALID_PASSWORD_FORMAT',
    70 => 'FEATURE_RESTRICTED',
    71 => 'MESSAGE_NOT_DESTRUCTIBLE',
    72 => 'PAID_CALL_REDEEM_FAILED',
    73 => 'PREVENTED_JOIN_BY_TICKET',
    75 => 'SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT',
    76 => 'SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY',
    77 => 'SECURITY_CENTER_NOT_VERIFIED',
    78 => 'SECURITY_CENTER_BLOCKED_BY_SETTING',
    79 => 'SECURITY_CENTER_BLOCKED',
    80 => 'TALK_PROXY_EXCEPTION',
    81 => 'E2EE_INVALID_PROTOCOL',
    82 => 'E2EE_RETRY_ENCRYPT',
    83 => 'E2EE_UPDATE_SENDER_KEY',
    84 => 'E2EE_UPDATE_RECEIVER_KEY',
    85 => 'E2EE_INVALID_ARGUMENT',
    86 => 'E2EE_INVALID_VERSION',
    87 => 'E2EE_SENDER_DISABLED',
    88 => 'E2EE_RECEIVER_DISABLED',
    89 => 'E2EE_SENDER_NOT_ALLOWED',
    90 => 'E2EE_RECEIVER_NOT_ALLOWED',
    91 => 'E2EE_RESEND_FAIL',
    92 => 'E2EE_RESEND_OK',
    93 => 'HITOKOTO_BACKUP_NO_AVAILABLE_DATA',
    94 => 'E2EE_UPDATE_PRIMARY_DEVICE',
    95 => 'SUCCESS',
    96 => 'CANCEL',
    97 => 'E2EE_PRIMARY_NOT_SUPPORT',
    98 => 'E2EE_RETRY_PLAIN',
    99 => 'E2EE_RECREATE_GROUP_KEY',
    100 => 'E2EE_GROUP_TOO_MANY_MEMBERS',
    101 => 'SERVER_BUSY',
    102 => 'NOT_ALLOWED_ADD_FOLLOW',
    103 => 'INCOMING_FRIEND_REQUEST_LIMIT',
    104 => 'OUTGOING_FRIEND_REQUEST_LIMIT',
    105 => 'OUTGOING_FRIEND_REQUEST_QUOTA',
    106 => 'DUPLICATED',
    107 => 'BANNED',
  );
}

final class FeatureType {
  const OBS_VIDEO = 1;
  const OBS_GENERAL = 2;
  static public $__names = array(
    1 => 'OBS_VIDEO',
    2 => 'OBS_GENERAL',
  );
}

final class GroupAttribute {
  const NAME = 1;
  const PICTURE_STATUS = 2;
  const ALL = 255;
  const PREVENTED_JOIN_BY_TICKET = 4;
  const NOTIFICATION_SETTING = 8;
  static public $__names = array(
    1 => 'NAME',
    2 => 'PICTURE_STATUS',
    255 => 'ALL',
    4 => 'PREVENTED_JOIN_BY_TICKET',
    8 => 'NOTIFICATION_SETTING',
  );
}

final class IdentityProvider {
  const UNKNOWN = 0;
  const LINE = 1;
  const NAVER_KR = 2;
  const LINE_PHONE = 3;
  static public $__names = array(
    0 => 'UNKNOWN',
    1 => 'LINE',
    2 => 'NAVER_KR',
    3 => 'LINE_PHONE',
  );
}

final class LoginResultType {
  const SUCCESS = 1;
  const REQUIRE_QRCODE = 2;
  const REQUIRE_DEVICE_CONFIRM = 3;
  const REQUIRE_SMS_CONFIRM = 4;
  static public $__names = array(
    1 => 'SUCCESS',
    2 => 'REQUIRE_QRCODE',
    3 => 'REQUIRE_DEVICE_CONFIRM',
    4 => 'REQUIRE_SMS_CONFIRM',
  );
}

final class MessageOperationType {
  const SEND_MESSAGE = 1;
  const RECEIVE_MESSAGE = 2;
  const READ_MESSAGE = 3;
  const NOTIFIED_READ_MESSAGE = 4;
  const NOTIFIED_JOIN_CHAT = 5;
  const FAILED_SEND_MESSAGE = 6;
  const SEND_CONTENT = 7;
  const SEND_CONTENT_RECEIPT = 8;
  const SEND_CHAT_REMOVED = 9;
  const REMOVE_ALL_MESSAGES = 10;
  static public $__names = array(
    1 => 'SEND_MESSAGE',
    2 => 'RECEIVE_MESSAGE',
    3 => 'READ_MESSAGE',
    4 => 'NOTIFIED_READ_MESSAGE',
    5 => 'NOTIFIED_JOIN_CHAT',
    6 => 'FAILED_SEND_MESSAGE',
    7 => 'SEND_CONTENT',
    8 => 'SEND_CONTENT_RECEIPT',
    9 => 'SEND_CHAT_REMOVED',
    10 => 'REMOVE_ALL_MESSAGES',
  );
}

final class MIDType {
  const USER = 0;
  const ROOM = 1;
  const GROUP = 2;
  const SQUARE = 3;
  const SQUARE_CHAT = 4;
  const SQUARE_MEMBER = 5;
  const BOT = 6;
  static public $__names = array(
    0 => 'USER',
    1 => 'ROOM',
    2 => 'GROUP',
    3 => 'SQUARE',
    4 => 'SQUARE_CHAT',
    5 => 'SQUARE_MEMBER',
    6 => 'BOT',
  );
}

final class ServiceCode {
  const UNKNOWN = 0;
  const TALK = 1;
  const SQUARE = 2;
  static public $__names = array(
    0 => 'UNKNOWN',
    1 => 'TALK',
    2 => 'SQUARE',
  );
}

final class FriendRequestDirection {
  const INCOMING = 1;
  const OUTGOING = 2;
  static public $__names = array(
    1 => 'INCOMING',
    2 => 'OUTGOING',
  );
}

final class FriendRequestMethod {
  const TIMELINE = 1;
  const NEARBY = 2;
  const SQUARE = 3;
  static public $__names = array(
    1 => 'TIMELINE',
    2 => 'NEARBY',
    3 => 'SQUARE',
  );
}

final class FriendRequestStatus {
  const NONE = 0;
  const AVAILABLE = 1;
  const ALREADY_REQUESTED = 2;
  const UNAVAILABLE = 3;
  static public $__names = array(
    0 => 'NONE',
    1 => 'AVAILABLE',
    2 => 'ALREADY_REQUESTED',
    3 => 'UNAVAILABLE',
  );
}

final class ModificationType {
  const ADD = 0;
  const REMOVE = 1;
  const MODIFY = 2;
  static public $__names = array(
    0 => 'ADD',
    1 => 'REMOVE',
    2 => 'MODIFY',
  );
}

final class NotificationItemFetchMode {
  const ALL = 0;
  const APPEND = 1;
  static public $__names = array(
    0 => 'ALL',
    1 => 'APPEND',
  );
}

final class NotificationQueueType {
  const GLOBAL = 1;
  const MESSAGE = 2;
  const PRIMARY = 3;
  static public $__names = array(
    1 => 'GLOBAL',
    2 => 'MESSAGE',
    3 => 'PRIMARY',
  );
}

final class GroupCallMediaType {
  const AUDIO = 1;
  const VIDEO = 2;
  static public $__names = array(
    1 => 'AUDIO',
    2 => 'VIDEO',
  );
}

final class PersonalInfo {
  const EMAIL = 0;
  const PHONE = 1;
  const BIRTHDAY = 2;
  const RAW_BIRTHDAY = 3;
  static public $__names = array(
    0 => 'EMAIL',
    1 => 'PHONE',
    2 => 'BIRTHDAY',
    3 => 'RAW_BIRTHDAY',
  );
}

final class NotificationStatus {
  const NOTIFICATION_ITEM_EXIST = 1;
  const TIMELINE_ITEM_EXIST = 2;
  const NOTE_GROUP_NEW_ITEM_EXIST = 4;
  const TIMELINE_BUDDYGROUP_CHANGED = 8;
  const NOTE_ONE_TO_ONE_NEW_ITEM_EXIST = 16;
  const ALBUM_ITEM_EXIST = 32;
  const TIMELINE_ITEM_DELETED = 64;
  const OTOGROUP_ITEM_EXIST = 128;
  const GROUPHOME_NEW_ITEM_EXIST = 256;
  const GROUPHOME_HIDDEN_ITEM_CHANGED = 512;
  const NOTIFICATION_ITEM_CHANGED = 1024;
  const BEAD_ITEM_HIDE = 2048;
  const BEAD_ITEM_SHOW = 4096;
  static public $__names = array(
    1 => 'NOTIFICATION_ITEM_EXIST',
    2 => 'TIMELINE_ITEM_EXIST',
    4 => 'NOTE_GROUP_NEW_ITEM_EXIST',
    8 => 'TIMELINE_BUDDYGROUP_CHANGED',
    16 => 'NOTE_ONE_TO_ONE_NEW_ITEM_EXIST',
    32 => 'ALBUM_ITEM_EXIST',
    64 => 'TIMELINE_ITEM_DELETED',
    128 => 'OTOGROUP_ITEM_EXIST',
    256 => 'GROUPHOME_NEW_ITEM_EXIST',
    512 => 'GROUPHOME_HIDDEN_ITEM_CHANGED',
    1024 => 'NOTIFICATION_ITEM_CHANGED',
    2048 => 'BEAD_ITEM_HIDE',
    4096 => 'BEAD_ITEM_SHOW',
  );
}

final class NotificationType {
  const APPLE_APNS = 1;
  const GOOGLE_C2DM = 2;
  const NHN_NNI = 3;
  const SKT_AOM = 4;
  const MS_MPNS = 5;
  const RIM_BIS = 6;
  const GOOGLE_GCM = 7;
  const NOKIA_NNAPI = 8;
  const TIZEN = 9;
  const LINE_BOT = 17;
  const LINE_WAP = 18;
  const APPLE_APNS_VOIP = 19;
  const MS_WNS = 20;
  const GOOGLE_FCM = 21;
  static public $__names = array(
    1 => 'APPLE_APNS',
    2 => 'GOOGLE_C2DM',
    3 => 'NHN_NNI',
    4 => 'SKT_AOM',
    5 => 'MS_MPNS',
    6 => 'RIM_BIS',
    7 => 'GOOGLE_GCM',
    8 => 'NOKIA_NNAPI',
    9 => 'TIZEN',
    17 => 'LINE_BOT',
    18 => 'LINE_WAP',
    19 => 'APPLE_APNS_VOIP',
    20 => 'MS_WNS',
    21 => 'GOOGLE_FCM',
  );
}

final class OpStatus {
  const NORMAL = 0;
  const ALERT_DISABLED = 1;
  const ALWAYS = 2;
  static public $__names = array(
    0 => 'NORMAL',
    1 => 'ALERT_DISABLED',
    2 => 'ALWAYS',
  );
}

final class OpType {
  const END_OF_OPERATION = 0;
  const UPDATE_PROFILE = 1;
  const UPDATE_SETTINGS = 36;
  const NOTIFIED_UPDATE_PROFILE = 2;
  const REGISTER_USERID = 3;
  const ADD_CONTACT = 4;
  const NOTIFIED_ADD_CONTACT = 5;
  const BLOCK_CONTACT = 6;
  const UNBLOCK_CONTACT = 7;
  const NOTIFIED_RECOMMEND_CONTACT = 8;
  const CREATE_GROUP = 9;
  const UPDATE_GROUP = 10;
  const NOTIFIED_UPDATE_GROUP = 11;
  const INVITE_INTO_GROUP = 12;
  const NOTIFIED_INVITE_INTO_GROUP = 13;
  const CANCEL_INVITATION_GROUP = 31;
  const NOTIFIED_CANCEL_INVITATION_GROUP = 32;
  const LEAVE_GROUP = 14;
  const NOTIFIED_LEAVE_GROUP = 15;
  const ACCEPT_GROUP_INVITATION = 16;
  const NOTIFIED_ACCEPT_GROUP_INVITATION = 17;
  const REJECT_GROUP_INVITATION = 34;
  const NOTIFIED_REJECT_GROUP_INVITATION = 35;
  const KICKOUT_FROM_GROUP = 18;
  const NOTIFIED_KICKOUT_FROM_GROUP = 19;
  const CREATE_ROOM = 20;
  const INVITE_INTO_ROOM = 21;
  const NOTIFIED_INVITE_INTO_ROOM = 22;
  const LEAVE_ROOM = 23;
  const NOTIFIED_LEAVE_ROOM = 24;
  const SEND_MESSAGE = 25;
  const RECEIVE_MESSAGE = 26;
  const SEND_MESSAGE_RECEIPT = 27;
  const RECEIVE_MESSAGE_RECEIPT = 28;
  const SEND_CONTENT_RECEIPT = 29;
  const RECEIVE_ANNOUNCEMENT = 30;
  const NOTIFIED_UNREGISTER_USER = 33;
  const INVITE_VIA_EMAIL = 38;
  const NOTIFIED_REGISTER_USER = 37;
  const NOTIFIED_REQUEST_RECOVERY = 39;
  const SEND_CHAT_CHECKED = 40;
  const SEND_CHAT_REMOVED = 41;
  const NOTIFIED_FORCE_SYNC = 42;
  const SEND_CONTENT = 43;
  const SEND_MESSAGE_MYHOME = 44;
  const NOTIFIED_UPDATE_CONTENT_PREVIEW = 45;
  const REMOVE_ALL_MESSAGES = 46;
  const NOTIFIED_UPDATE_PURCHASES = 47;
  const DUMMY = 48;
  const UPDATE_CONTACT = 49;
  const NOTIFIED_RECEIVED_CALL = 50;
  const CANCEL_CALL = 51;
  const NOTIFIED_REDIRECT = 52;
  const NOTIFIED_CHANNEL_SYNC = 53;
  const FAILED_SEND_MESSAGE = 54;
  const NOTIFIED_READ_MESSAGE = 55;
  const FAILED_EMAIL_CONFIRMATION = 56;
  const NOTIFIED_CHAT_CONTENT = 58;
  const NOTIFIED_PUSH_NOTICENTER_ITEM = 59;
  const NOTIFIED_JOIN_CHAT = 60;
  const NOTIFIED_LEAVE_CHAT = 61;
  const NOTIFIED_TYPING = 62;
  const FRIEND_REQUEST_ACCEPTED = 63;
  const DESTROY_MESSAGE = 64;
  const NOTIFIED_DESTROY_MESSAGE = 65;
  const UPDATE_PUBLICKEYCHAIN = 66;
  const NOTIFIED_UPDATE_PUBLICKEYCHAIN = 67;
  const NOTIFIED_BLOCK_CONTACT = 68;
  const NOTIFIED_UNBLOCK_CONTACT = 69;
  const UPDATE_GROUPPREFERENCE = 70;
  const NOTIFIED_PAYMENT_EVENT = 71;
  const REGISTER_E2EE_PUBLICKEY = 72;
  const NOTIFIED_E2EE_KEY_EXCHANGE_REQ = 73;
  const NOTIFIED_E2EE_KEY_EXCHANGE_RESP = 74;
  const NOTIFIED_E2EE_MESSAGE_RESEND_REQ = 75;
  const NOTIFIED_E2EE_MESSAGE_RESEND_RESP = 76;
  const NOTIFIED_E2EE_KEY_UPDATE = 77;
  const NOTIFIED_BUDDY_UPDATE_PROFILE = 78;
  const NOTIFIED_UPDATE_LINEAT_TABS = 79;
  const UPDATE_ROOM = 80;
  const NOTIFIED_BEACON_DETECTED = 81;
  const UPDATE_EXTENDED_PROFILE = 82;
  const ADD_FOLLOW = 83;
  const NOTIFIED_ADD_FOLLOW = 84;
  const DELETE_FOLLOW = 85;
  const NOTIFIED_DELETE_FOLLOW = 86;
  const UPDATE_TIMELINE_SETTINGS = 87;
  const NOTIFIED_FRIEND_REQUEST = 88;
  const UPDATE_RINGBACK_TONE = 89;
  const NOTIFIED_POSTBACK = 90;
  const RECEIVE_READ_WATERMARK = 91;
  const NOTIFIED_MESSAGE_DELIVERED = 92;
  const NOTIFIED_UPDATE_CHAT_BAR = 93;
  const NOTIFIED_CHATAPP_INSTALLED = 94;
  const NOTIFIED_CHATAPP_UPDATED = 95;
  const NOTIFIED_CHATAPP_NEW_MARK = 96;
  const NOTIFIED_CHATAPP_DELETED = 97;
  const NOTIFIED_CHATAPP_SYNC = 98;
  const NOTIFIED_UPDATE_MESSAGE = 99;
  static public $__names = array(
    0 => 'END_OF_OPERATION',
    1 => 'UPDATE_PROFILE',
    36 => 'UPDATE_SETTINGS',
    2 => 'NOTIFIED_UPDATE_PROFILE',
    3 => 'REGISTER_USERID',
    4 => 'ADD_CONTACT',
    5 => 'NOTIFIED_ADD_CONTACT',
    6 => 'BLOCK_CONTACT',
    7 => 'UNBLOCK_CONTACT',
    8 => 'NOTIFIED_RECOMMEND_CONTACT',
    9 => 'CREATE_GROUP',
    10 => 'UPDATE_GROUP',
    11 => 'NOTIFIED_UPDATE_GROUP',
    12 => 'INVITE_INTO_GROUP',
    13 => 'NOTIFIED_INVITE_INTO_GROUP',
    31 => 'CANCEL_INVITATION_GROUP',
    32 => 'NOTIFIED_CANCEL_INVITATION_GROUP',
    14 => 'LEAVE_GROUP',
    15 => 'NOTIFIED_LEAVE_GROUP',
    16 => 'ACCEPT_GROUP_INVITATION',
    17 => 'NOTIFIED_ACCEPT_GROUP_INVITATION',
    34 => 'REJECT_GROUP_INVITATION',
    35 => 'NOTIFIED_REJECT_GROUP_INVITATION',
    18 => 'KICKOUT_FROM_GROUP',
    19 => 'NOTIFIED_KICKOUT_FROM_GROUP',
    20 => 'CREATE_ROOM',
    21 => 'INVITE_INTO_ROOM',
    22 => 'NOTIFIED_INVITE_INTO_ROOM',
    23 => 'LEAVE_ROOM',
    24 => 'NOTIFIED_LEAVE_ROOM',
    25 => 'SEND_MESSAGE',
    26 => 'RECEIVE_MESSAGE',
    27 => 'SEND_MESSAGE_RECEIPT',
    28 => 'RECEIVE_MESSAGE_RECEIPT',
    29 => 'SEND_CONTENT_RECEIPT',
    30 => 'RECEIVE_ANNOUNCEMENT',
    33 => 'NOTIFIED_UNREGISTER_USER',
    38 => 'INVITE_VIA_EMAIL',
    37 => 'NOTIFIED_REGISTER_USER',
    39 => 'NOTIFIED_REQUEST_RECOVERY',
    40 => 'SEND_CHAT_CHECKED',
    41 => 'SEND_CHAT_REMOVED',
    42 => 'NOTIFIED_FORCE_SYNC',
    43 => 'SEND_CONTENT',
    44 => 'SEND_MESSAGE_MYHOME',
    45 => 'NOTIFIED_UPDATE_CONTENT_PREVIEW',
    46 => 'REMOVE_ALL_MESSAGES',
    47 => 'NOTIFIED_UPDATE_PURCHASES',
    48 => 'DUMMY',
    49 => 'UPDATE_CONTACT',
    50 => 'NOTIFIED_RECEIVED_CALL',
    51 => 'CANCEL_CALL',
    52 => 'NOTIFIED_REDIRECT',
    53 => 'NOTIFIED_CHANNEL_SYNC',
    54 => 'FAILED_SEND_MESSAGE',
    55 => 'NOTIFIED_READ_MESSAGE',
    56 => 'FAILED_EMAIL_CONFIRMATION',
    58 => 'NOTIFIED_CHAT_CONTENT',
    59 => 'NOTIFIED_PUSH_NOTICENTER_ITEM',
    60 => 'NOTIFIED_JOIN_CHAT',
    61 => 'NOTIFIED_LEAVE_CHAT',
    62 => 'NOTIFIED_TYPING',
    63 => 'FRIEND_REQUEST_ACCEPTED',
    64 => 'DESTROY_MESSAGE',
    65 => 'NOTIFIED_DESTROY_MESSAGE',
    66 => 'UPDATE_PUBLICKEYCHAIN',
    67 => 'NOTIFIED_UPDATE_PUBLICKEYCHAIN',
    68 => 'NOTIFIED_BLOCK_CONTACT',
    69 => 'NOTIFIED_UNBLOCK_CONTACT',
    70 => 'UPDATE_GROUPPREFERENCE',
    71 => 'NOTIFIED_PAYMENT_EVENT',
    72 => 'REGISTER_E2EE_PUBLICKEY',
    73 => 'NOTIFIED_E2EE_KEY_EXCHANGE_REQ',
    74 => 'NOTIFIED_E2EE_KEY_EXCHANGE_RESP',
    75 => 'NOTIFIED_E2EE_MESSAGE_RESEND_REQ',
    76 => 'NOTIFIED_E2EE_MESSAGE_RESEND_RESP',
    77 => 'NOTIFIED_E2EE_KEY_UPDATE',
    78 => 'NOTIFIED_BUDDY_UPDATE_PROFILE',
    79 => 'NOTIFIED_UPDATE_LINEAT_TABS',
    80 => 'UPDATE_ROOM',
    81 => 'NOTIFIED_BEACON_DETECTED',
    82 => 'UPDATE_EXTENDED_PROFILE',
    83 => 'ADD_FOLLOW',
    84 => 'NOTIFIED_ADD_FOLLOW',
    85 => 'DELETE_FOLLOW',
    86 => 'NOTIFIED_DELETE_FOLLOW',
    87 => 'UPDATE_TIMELINE_SETTINGS',
    88 => 'NOTIFIED_FRIEND_REQUEST',
    89 => 'UPDATE_RINGBACK_TONE',
    90 => 'NOTIFIED_POSTBACK',
    91 => 'RECEIVE_READ_WATERMARK',
    92 => 'NOTIFIED_MESSAGE_DELIVERED',
    93 => 'NOTIFIED_UPDATE_CHAT_BAR',
    94 => 'NOTIFIED_CHATAPP_INSTALLED',
    95 => 'NOTIFIED_CHATAPP_UPDATED',
    96 => 'NOTIFIED_CHATAPP_NEW_MARK',
    97 => 'NOTIFIED_CHATAPP_DELETED',
    98 => 'NOTIFIED_CHATAPP_SYNC',
    99 => 'NOTIFIED_UPDATE_MESSAGE',
  );
}

final class PayloadType {
  const PAYLOAD_BUY = 101;
  const PAYLOAD_CS = 111;
  const PAYLOAD_BONUS = 121;
  const PAYLOAD_EVENT = 131;
  static public $__names = array(
    101 => 'PAYLOAD_BUY',
    111 => 'PAYLOAD_CS',
    121 => 'PAYLOAD_BONUS',
    131 => 'PAYLOAD_EVENT',
  );
}

final class PaymentPgType {
  const PAYMENT_PG_NONE = 0;
  const PAYMENT_PG_AU = 1;
  const PAYMENT_PG_AL = 2;
  static public $__names = array(
    0 => 'PAYMENT_PG_NONE',
    1 => 'PAYMENT_PG_AU',
    2 => 'PAYMENT_PG_AL',
  );
}

final class PaymentType {
  const PAYMENT_APPLE = 1;
  const PAYMENT_GOOGLE = 2;
  static public $__names = array(
    1 => 'PAYMENT_APPLE',
    2 => 'PAYMENT_GOOGLE',
  );
}

final class ProductBannerLinkType {
  const BANNER_LINK_NONE = 0;
  const BANNER_LINK_ITEM = 1;
  const BANNER_LINK_URL = 2;
  const BANNER_LINK_CATEGORY = 3;
  static public $__names = array(
    0 => 'BANNER_LINK_NONE',
    1 => 'BANNER_LINK_ITEM',
    2 => 'BANNER_LINK_URL',
    3 => 'BANNER_LINK_CATEGORY',
  );
}

final class ProductEventType {
  const NO_EVENT = 0;
  const CARRIER_ANY = 65537;
  const BUDDY_ANY = 131073;
  const INSTALL_IOS = 196609;
  const INSTALL_ANDROID = 196610;
  const MISSION_ANY = 262145;
  const MUSTBUY_ANY = 327681;
  static public $__names = array(
    0 => 'NO_EVENT',
    65537 => 'CARRIER_ANY',
    131073 => 'BUDDY_ANY',
    196609 => 'INSTALL_IOS',
    196610 => 'INSTALL_ANDROID',
    262145 => 'MISSION_ANY',
    327681 => 'MUSTBUY_ANY',
  );
}

final class StickerResourceType {
  const STATIC = 1;
  const ANIMATION = 2;
  const SOUND = 3;
  const ANIMATION_SOUND = 4;
  const POPUP = 5;
  const POPUP_SOUND = 6;
  static public $__names = array(
    1 => 'STATIC',
    2 => 'ANIMATION',
    3 => 'SOUND',
    4 => 'ANIMATION_SOUND',
    5 => 'POPUP',
    6 => 'POPUP_SOUND',
  );
}

final class PlaceSearchProvider {
  const GOOGLE = 0;
  const BAIDU = 1;
  static public $__names = array(
    0 => 'GOOGLE',
    1 => 'BAIDU',
  );
}

final class PointErrorCode {
  const REQUEST_DUPLICATION = 3001;
  const INVALID_PARAMETER = 3002;
  const NOT_ENOUGH_BALANCE = 3003;
  const AUTHENTICATION_FAIL = 3004;
  const API_ACCESS_FORBIDDEN = 3005;
  const MEMBER_ACCOUNT_NOT_FOUND = 3006;
  const SERVICE_ACCOUNT_NOT_FOUND = 3007;
  const TRANSACTION_NOT_FOUND = 3008;
  const ALREADY_REVERSED_TRANSACTION = 3009;
  const MESSAGE_NOT_READABLE = 3010;
  const HTTP_REQUEST_METHOD_NOT_SUPPORTED = 3011;
  const HTTP_MEDIA_TYPE_NOT_SUPPORTED = 3012;
  const NOT_ALLOWED_TO_DEPOSIT = 3013;
  const NOT_ALLOWED_TO_PAY = 3014;
  const TRANSACTION_ACCESS_FORBIDDEN = 3015;
  const INVALID_SERVICE_CONFIGURATION = 4001;
  const DCS_COMMUNICATION_FAIL = 5004;
  const UPDATE_BALANCE_FAIL = 5007;
  const SYSTEM_ERROR = 5999;
  const SYSTEM_MAINTENANCE = 5888;
  static public $__names = array(
    3001 => 'REQUEST_DUPLICATION',
    3002 => 'INVALID_PARAMETER',
    3003 => 'NOT_ENOUGH_BALANCE',
    3004 => 'AUTHENTICATION_FAIL',
    3005 => 'API_ACCESS_FORBIDDEN',
    3006 => 'MEMBER_ACCOUNT_NOT_FOUND',
    3007 => 'SERVICE_ACCOUNT_NOT_FOUND',
    3008 => 'TRANSACTION_NOT_FOUND',
    3009 => 'ALREADY_REVERSED_TRANSACTION',
    3010 => 'MESSAGE_NOT_READABLE',
    3011 => 'HTTP_REQUEST_METHOD_NOT_SUPPORTED',
    3012 => 'HTTP_MEDIA_TYPE_NOT_SUPPORTED',
    3013 => 'NOT_ALLOWED_TO_DEPOSIT',
    3014 => 'NOT_ALLOWED_TO_PAY',
    3015 => 'TRANSACTION_ACCESS_FORBIDDEN',
    4001 => 'INVALID_SERVICE_CONFIGURATION',
    5004 => 'DCS_COMMUNICATION_FAIL',
    5007 => 'UPDATE_BALANCE_FAIL',
    5999 => 'SYSTEM_ERROR',
    5888 => 'SYSTEM_MAINTENANCE',
  );
}

final class ProfileAttribute {
  const ALL = 511;
  const EMAIL = 1;
  const DISPLAY_NAME = 2;
  const PHONETIC_NAME = 4;
  const PICTURE = 8;
  const STATUS_MESSAGE = 16;
  const ALLOW_SEARCH_BY_USERID = 32;
  const ALLOW_SEARCH_BY_EMAIL = 64;
  const BUDDY_STATUS = 128;
  const MUSIC_PROFILE = 256;
  static public $__names = array(
    511 => 'ALL',
    1 => 'EMAIL',
    2 => 'DISPLAY_NAME',
    4 => 'PHONETIC_NAME',
    8 => 'PICTURE',
    16 => 'STATUS_MESSAGE',
    32 => 'ALLOW_SEARCH_BY_USERID',
    64 => 'ALLOW_SEARCH_BY_EMAIL',
    128 => 'BUDDY_STATUS',
    256 => 'MUSIC_PROFILE',
  );
}

final class PublicType {
  const HIDDEN = 0;
  const PUBLIC = 1000;
  static public $__names = array(
    0 => 'HIDDEN',
    1000 => 'PUBLIC',
  );
}

final class RedirectType {
  const NONE = 0;
  const EXPIRE_SECOND = 1;
  static public $__names = array(
    0 => 'NONE',
    1 => 'EXPIRE_SECOND',
  );
}

final class RegistrationType {
  const PHONE = 0;
  const EMAIL_WAP = 1;
  const FACEBOOK = 2305;
  const SINA = 2306;
  const RENREN = 2307;
  const FEIXIN = 2308;
  static public $__names = array(
    0 => 'PHONE',
    1 => 'EMAIL_WAP',
    2305 => 'FACEBOOK',
    2306 => 'SINA',
    2307 => 'RENREN',
    2308 => 'FEIXIN',
  );
}

final class ChatRoomAnnouncementType {
  const MESSAGE = 0;
  const NOTE = 1;
  static public $__names = array(
    0 => 'MESSAGE',
    1 => 'NOTE',
  );
}

final class SettingsAttribute {
  const ALL = 2147483647;
  const NOTIFICATION_ENABLE = 1;
  const NOTIFICATION_MUTE_EXPIRATION = 2;
  const NOTIFICATION_NEW_MESSAGE = 4;
  const NOTIFICATION_GROUP_INVITATION = 8;
  const NOTIFICATION_SHOW_MESSAGE = 16;
  const NOTIFICATION_INCOMING_CALL = 32;
  const NOTIFICATION_SOUND_MESSAGE = 256;
  const NOTIFICATION_SOUND_GROUP = 512;
  const NOTIFICATION_DISABLED_WITH_SUB = 65536;
  const NOTIFICATION_PAYMENT = 131072;
  const PRIVACY_SYNC_CONTACTS = 64;
  const PRIVACY_SEARCH_BY_PHONE_NUMBER = 128;
  const PRIVACY_SEARCH_BY_USERID = 8192;
  const PRIVACY_SEARCH_BY_EMAIL = 16384;
  const PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN = 2097152;
  const PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME = 8388608;
  const PRIVACY_ALLOW_FRIEND_REQUEST = 1073741824;
  const PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND = 33554432;
  const PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL = 67108864;
  const PRIVACY_AGREE_USE_PAIDCALL = 134217728;
  const CONTACT_MY_TICKET = 1024;
  const IDENTITY_PROVIDER = 2048;
  const IDENTITY_IDENTIFIER = 4096;
  const SNS_ACCOUNT = 524288;
  const PHONE_REGISTRATION = 1048576;
  const PREFERENCE_LOCALE = 32768;
  const CUSTOM_MODE = 4194304;
  const EMAIL_CONFIRMATION_STATUS = 16777216;
  const ACCOUNT_MIGRATION_PINCODE = 268435456;
  const ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE = 536870912;
  const SECURITY_CENTER_SETTINGS = 262144;
  static public $__names = array(
    2147483647 => 'ALL',
    1 => 'NOTIFICATION_ENABLE',
    2 => 'NOTIFICATION_MUTE_EXPIRATION',
    4 => 'NOTIFICATION_NEW_MESSAGE',
    8 => 'NOTIFICATION_GROUP_INVITATION',
    16 => 'NOTIFICATION_SHOW_MESSAGE',
    32 => 'NOTIFICATION_INCOMING_CALL',
    256 => 'NOTIFICATION_SOUND_MESSAGE',
    512 => 'NOTIFICATION_SOUND_GROUP',
    65536 => 'NOTIFICATION_DISABLED_WITH_SUB',
    131072 => 'NOTIFICATION_PAYMENT',
    64 => 'PRIVACY_SYNC_CONTACTS',
    128 => 'PRIVACY_SEARCH_BY_PHONE_NUMBER',
    8192 => 'PRIVACY_SEARCH_BY_USERID',
    16384 => 'PRIVACY_SEARCH_BY_EMAIL',
    2097152 => 'PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN',
    8388608 => 'PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME',
    1073741824 => 'PRIVACY_ALLOW_FRIEND_REQUEST',
    33554432 => 'PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND',
    67108864 => 'PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL',
    134217728 => 'PRIVACY_AGREE_USE_PAIDCALL',
    1024 => 'CONTACT_MY_TICKET',
    2048 => 'IDENTITY_PROVIDER',
    4096 => 'IDENTITY_IDENTIFIER',
    524288 => 'SNS_ACCOUNT',
    1048576 => 'PHONE_REGISTRATION',
    32768 => 'PREFERENCE_LOCALE',
    4194304 => 'CUSTOM_MODE',
    16777216 => 'EMAIL_CONFIRMATION_STATUS',
    268435456 => 'ACCOUNT_MIGRATION_PINCODE',
    536870912 => 'ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE',
    262144 => 'SECURITY_CENTER_SETTINGS',
  );
}

final class SettingsAttributeEx {
  const NOTIFICATION_ENABLE = 0;
  const NOTIFICATION_MUTE_EXPIRATION = 1;
  const NOTIFICATION_NEW_MESSAGE = 2;
  const NOTIFICATION_GROUP_INVITATION = 3;
  const NOTIFICATION_SHOW_MESSAGE = 4;
  const NOTIFICATION_INCOMING_CALL = 5;
  const NOTIFICATION_SOUND_MESSAGE = 8;
  const NOTIFICATION_SOUND_GROUP = 9;
  const NOTIFICATION_DISABLED_WITH_SUB = 16;
  const NOTIFICATION_PAYMENT = 17;
  const NOTIFICATION_MENTION = 40;
  const NOTIFICATION_THUMBNAIL = 45;
  const PRIVACY_SYNC_CONTACTS = 6;
  const PRIVACY_SEARCH_BY_PHONE_NUMBER = 7;
  const PRIVACY_SEARCH_BY_USERID = 13;
  const PRIVACY_SEARCH_BY_EMAIL = 14;
  const PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN = 21;
  const PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME = 23;
  const PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME = 35;
  const PRIVACY_ALLOW_FRIEND_REQUEST = 30;
  const PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND = 25;
  const PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL = 26;
  const PRIVACY_AGREE_USE_PAIDCALL = 27;
  const CONTACT_MY_TICKET = 10;
  const IDENTITY_PROVIDER = 11;
  const IDENTITY_IDENTIFIER = 12;
  const SNS_ACCOUNT = 19;
  const PHONE_REGISTRATION = 20;
  const PREFERENCE_LOCALE = 15;
  const CUSTOM_MODE = 22;
  const EMAIL_CONFIRMATION_STATUS = 24;
  const ACCOUNT_MIGRATION_PINCODE = 28;
  const ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE = 29;
  const SECURITY_CENTER_SETTINGS = 18;
  const E2EE_ENABLE = 33;
  const ENABLE_SOUND_TO_TEXT = 47;
  const HITOKOTO_BACKUP_REQUESTED = 34;
  const CONTACT_ALLOW_FOLLOWING = 36;
  const PRIVACY_ALLOW_NEARBY = 37;
  const AGREEMENT_NEARBY = 38;
  const AGREEMENT_SQUARE = 39;
  const ALLOW_UNREGISTRATION_SECONDARY_DEVICE = 41;
  const AGREEMENT_BOT_USE = 42;
  const AGREEMENT_SHAKE_FUNCTION = 43;
  const AGREEMENT_MOBILE_CONTACT_NAME = 44;
  const AGREEMENT_SOUND_TO_TEXT = 46;
  static public $__names = array(
    0 => 'NOTIFICATION_ENABLE',
    1 => 'NOTIFICATION_MUTE_EXPIRATION',
    2 => 'NOTIFICATION_NEW_MESSAGE',
    3 => 'NOTIFICATION_GROUP_INVITATION',
    4 => 'NOTIFICATION_SHOW_MESSAGE',
    5 => 'NOTIFICATION_INCOMING_CALL',
    8 => 'NOTIFICATION_SOUND_MESSAGE',
    9 => 'NOTIFICATION_SOUND_GROUP',
    16 => 'NOTIFICATION_DISABLED_WITH_SUB',
    17 => 'NOTIFICATION_PAYMENT',
    40 => 'NOTIFICATION_MENTION',
    45 => 'NOTIFICATION_THUMBNAIL',
    6 => 'PRIVACY_SYNC_CONTACTS',
    7 => 'PRIVACY_SEARCH_BY_PHONE_NUMBER',
    13 => 'PRIVACY_SEARCH_BY_USERID',
    14 => 'PRIVACY_SEARCH_BY_EMAIL',
    21 => 'PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN',
    23 => 'PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME',
    35 => 'PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME',
    30 => 'PRIVACY_ALLOW_FRIEND_REQUEST',
    25 => 'PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND',
    26 => 'PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL',
    27 => 'PRIVACY_AGREE_USE_PAIDCALL',
    10 => 'CONTACT_MY_TICKET',
    11 => 'IDENTITY_PROVIDER',
    12 => 'IDENTITY_IDENTIFIER',
    19 => 'SNS_ACCOUNT',
    20 => 'PHONE_REGISTRATION',
    15 => 'PREFERENCE_LOCALE',
    22 => 'CUSTOM_MODE',
    24 => 'EMAIL_CONFIRMATION_STATUS',
    28 => 'ACCOUNT_MIGRATION_PINCODE',
    29 => 'ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE',
    18 => 'SECURITY_CENTER_SETTINGS',
    33 => 'E2EE_ENABLE',
    47 => 'ENABLE_SOUND_TO_TEXT',
    34 => 'HITOKOTO_BACKUP_REQUESTED',
    36 => 'CONTACT_ALLOW_FOLLOWING',
    37 => 'PRIVACY_ALLOW_NEARBY',
    38 => 'AGREEMENT_NEARBY',
    39 => 'AGREEMENT_SQUARE',
    41 => 'ALLOW_UNREGISTRATION_SECONDARY_DEVICE',
    42 => 'AGREEMENT_BOT_USE',
    43 => 'AGREEMENT_SHAKE_FUNCTION',
    44 => 'AGREEMENT_MOBILE_CONTACT_NAME',
    46 => 'AGREEMENT_SOUND_TO_TEXT',
  );
}

final class SnsIdType {
  const FACEBOOK = 1;
  const SINA = 2;
  const RENREN = 3;
  const FEIXIN = 4;
  const BBM = 5;
  static public $__names = array(
    1 => 'FACEBOOK',
    2 => 'SINA',
    3 => 'RENREN',
    4 => 'FEIXIN',
    5 => 'BBM',
  );
}

final class SpammerReason {
  const OTHER = 0;
  const ADVERTISING = 1;
  const GENDER_HARASSMENT = 2;
  const HARASSMENT = 3;
  static public $__names = array(
    0 => 'OTHER',
    1 => 'ADVERTISING',
    2 => 'GENDER_HARASSMENT',
    3 => 'HARASSMENT',
  );
}

final class SyncActionType {
  const SYNC = 0;
  const REPORT = 1;
  static public $__names = array(
    0 => 'SYNC',
    1 => 'REPORT',
  );
}

final class SpotCategory {
  const UNKNOWN = 0;
  const GOURMET = 1;
  const BEAUTY = 2;
  const TRAVEL = 3;
  const SHOPPING = 4;
  const ENTERTAINMENT = 5;
  const SPORTS = 6;
  const TRANSPORT = 7;
  const LIFE = 8;
  const HOSPITAL = 9;
  const FINANCE = 10;
  const EDUCATION = 11;
  const OTHER = 12;
  const ALL = 10000;
  static public $__names = array(
    0 => 'UNKNOWN',
    1 => 'GOURMET',
    2 => 'BEAUTY',
    3 => 'TRAVEL',
    4 => 'SHOPPING',
    5 => 'ENTERTAINMENT',
    6 => 'SPORTS',
    7 => 'TRANSPORT',
    8 => 'LIFE',
    9 => 'HOSPITAL',
    10 => 'FINANCE',
    11 => 'EDUCATION',
    12 => 'OTHER',
    10000 => 'ALL',
  );
}

final class SyncCategory {
  const PROFILE = 0;
  const SETTINGS = 1;
  const OPS = 2;
  const CONTACT = 3;
  const RECOMMEND = 4;
  const BLOCK = 5;
  const GROUP = 6;
  const ROOM = 7;
  const NOTIFICATION = 8;
  const ADDRESS_BOOK = 9;
  static public $__names = array(
    0 => 'PROFILE',
    1 => 'SETTINGS',
    2 => 'OPS',
    3 => 'CONTACT',
    4 => 'RECOMMEND',
    5 => 'BLOCK',
    6 => 'GROUP',
    7 => 'ROOM',
    8 => 'NOTIFICATION',
    9 => 'ADDRESS_BOOK',
  );
}

final class TMessageBoxStatus {
  const ACTIVATED = 1;
  const UNREAD = 2;
  static public $__names = array(
    1 => 'ACTIVATED',
    2 => 'UNREAD',
  );
}

final class UniversalNotificationServiceErrorCode {
  const INTERNAL_ERROR = 0;
  const INVALID_KEY = 1;
  const ILLEGAL_ARGUMENT = 2;
  const TOO_MANY_REQUEST = 3;
  const AUTHENTICATION_FAILED = 4;
  const NO_WRITE_PERMISSION = 5;
  static public $__names = array(
    0 => 'INTERNAL_ERROR',
    1 => 'INVALID_KEY',
    2 => 'ILLEGAL_ARGUMENT',
    3 => 'TOO_MANY_REQUEST',
    4 => 'AUTHENTICATION_FAILED',
    5 => 'NO_WRITE_PERMISSION',
  );
}

final class UnregistrationReason {
  const UNREGISTRATION_REASON_UNREGISTER_USER = 1;
  const UNREGISTRATION_REASON_UNBIND_DEVICE = 2;
  static public $__names = array(
    1 => 'UNREGISTRATION_REASON_UNREGISTER_USER',
    2 => 'UNREGISTRATION_REASON_UNBIND_DEVICE',
  );
}

final class UserAgeType {
  const OVER = 1;
  const UNDER = 2;
  const UNDEFINED = 3;
  static public $__names = array(
    1 => 'OVER',
    2 => 'UNDER',
    3 => 'UNDEFINED',
  );
}

final class VerificationMethod {
  const NO_AVAILABLE = 0;
  const PIN_VIA_SMS = 1;
  const CALLERID_INDIGO = 2;
  const PIN_VIA_TTS = 4;
  const SKIP = 10;
  static public $__names = array(
    0 => 'NO_AVAILABLE',
    1 => 'PIN_VIA_SMS',
    2 => 'CALLERID_INDIGO',
    4 => 'PIN_VIA_TTS',
    10 => 'SKIP',
  );
}

final class VerificationResult {
  const FAILED = 0;
  const OK_NOT_REGISTERED_YET = 1;
  const OK_REGISTERED_WITH_SAME_DEVICE = 2;
  const OK_REGISTERED_WITH_ANOTHER_DEVICE = 3;
  static public $__names = array(
    0 => 'FAILED',
    1 => 'OK_NOT_REGISTERED_YET',
    2 => 'OK_REGISTERED_WITH_SAME_DEVICE',
    3 => 'OK_REGISTERED_WITH_ANOTHER_DEVICE',
  );
}

final class WapInvitationType {
  const REGISTRATION = 1;
  const CHAT = 2;
  static public $__names = array(
    1 => 'REGISTRATION',
    2 => 'CHAT',
  );
}

final class MediaType {
  const AUDIO = 1;
  const VIDEO = 2;
  static public $__names = array(
    1 => 'AUDIO',
    2 => 'VIDEO',
  );
}

final class SQErrorCode {
  const UNKNOWN = 0;
  const ILLEGAL_ARGUMENT = 400;
  const AUTHENTICATION_FAILURE = 401;
  const FORBIDDEN = 403;
  const NOT_FOUND = 404;
  const REVISION_MISMATCH = 409;
  const PRECONDITION_FAILED = 410;
  const INTERNAL_ERROR = 500;
  const NOT_IMPLEMENTED = 501;
  const TRY_AGAIN_LATER = 505;
  static public $__names = array(
    0 => 'UNKNOWN',
    400 => 'ILLEGAL_ARGUMENT',
    401 => 'AUTHENTICATION_FAILURE',
    403 => 'FORBIDDEN',
    404 => 'NOT_FOUND',
    409 => 'REVISION_MISMATCH',
    410 => 'PRECONDITION_FAILED',
    500 => 'INTERNAL_ERROR',
    501 => 'NOT_IMPLEMENTED',
    505 => 'TRY_AGAIN_LATER',
  );
}

final class SquareEventType {
  const RECEIVE_MESSAGE = 0;
  const SEND_MESSAGE = 1;
  const NOTIFIED_JOIN_SQUARE_CHAT = 2;
  const NOTIFIED_INVITE_INTO_SQUARE_CHAT = 3;
  const NOTIFIED_LEAVE_SQUARE_CHAT = 4;
  const NOTIFIED_DESTROY_MESSAGE = 5;
  const NOTIFIED_MARK_AS_READ = 6;
  const NOTIFIED_UPDATE_SQUARE_MEMBER_PROFILE = 7;
  const NOTIFIED_KICKOUT_FROM_SQUARE = 19;
  const NOTIFIED_SHUTDOWN_SQUARE = 18;
  const NOTIFIED_DELETE_SQUARE_CHAT = 20;
  const NOTIFIED_UPDATE_SQUARE_CHAT_PROFILE_NAME = 30;
  const NOTIFIED_UPDATE_SQUARE_CHAT_PROFILE_IMAGE = 31;
  const NOTIFIED_UPDATE_SQUARE_CHAT_ANNOUNCEMENT = 37;
  const NOTIFIED_ADD_BOT = 33;
  const NOTIFIED_REMOVE_BOT = 34;
  const NOTIFIED_UPDATE_SQUARE = 8;
  const NOTIFIED_UPDATE_SQUARE_STATUS = 9;
  const NOTIFIED_UPDATE_SQUARE_AUTHORITY = 10;
  const NOTIFIED_UPDATE_SQUARE_MEMBER = 11;
  const NOTIFIED_UPDATE_SQUARE_CHAT = 12;
  const NOTIFIED_UPDATE_SQUARE_CHAT_STATUS = 13;
  const NOTIFIED_UPDATE_SQUARE_CHAT_MEMBER = 14;
  const NOTIFIED_CREATE_SQUARE_MEMBER = 15;
  const NOTIFIED_CREATE_SQUARE_CHAT_MEMBER = 16;
  const NOTIFIED_UPDATE_SQUARE_MEMBER_RELATION = 17;
  const NOTIFIED_UPDATE_SQUARE_FEATURE_SET = 32;
  const NOTIFIED_UPDATE_SQUARE_NOTE_STATUS = 36;
  const NOTIFICATION_JOIN_REQUEST = 21;
  const NOTIFICATION_JOINED = 22;
  const NOTIFICATION_PROMOTED_COADMIN = 23;
  const NOTIFICATION_PROMOTED_ADMIN = 24;
  const NOTIFICATION_DEMOTED_MEMBER = 25;
  const NOTIFICATION_KICKED_OUT = 26;
  const NOTIFICATION_SQUARE_DELETE = 27;
  const NOTIFICATION_SQUARE_CHAT_DELETE = 28;
  const NOTIFICATION_MESSAGE = 29;
  static public $__names = array(
    0 => 'RECEIVE_MESSAGE',
    1 => 'SEND_MESSAGE',
    2 => 'NOTIFIED_JOIN_SQUARE_CHAT',
    3 => 'NOTIFIED_INVITE_INTO_SQUARE_CHAT',
    4 => 'NOTIFIED_LEAVE_SQUARE_CHAT',
    5 => 'NOTIFIED_DESTROY_MESSAGE',
    6 => 'NOTIFIED_MARK_AS_READ',
    7 => 'NOTIFIED_UPDATE_SQUARE_MEMBER_PROFILE',
    19 => 'NOTIFIED_KICKOUT_FROM_SQUARE',
    18 => 'NOTIFIED_SHUTDOWN_SQUARE',
    20 => 'NOTIFIED_DELETE_SQUARE_CHAT',
    30 => 'NOTIFIED_UPDATE_SQUARE_CHAT_PROFILE_NAME',
    31 => 'NOTIFIED_UPDATE_SQUARE_CHAT_PROFILE_IMAGE',
    37 => 'NOTIFIED_UPDATE_SQUARE_CHAT_ANNOUNCEMENT',
    33 => 'NOTIFIED_ADD_BOT',
    34 => 'NOTIFIED_REMOVE_BOT',
    8 => 'NOTIFIED_UPDATE_SQUARE',
    9 => 'NOTIFIED_UPDATE_SQUARE_STATUS',
    10 => 'NOTIFIED_UPDATE_SQUARE_AUTHORITY',
    11 => 'NOTIFIED_UPDATE_SQUARE_MEMBER',
    12 => 'NOTIFIED_UPDATE_SQUARE_CHAT',
    13 => 'NOTIFIED_UPDATE_SQUARE_CHAT_STATUS',
    14 => 'NOTIFIED_UPDATE_SQUARE_CHAT_MEMBER',
    15 => 'NOTIFIED_CREATE_SQUARE_MEMBER',
    16 => 'NOTIFIED_CREATE_SQUARE_CHAT_MEMBER',
    17 => 'NOTIFIED_UPDATE_SQUARE_MEMBER_RELATION',
    32 => 'NOTIFIED_UPDATE_SQUARE_FEATURE_SET',
    36 => 'NOTIFIED_UPDATE_SQUARE_NOTE_STATUS',
    21 => 'NOTIFICATION_JOIN_REQUEST',
    22 => 'NOTIFICATION_JOINED',
    23 => 'NOTIFICATION_PROMOTED_COADMIN',
    24 => 'NOTIFICATION_PROMOTED_ADMIN',
    25 => 'NOTIFICATION_DEMOTED_MEMBER',
    26 => 'NOTIFICATION_KICKED_OUT',
    27 => 'NOTIFICATION_SQUARE_DELETE',
    28 => 'NOTIFICATION_SQUARE_CHAT_DELETE',
    29 => 'NOTIFICATION_MESSAGE',
  );
}

final class SquareMemberRelationState {
  const NONE = 1;
  const BLOCKED = 2;
  static public $__names = array(
    1 => 'NONE',
    2 => 'BLOCKED',
  );
}

final class SquareFeatureControlState {
  const DISABLED = 1;
  const ENABLED = 2;
  static public $__names = array(
    1 => 'DISABLED',
    2 => 'ENABLED',
  );
}

final class BooleanState {
  const NONE = 0;
  const OFF = 1;
  const ON = 2;
  static public $__names = array(
    0 => 'NONE',
    1 => 'OFF',
    2 => 'ON',
  );
}

final class SquareType {
  const CLOSED = 0;
  const OPEN = 1;
  static public $__names = array(
    0 => 'CLOSED',
    1 => 'OPEN',
  );
}

final class SquareChatType {
  const OPEN = 1;
  const SECRET = 2;
  const ONE_ON_ONE = 3;
  const SQUARE_DEFAULT = 4;
  static public $__names = array(
    1 => 'OPEN',
    2 => 'SECRET',
    3 => 'ONE_ON_ONE',
    4 => 'SQUARE_DEFAULT',
  );
}

final class SquareErrorCode {
  const UNKNOWN = 0;
  const INTERNAL_ERROR = 500;
  const NOT_IMPLEMENTED = 501;
  const TRY_AGAIN_LATER = 503;
  const MAINTENANCE = 505;
  const ILLEGAL_ARGUMENT = 400;
  const AUTHENTICATION_FAILURE = 401;
  const FORBIDDEN = 403;
  const NOT_FOUND = 404;
  const REVISION_MISMATCH = 409;
  const PRECONDITION_FAILED = 410;
  static public $__names = array(
    0 => 'UNKNOWN',
    500 => 'INTERNAL_ERROR',
    501 => 'NOT_IMPLEMENTED',
    503 => 'TRY_AGAIN_LATER',
    505 => 'MAINTENANCE',
    400 => 'ILLEGAL_ARGUMENT',
    401 => 'AUTHENTICATION_FAILURE',
    403 => 'FORBIDDEN',
    404 => 'NOT_FOUND',
    409 => 'REVISION_MISMATCH',
    410 => 'PRECONDITION_FAILED',
  );
}

final class SquareChatState {
  const ALIVE = 0;
  const DELETED = 1;
  const SUSPENDED = 2;
  static public $__names = array(
    0 => 'ALIVE',
    1 => 'DELETED',
    2 => 'SUSPENDED',
  );
}

final class SquareFeatureSetAttribute {
  const CREATING_SECRET_SQUARE_CHAT = 1;
  const INVITING_INTO_OPEN_SQUARE_CHAT = 2;
  static public $__names = array(
    1 => 'CREATING_SECRET_SQUARE_CHAT',
    2 => 'INVITING_INTO_OPEN_SQUARE_CHAT',
  );
}

final class SquareMembershipState {
  const JOIN_REQUESTED = 1;
  const JOINED = 2;
  const REJECTED = 3;
  const LEFT = 4;
  const KICK_OUT = 5;
  const BANNED = 6;
  const DELETED = 7;
  static public $__names = array(
    1 => 'JOIN_REQUESTED',
    2 => 'JOINED',
    3 => 'REJECTED',
    4 => 'LEFT',
    5 => 'KICK_OUT',
    6 => 'BANNED',
    7 => 'DELETED',
  );
}

final class SquareChatMemberAttribute {
  const MEMBERSHIP_STATE = 4;
  const NOTIFICATION_MESSAGE = 6;
  static public $__names = array(
    4 => 'MEMBERSHIP_STATE',
    6 => 'NOTIFICATION_MESSAGE',
  );
}

final class SquareMemberRole {
  const ADMIN = 1;
  const CO_ADMIN = 2;
  const MEMBER = 10;
  static public $__names = array(
    1 => 'ADMIN',
    2 => 'CO_ADMIN',
    10 => 'MEMBER',
  );
}

final class PreconditionFailedExtraInfo {
  const DUPLICATED_DISPLAY_NAME = 0;
  static public $__names = array(
    0 => 'DUPLICATED_DISPLAY_NAME',
  );
}

final class SquareChatMembershipState {
  const JOINED = 1;
  const LEFT = 2;
  static public $__names = array(
    1 => 'JOINED',
    2 => 'LEFT',
  );
}

final class FetchDirection {
  const FORWARD = 1;
  const BACKWARD = 2;
  static public $__names = array(
    1 => 'FORWARD',
    2 => 'BACKWARD',
  );
}

final class SquareAttribute {
  const NAME = 1;
  const WELCOME_MESSAGE = 2;
  const PROFILE_IMAGE = 3;
  const DESCRIPTION = 4;
  const SEARCHABLE = 6;
  const CATEGORY = 7;
  const INVITATION_URL = 8;
  const ABLE_TO_USE_INVITATION_URL = 9;
  const STATE = 10;
  static public $__names = array(
    1 => 'NAME',
    2 => 'WELCOME_MESSAGE',
    3 => 'PROFILE_IMAGE',
    4 => 'DESCRIPTION',
    6 => 'SEARCHABLE',
    7 => 'CATEGORY',
    8 => 'INVITATION_URL',
    9 => 'ABLE_TO_USE_INVITATION_URL',
    10 => 'STATE',
  );
}

final class SquareAuthorityAttribute {
  const UPDATE_SQUARE_PROFILE = 1;
  const INVITE_NEW_MEMBER = 2;
  const APPROVE_JOIN_REQUEST = 3;
  const CREATE_POST = 4;
  const CREATE_OPEN_SQUARE_CHAT = 5;
  const DELETE_SQUARE_CHAT_OR_POST = 6;
  const REMOVE_SQUARE_MEMBER = 7;
  const GRANT_ROLE = 8;
  const ENABLE_INVITATION_TICKET = 9;
  const CREATE_CHAT_ANNOUNCEMENT = 10;
  static public $__names = array(
    1 => 'UPDATE_SQUARE_PROFILE',
    2 => 'INVITE_NEW_MEMBER',
    3 => 'APPROVE_JOIN_REQUEST',
    4 => 'CREATE_POST',
    5 => 'CREATE_OPEN_SQUARE_CHAT',
    6 => 'DELETE_SQUARE_CHAT_OR_POST',
    7 => 'REMOVE_SQUARE_MEMBER',
    8 => 'GRANT_ROLE',
    9 => 'ENABLE_INVITATION_TICKET',
    10 => 'CREATE_CHAT_ANNOUNCEMENT',
  );
}

final class SquareEventStatus {
  const NORMAL = 1;
  const ALERT_DISABLED = 2;
  static public $__names = array(
    1 => 'NORMAL',
    2 => 'ALERT_DISABLED',
  );
}

final class PType {
  const STICKER = 1;
  const THEME = 2;
  const STICON = 3;
  static public $__names = array(
    1 => 'STICKER',
    2 => 'THEME',
    3 => 'STICON',
  );
}

final class PromotionType {
  const NONE = 0;
  const CARRIER = 1;
  const BUDDY = 2;
  const INSTALL = 3;
  const MISSION = 4;
  const MUSTBUY = 5;
  static public $__names = array(
    0 => 'NONE',
    1 => 'CARRIER',
    2 => 'BUDDY',
    3 => 'INSTALL',
    4 => 'MISSION',
    5 => 'MUSTBUY',
  );
}

final class PMType {
  const DEFAULT = 1;
  const VIEW_VIDEO = 2;
  static public $__names = array(
    1 => 'DEFAULT',
    2 => 'VIEW_VIDEO',
  );
}

final class SRType {
  const STATIC = 1;
  const ANIMATION = 2;
  const SOUND = 3;
  const ANIMATION_SOUND = 4;
  const POPUP = 5;
  const l = 6;
  const POPUP_SOUND = 6;
  static public $__names = array(
    1 => 'STATIC',
    2 => 'ANIMATION',
    3 => 'SOUND',
    4 => 'ANIMATION_SOUND',
    5 => 'POPUP',
    6 => 'l',
    6 => 'POPUP_SOUND',
  );
}

final class TRType {
  const STATIC = 1;
  const ANIMATION = 2;
  static public $__names = array(
    1 => 'STATIC',
    2 => 'ANIMATION',
  );
}

final class SubType {
  const GENERAL = 0;
  const CREATORS = 1;
  static public $__names = array(
    0 => 'GENERAL',
    1 => 'CREATORS',
  );
}

final class IdentityResponseType {
  const UNKNOWN = 0;
  const SUCCESS = 1;
  const REQUIRE_SERVER_SIDE_EMAIL = 2;
  const REQUIRE_CLIENT_SIDE_EMAIL = 3;
  static public $__names = array(
    0 => 'UNKNOWN',
    1 => 'SUCCESS',
    2 => 'REQUIRE_SERVER_SIDE_EMAIL',
    3 => 'REQUIRE_CLIENT_SIDE_EMAIL',
  );
}

final class AvailableChatTypes {
  const PERSONAL = 1;
  const ROOM = 2;
  const GROUP = 3;
  const SQUARE_CHAT = 4;
  static public $__names = array(
    1 => 'PERSONAL',
    2 => 'ROOM',
    3 => 'GROUP',
    4 => 'SQUARE_CHAT',
  );
}

final class ChatAppExceptionCode {
  const INVALID_REQUEST = 1;
  const UNAUTHORIZED = 2;
  const SERVER_ERROR = 100;
  static public $__names = array(
    1 => 'INVALID_REQUEST',
    2 => 'UNAUTHORIZED',
    100 => 'SERVER_ERROR',
  );
}

final class ChatappCategory {
  const PRIORITY = 2;
  const REGULAR = 1;
  const MORE = 3;
  static public $__names = array(
    2 => 'PRIORITY',
    1 => 'REGULAR',
    3 => 'MORE',
  );
}

final class SuggestDictionaryIncrementStatus {
  const SUCCESS = 0;
  const INVALID_REVISION = 1;
  const TOO_LARGE_DATA = 2;
  const SCHEME_CHANGED = 3;
  const RETRY = 4;
  const FAIL = 5;
  const TOO_OLD_DATA = 6;
  static public $__names = array(
    0 => 'SUCCESS',
    1 => 'INVALID_REVISION',
    2 => 'TOO_LARGE_DATA',
    3 => 'SCHEME_CHANGED',
    4 => 'RETRY',
    5 => 'FAIL',
    6 => 'TOO_OLD_DATA',
  );
}

class Chatapp {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'chatappId',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'name',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'icon',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'url',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'availableChatTypes',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::I32,
      'elem' => array(
        'type' => TType::I32,
        ),
      ),
    );

  /**
   * @var string
   */
  public $chatappId = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var string
   */
  public $icon = null;
  /**
   * @var string
   */
  public $url = null;
  /**
   * @var int[]
   */
  public $availableChatTypes = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['chatappId'])) {
        $this->chatappId = $vals['chatappId'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['icon'])) {
        $this->icon = $vals['icon'];
      }
      if (isset($vals['url'])) {
        $this->url = $vals['url'];
      }
      if (isset($vals['availableChatTypes'])) {
        $this->availableChatTypes = $vals['availableChatTypes'];
      }
    }
  }

  public function getName() {
    return 'Chatapp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->chatappId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->icon);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::LST) {
            $this->availableChatTypes = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $xfer += $input->readI32($elem5);
              $this->availableChatTypes []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Chatapp');
    if ($this->chatappId !== null) {
      $xfer += $output->writeFieldBegin('chatappId', TType::STRING, 1);
      $xfer += $output->writeString($this->chatappId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->icon !== null) {
      $xfer += $output->writeFieldBegin('icon', TType::STRING, 3);
      $xfer += $output->writeString($this->icon);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->url !== null) {
      $xfer += $output->writeFieldBegin('url', TType::STRING, 4);
      $xfer += $output->writeString($this->url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->availableChatTypes !== null) {
      if (!is_array($this->availableChatTypes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('availableChatTypes', TType::LST, 5);
      {
        $output->writeListBegin(TType::I32, count($this->availableChatTypes));
        {
          foreach ($this->availableChatTypes as $iter6)
          {
            $xfer += $output->writeI32($iter6);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MyChatapp {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'app',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Chatapp',
      ),
    2 => array(
      'var' => 'category',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    3 => array(
      'var' => 'priority',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    );

  /**
   * @var \Chatapp
   */
  public $app = null;
  /**
   * @var int
   */
  public $category = null;
  /**
   * @var int
   */
  public $priority = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['app'])) {
        $this->app = $vals['app'];
      }
      if (isset($vals['category'])) {
        $this->category = $vals['category'];
      }
      if (isset($vals['priority'])) {
        $this->priority = $vals['priority'];
      }
    }
  }

  public function getName() {
    return 'MyChatapp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->app = new \Chatapp();
            $xfer += $this->app->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->category);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->priority);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MyChatapp');
    if ($this->app !== null) {
      if (!is_object($this->app)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('app', TType::STRUCT, 1);
      $xfer += $this->app->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->category !== null) {
      $xfer += $output->writeFieldBegin('category', TType::I32, 2);
      $xfer += $output->writeI32($this->category);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->priority !== null) {
      $xfer += $output->writeFieldBegin('priority', TType::I64, 3);
      $xfer += $output->writeI64($this->priority);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetMyChatappsResponse {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'apps',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\MyChatapp',
        ),
      ),
    2 => array(
      'var' => 'continuationToken',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var \MyChatapp[]
   */
  public $apps = null;
  /**
   * @var string
   */
  public $continuationToken = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['apps'])) {
        $this->apps = $vals['apps'];
      }
      if (isset($vals['continuationToken'])) {
        $this->continuationToken = $vals['continuationToken'];
      }
    }
  }

  public function getName() {
    return 'GetMyChatappsResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->apps = array();
            $_size7 = 0;
            $_etype10 = 0;
            $xfer += $input->readListBegin($_etype10, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $elem12 = null;
              $elem12 = new \MyChatapp();
              $xfer += $elem12->read($input);
              $this->apps []= $elem12;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->continuationToken);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetMyChatappsResponse');
    if ($this->apps !== null) {
      if (!is_array($this->apps)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('apps', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->apps));
        {
          foreach ($this->apps as $iter13)
          {
            $xfer += $iter13->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->continuationToken !== null) {
      $xfer += $output->writeFieldBegin('continuationToken', TType::STRING, 2);
      $xfer += $output->writeString($this->continuationToken);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetMyChatappsRequest {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'language',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'continuationToken',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $language = null;
  /**
   * @var string
   */
  public $continuationToken = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['language'])) {
        $this->language = $vals['language'];
      }
      if (isset($vals['continuationToken'])) {
        $this->continuationToken = $vals['continuationToken'];
      }
    }
  }

  public function getName() {
    return 'GetMyChatappsRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->language);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->continuationToken);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetMyChatappsRequest');
    if ($this->language !== null) {
      $xfer += $output->writeFieldBegin('language', TType::STRING, 1);
      $xfer += $output->writeString($this->language);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->continuationToken !== null) {
      $xfer += $output->writeFieldBegin('continuationToken', TType::STRING, 2);
      $xfer += $output->writeString($this->continuationToken);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetChatappRequest {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'chatappId',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'language',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $chatappId = null;
  /**
   * @var string
   */
  public $language = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['chatappId'])) {
        $this->chatappId = $vals['chatappId'];
      }
      if (isset($vals['language'])) {
        $this->language = $vals['language'];
      }
    }
  }

  public function getName() {
    return 'GetChatappRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->chatappId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->language);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetChatappRequest');
    if ($this->chatappId !== null) {
      $xfer += $output->writeFieldBegin('chatappId', TType::STRING, 1);
      $xfer += $output->writeString($this->chatappId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->language !== null) {
      $xfer += $output->writeFieldBegin('language', TType::STRING, 2);
      $xfer += $output->writeString($this->language);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ChatappException {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'code',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'reason',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var int
   */
  public $code = null;
  /**
   * @var string
   */
  public $reason = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['reason'])) {
        $this->reason = $vals['reason'];
      }
    }
  }

  public function getName() {
    return 'ChatappException';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->reason);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ChatappException');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reason !== null) {
      $xfer += $output->writeFieldBegin('reason', TType::STRING, 2);
      $xfer += $output->writeString($this->reason);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetChatappResponse {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'app',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Chatapp',
      ),
    );

  /**
   * @var \Chatapp
   */
  public $app = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['app'])) {
        $this->app = $vals['app'];
      }
    }
  }

  public function getName() {
    return 'GetChatappResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->app = new \Chatapp();
            $xfer += $this->app->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetChatappResponse');
    if ($this->app !== null) {
      if (!is_object($this->app)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('app', TType::STRUCT, 1);
      $xfer += $this->app->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class WebLoginResponse {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'returnUrl',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $returnUrl = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['returnUrl'])) {
        $this->returnUrl = $vals['returnUrl'];
      }
    }
  }

  public function getName() {
    return 'WebLoginResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->returnUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('WebLoginResponse');
    if ($this->returnUrl !== null) {
      $xfer += $output->writeFieldBegin('returnUrl', TType::STRING, 1);
      $xfer += $output->writeString($this->returnUrl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class WebLoginRequest {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'hookedFullUrl',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'sessionString',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'fromIAB',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var string
   */
  public $hookedFullUrl = null;
  /**
   * @var string
   */
  public $sessionString = null;
  /**
   * @var bool
   */
  public $fromIAB = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['hookedFullUrl'])) {
        $this->hookedFullUrl = $vals['hookedFullUrl'];
      }
      if (isset($vals['sessionString'])) {
        $this->sessionString = $vals['sessionString'];
      }
      if (isset($vals['fromIAB'])) {
        $this->fromIAB = $vals['fromIAB'];
      }
    }
  }

  public function getName() {
    return 'WebLoginRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->hookedFullUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sessionString);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->fromIAB);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('WebLoginRequest');
    if ($this->hookedFullUrl !== null) {
      $xfer += $output->writeFieldBegin('hookedFullUrl', TType::STRING, 1);
      $xfer += $output->writeString($this->hookedFullUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionString !== null) {
      $xfer += $output->writeFieldBegin('sessionString', TType::STRING, 2);
      $xfer += $output->writeString($this->sessionString);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fromIAB !== null) {
      $xfer += $output->writeFieldBegin('fromIAB', TType::BOOL, 3);
      $xfer += $output->writeBool($this->fromIAB);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TestCallRoute {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'token',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'voipServer',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\CallHost',
      ),
    );

  /**
   * @var string
   */
  public $token = null;
  /**
   * @var \CallHost
   */
  public $voipServer = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['voipServer'])) {
        $this->voipServer = $vals['voipServer'];
      }
    }
  }

  public function getName() {
    return 'TestCallRoute';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->voipServer = new \CallHost();
            $xfer += $this->voipServer->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TestCallRoute');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->voipServer !== null) {
      if (!is_object($this->voipServer)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('voipServer', TType::STRUCT, 2);
      $xfer += $this->voipServer->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ProfileContent {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'value',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'meta',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRING,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRING,
        ),
      ),
    );

  /**
   * @var string
   */
  public $value = null;
  /**
   * @var array
   */
  public $meta = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
      if (isset($vals['meta'])) {
        $this->meta = $vals['meta'];
      }
    }
  }

  public function getName() {
    return 'ProfileContent';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->value);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::MAP) {
            $this->meta = array();
            $_size14 = 0;
            $_ktype15 = 0;
            $_vtype16 = 0;
            $xfer += $input->readMapBegin($_ktype15, $_vtype16, $_size14);
            for ($_i18 = 0; $_i18 < $_size14; ++$_i18)
            {
              $key19 = '';
              $val20 = '';
              $xfer += $input->readString($key19);
              $xfer += $input->readString($val20);
              $this->meta[$key19] = $val20;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ProfileContent');
    if ($this->value !== null) {
      $xfer += $output->writeFieldBegin('value', TType::STRING, 1);
      $xfer += $output->writeString($this->value);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->meta !== null) {
      if (!is_array($this->meta)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('meta', TType::MAP, 2);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->meta));
        {
          foreach ($this->meta as $kiter21 => $viter22)
          {
            $xfer += $output->writeString($kiter21);
            $xfer += $output->writeString($viter22);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UpdateProfileAttributesRequest {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'profileAttributes',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::I32,
      'vtype' => TType::STRUCT,
      'key' => array(
        'type' => TType::I32,
      ),
      'val' => array(
        'type' => TType::STRUCT,
        'class' => '\ProfileContent',
        ),
      ),
    );

  /**
   * @var array
   */
  public $profileAttributes = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['profileAttributes'])) {
        $this->profileAttributes = $vals['profileAttributes'];
      }
    }
  }

  public function getName() {
    return 'UpdateProfileAttributesRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->profileAttributes = array();
            $_size23 = 0;
            $_ktype24 = 0;
            $_vtype25 = 0;
            $xfer += $input->readMapBegin($_ktype24, $_vtype25, $_size23);
            for ($_i27 = 0; $_i27 < $_size23; ++$_i27)
            {
              $key28 = 0;
              $val29 = new \ProfileContent();
              $xfer += $input->readI32($key28);
              $val29 = new \ProfileContent();
              $xfer += $val29->read($input);
              $this->profileAttributes[$key28] = $val29;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UpdateProfileAttributesRequest');
    if ($this->profileAttributes !== null) {
      if (!is_array($this->profileAttributes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('profileAttributes', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::I32, TType::STRUCT, count($this->profileAttributes));
        {
          foreach ($this->profileAttributes as $kiter30 => $viter31)
          {
            $xfer += $output->writeI32($kiter30);
            $xfer += $viter31->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class IdentityCredentialResponse {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'metaData',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRING,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRING,
        ),
      ),
    2 => array(
      'var' => 'responseType',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    3 => array(
      'var' => 'confirmationVerifier',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'timeoutInSeconds',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    );

  /**
   * @var array
   */
  public $metaData = null;
  /**
   * @var int
   */
  public $responseType = null;
  /**
   * @var string
   */
  public $confirmationVerifier = null;
  /**
   * @var int
   */
  public $timeoutInSeconds = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['metaData'])) {
        $this->metaData = $vals['metaData'];
      }
      if (isset($vals['responseType'])) {
        $this->responseType = $vals['responseType'];
      }
      if (isset($vals['confirmationVerifier'])) {
        $this->confirmationVerifier = $vals['confirmationVerifier'];
      }
      if (isset($vals['timeoutInSeconds'])) {
        $this->timeoutInSeconds = $vals['timeoutInSeconds'];
      }
    }
  }

  public function getName() {
    return 'IdentityCredentialResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->metaData = array();
            $_size32 = 0;
            $_ktype33 = 0;
            $_vtype34 = 0;
            $xfer += $input->readMapBegin($_ktype33, $_vtype34, $_size32);
            for ($_i36 = 0; $_i36 < $_size32; ++$_i36)
            {
              $key37 = '';
              $val38 = '';
              $xfer += $input->readString($key37);
              $xfer += $input->readString($val38);
              $this->metaData[$key37] = $val38;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->responseType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->confirmationVerifier);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timeoutInSeconds);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('IdentityCredentialResponse');
    if ($this->metaData !== null) {
      if (!is_array($this->metaData)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('metaData', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->metaData));
        {
          foreach ($this->metaData as $kiter39 => $viter40)
          {
            $xfer += $output->writeString($kiter39);
            $xfer += $output->writeString($viter40);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->responseType !== null) {
      $xfer += $output->writeFieldBegin('responseType', TType::I32, 2);
      $xfer += $output->writeI32($this->responseType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->confirmationVerifier !== null) {
      $xfer += $output->writeFieldBegin('confirmationVerifier', TType::STRING, 3);
      $xfer += $output->writeString($this->confirmationVerifier);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timeoutInSeconds !== null) {
      $xfer += $output->writeFieldBegin('timeoutInSeconds', TType::I64, 4);
      $xfer += $output->writeI64($this->timeoutInSeconds);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class IdentifierConfirmationRequest {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'metaData',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRING,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRING,
        ),
      ),
    2 => array(
      'var' => 'forceRegistration',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    3 => array(
      'var' => 'verificationCode',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var array
   */
  public $metaData = null;
  /**
   * @var bool
   */
  public $forceRegistration = null;
  /**
   * @var string
   */
  public $verificationCode = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['metaData'])) {
        $this->metaData = $vals['metaData'];
      }
      if (isset($vals['forceRegistration'])) {
        $this->forceRegistration = $vals['forceRegistration'];
      }
      if (isset($vals['verificationCode'])) {
        $this->verificationCode = $vals['verificationCode'];
      }
    }
  }

  public function getName() {
    return 'IdentifierConfirmationRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->metaData = array();
            $_size41 = 0;
            $_ktype42 = 0;
            $_vtype43 = 0;
            $xfer += $input->readMapBegin($_ktype42, $_vtype43, $_size41);
            for ($_i45 = 0; $_i45 < $_size41; ++$_i45)
            {
              $key46 = '';
              $val47 = '';
              $xfer += $input->readString($key46);
              $xfer += $input->readString($val47);
              $this->metaData[$key46] = $val47;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->forceRegistration);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->verificationCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('IdentifierConfirmationRequest');
    if ($this->metaData !== null) {
      if (!is_array($this->metaData)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('metaData', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->metaData));
        {
          foreach ($this->metaData as $kiter48 => $viter49)
          {
            $xfer += $output->writeString($kiter48);
            $xfer += $output->writeString($viter49);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->forceRegistration !== null) {
      $xfer += $output->writeFieldBegin('forceRegistration', TType::BOOL, 2);
      $xfer += $output->writeBool($this->forceRegistration);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->verificationCode !== null) {
      $xfer += $output->writeFieldBegin('verificationCode', TType::STRING, 3);
      $xfer += $output->writeString($this->verificationCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class IdentityCredentialRequest {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'metaData',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRING,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRING,
        ),
      ),
    2 => array(
      'var' => 'identityProvider',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    3 => array(
      'var' => 'cipherKeyId',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'cipherText',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'confirmationRequest',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\IdentifierConfirmationRequest',
      ),
    );

  /**
   * @var array
   */
  public $metaData = null;
  /**
   * @var int
   */
  public $identityProvider = null;
  /**
   * @var string
   */
  public $cipherKeyId = null;
  /**
   * @var string
   */
  public $cipherText = null;
  /**
   * @var \IdentifierConfirmationRequest
   */
  public $confirmationRequest = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['metaData'])) {
        $this->metaData = $vals['metaData'];
      }
      if (isset($vals['identityProvider'])) {
        $this->identityProvider = $vals['identityProvider'];
      }
      if (isset($vals['cipherKeyId'])) {
        $this->cipherKeyId = $vals['cipherKeyId'];
      }
      if (isset($vals['cipherText'])) {
        $this->cipherText = $vals['cipherText'];
      }
      if (isset($vals['confirmationRequest'])) {
        $this->confirmationRequest = $vals['confirmationRequest'];
      }
    }
  }

  public function getName() {
    return 'IdentityCredentialRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->metaData = array();
            $_size50 = 0;
            $_ktype51 = 0;
            $_vtype52 = 0;
            $xfer += $input->readMapBegin($_ktype51, $_vtype52, $_size50);
            for ($_i54 = 0; $_i54 < $_size50; ++$_i54)
            {
              $key55 = '';
              $val56 = '';
              $xfer += $input->readString($key55);
              $xfer += $input->readString($val56);
              $this->metaData[$key55] = $val56;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->identityProvider);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cipherKeyId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cipherText);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->confirmationRequest = new \IdentifierConfirmationRequest();
            $xfer += $this->confirmationRequest->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('IdentityCredentialRequest');
    if ($this->metaData !== null) {
      if (!is_array($this->metaData)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('metaData', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->metaData));
        {
          foreach ($this->metaData as $kiter57 => $viter58)
          {
            $xfer += $output->writeString($kiter57);
            $xfer += $output->writeString($viter58);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->identityProvider !== null) {
      $xfer += $output->writeFieldBegin('identityProvider', TType::I32, 2);
      $xfer += $output->writeI32($this->identityProvider);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cipherKeyId !== null) {
      $xfer += $output->writeFieldBegin('cipherKeyId', TType::STRING, 3);
      $xfer += $output->writeString($this->cipherKeyId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cipherText !== null) {
      $xfer += $output->writeFieldBegin('cipherText', TType::STRING, 4);
      $xfer += $output->writeString($this->cipherText);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->confirmationRequest !== null) {
      if (!is_object($this->confirmationRequest)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('confirmationRequest', TType::STRUCT, 5);
      $xfer += $this->confirmationRequest->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AuthSessionRequest {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'metaData',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRING,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRING,
        ),
      ),
    );

  /**
   * @var array
   */
  public $metaData = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['metaData'])) {
        $this->metaData = $vals['metaData'];
      }
    }
  }

  public function getName() {
    return 'AuthSessionRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->metaData = array();
            $_size59 = 0;
            $_ktype60 = 0;
            $_vtype61 = 0;
            $xfer += $input->readMapBegin($_ktype60, $_vtype61, $_size59);
            for ($_i63 = 0; $_i63 < $_size59; ++$_i63)
            {
              $key64 = '';
              $val65 = '';
              $xfer += $input->readString($key64);
              $xfer += $input->readString($val65);
              $this->metaData[$key64] = $val65;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AuthSessionRequest');
    if ($this->metaData !== null) {
      if (!is_array($this->metaData)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('metaData', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->metaData));
        {
          foreach ($this->metaData as $kiter66 => $viter67)
          {
            $xfer += $output->writeString($kiter66);
            $xfer += $output->writeString($viter67);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CategoryItem {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'collection',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'cat',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    3 => array(
      'var' => 'name',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var int
   */
  public $collection = null;
  /**
   * @var int
   */
  public $cat = null;
  /**
   * @var string
   */
  public $name = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['collection'])) {
        $this->collection = $vals['collection'];
      }
      if (isset($vals['cat'])) {
        $this->cat = $vals['cat'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
    }
  }

  public function getName() {
    return 'CategoryItem';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->collection);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cat);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CategoryItem');
    if ($this->collection !== null) {
      $xfer += $output->writeFieldBegin('collection', TType::I32, 1);
      $xfer += $output->writeI32($this->collection);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cat !== null) {
      $xfer += $output->writeFieldBegin('cat', TType::I32, 2);
      $xfer += $output->writeI32($this->cat);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 3);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PromotionBuddyInfo {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'buddyMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $buddyMid = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['buddyMid'])) {
        $this->buddyMid = $vals['buddyMid'];
      }
    }
  }

  public function getName() {
    return 'PromotionBuddyInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->buddyMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PromotionBuddyInfo');
    if ($this->buddyMid !== null) {
      $xfer += $output->writeFieldBegin('buddyMid', TType::STRING, 1);
      $xfer += $output->writeString($this->buddyMid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PromotionInstallInfo {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'downloadUrl',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'customUrlSchema',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $downloadUrl = null;
  /**
   * @var string
   */
  public $customUrlSchema = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['downloadUrl'])) {
        $this->downloadUrl = $vals['downloadUrl'];
      }
      if (isset($vals['customUrlSchema'])) {
        $this->customUrlSchema = $vals['customUrlSchema'];
      }
    }
  }

  public function getName() {
    return 'PromotionInstallInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->downloadUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->customUrlSchema);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PromotionInstallInfo');
    if ($this->downloadUrl !== null) {
      $xfer += $output->writeFieldBegin('downloadUrl', TType::STRING, 1);
      $xfer += $output->writeString($this->downloadUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->customUrlSchema !== null) {
      $xfer += $output->writeFieldBegin('customUrlSchema', TType::STRING, 2);
      $xfer += $output->writeString($this->customUrlSchema);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PromotionMissionInfo {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'promotionMissionType',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'missionCompleted',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    3 => array(
      'var' => 'downloadUrl',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'customUrlSchema',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var int
   */
  public $promotionMissionType = null;
  /**
   * @var bool
   */
  public $missionCompleted = null;
  /**
   * @var string
   */
  public $downloadUrl = null;
  /**
   * @var string
   */
  public $customUrlSchema = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['promotionMissionType'])) {
        $this->promotionMissionType = $vals['promotionMissionType'];
      }
      if (isset($vals['missionCompleted'])) {
        $this->missionCompleted = $vals['missionCompleted'];
      }
      if (isset($vals['downloadUrl'])) {
        $this->downloadUrl = $vals['downloadUrl'];
      }
      if (isset($vals['customUrlSchema'])) {
        $this->customUrlSchema = $vals['customUrlSchema'];
      }
    }
  }

  public function getName() {
    return 'PromotionMissionInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->promotionMissionType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->missionCompleted);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->downloadUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->customUrlSchema);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PromotionMissionInfo');
    if ($this->promotionMissionType !== null) {
      $xfer += $output->writeFieldBegin('promotionMissionType', TType::I32, 1);
      $xfer += $output->writeI32($this->promotionMissionType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->missionCompleted !== null) {
      $xfer += $output->writeFieldBegin('missionCompleted', TType::BOOL, 2);
      $xfer += $output->writeBool($this->missionCompleted);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->downloadUrl !== null) {
      $xfer += $output->writeFieldBegin('downloadUrl', TType::STRING, 3);
      $xfer += $output->writeString($this->downloadUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->customUrlSchema !== null) {
      $xfer += $output->writeFieldBegin('customUrlSchema', TType::STRING, 4);
      $xfer += $output->writeString($this->customUrlSchema);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PromotionDetail {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'promotionBuddyInfo',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\PromotionBuddyInfo',
      ),
    2 => array(
      'var' => 'promotionInstallInfo',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\PromotionInstallInfo',
      ),
    3 => array(
      'var' => 'promotionMissionInfo',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\PromotionMissionInfo',
      ),
    );

  /**
   * @var \PromotionBuddyInfo
   */
  public $promotionBuddyInfo = null;
  /**
   * @var \PromotionInstallInfo
   */
  public $promotionInstallInfo = null;
  /**
   * @var \PromotionMissionInfo
   */
  public $promotionMissionInfo = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['promotionBuddyInfo'])) {
        $this->promotionBuddyInfo = $vals['promotionBuddyInfo'];
      }
      if (isset($vals['promotionInstallInfo'])) {
        $this->promotionInstallInfo = $vals['promotionInstallInfo'];
      }
      if (isset($vals['promotionMissionInfo'])) {
        $this->promotionMissionInfo = $vals['promotionMissionInfo'];
      }
    }
  }

  public function getName() {
    return 'PromotionDetail';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->promotionBuddyInfo = new \PromotionBuddyInfo();
            $xfer += $this->promotionBuddyInfo->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->promotionInstallInfo = new \PromotionInstallInfo();
            $xfer += $this->promotionInstallInfo->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->promotionMissionInfo = new \PromotionMissionInfo();
            $xfer += $this->promotionMissionInfo->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PromotionDetail');
    if ($this->promotionBuddyInfo !== null) {
      if (!is_object($this->promotionBuddyInfo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('promotionBuddyInfo', TType::STRUCT, 1);
      $xfer += $this->promotionBuddyInfo->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->promotionInstallInfo !== null) {
      if (!is_object($this->promotionInstallInfo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('promotionInstallInfo', TType::STRUCT, 2);
      $xfer += $this->promotionInstallInfo->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->promotionMissionInfo !== null) {
      if (!is_object($this->promotionMissionInfo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('promotionMissionInfo', TType::STRUCT, 3);
      $xfer += $this->promotionMissionInfo->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PromotionInfo {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'promotionType',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    51 => array(
      'var' => 'buddyInfo',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\PromotionBuddyInfo',
      ),
    2 => array(
      'var' => 'promotionDetail',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\PromotionDetail',
      ),
    );

  /**
   * @var int
   */
  public $promotionType = null;
  /**
   * @var \PromotionBuddyInfo
   */
  public $buddyInfo = null;
  /**
   * @var \PromotionDetail
   */
  public $promotionDetail = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['promotionType'])) {
        $this->promotionType = $vals['promotionType'];
      }
      if (isset($vals['buddyInfo'])) {
        $this->buddyInfo = $vals['buddyInfo'];
      }
      if (isset($vals['promotionDetail'])) {
        $this->promotionDetail = $vals['promotionDetail'];
      }
    }
  }

  public function getName() {
    return 'PromotionInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->promotionType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 51:
          if ($ftype == TType::STRUCT) {
            $this->buddyInfo = new \PromotionBuddyInfo();
            $xfer += $this->buddyInfo->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->promotionDetail = new \PromotionDetail();
            $xfer += $this->promotionDetail->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PromotionInfo');
    if ($this->promotionType !== null) {
      $xfer += $output->writeFieldBegin('promotionType', TType::I32, 1);
      $xfer += $output->writeI32($this->promotionType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->promotionDetail !== null) {
      if (!is_object($this->promotionDetail)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('promotionDetail', TType::STRUCT, 2);
      $xfer += $this->promotionDetail->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->buddyInfo !== null) {
      if (!is_object($this->buddyInfo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('buddyInfo', TType::STRUCT, 51);
      $xfer += $this->buddyInfo->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class StickerProperty {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'hasAnimation',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    2 => array(
      'var' => 'hasSound',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    3 => array(
      'var' => 'hasPopup',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    4 => array(
      'var' => 'stickerResourceType',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    5 => array(
      'var' => 'stickerOptions',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'compactStickerOptions',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    7 => array(
      'var' => 'stickerHash',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    8 => array(
      'var' => 'stickerIds',
      'isRequired' => false,
      'type' => TType::SET,
      'etype' => TType::STRING,
      'elem' => array(
        'type' => TType::STRING,
        ),
      ),
    );

  /**
   * @var bool
   */
  public $hasAnimation = null;
  /**
   * @var bool
   */
  public $hasSound = null;
  /**
   * @var bool
   */
  public $hasPopup = null;
  /**
   * @var int
   */
  public $stickerResourceType = null;
  /**
   * @var string
   */
  public $stickerOptions = null;
  /**
   * @var int
   */
  public $compactStickerOptions = null;
  /**
   * @var string
   */
  public $stickerHash = null;
  /**
   * @var string[]
   */
  public $stickerIds = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['hasAnimation'])) {
        $this->hasAnimation = $vals['hasAnimation'];
      }
      if (isset($vals['hasSound'])) {
        $this->hasSound = $vals['hasSound'];
      }
      if (isset($vals['hasPopup'])) {
        $this->hasPopup = $vals['hasPopup'];
      }
      if (isset($vals['stickerResourceType'])) {
        $this->stickerResourceType = $vals['stickerResourceType'];
      }
      if (isset($vals['stickerOptions'])) {
        $this->stickerOptions = $vals['stickerOptions'];
      }
      if (isset($vals['compactStickerOptions'])) {
        $this->compactStickerOptions = $vals['compactStickerOptions'];
      }
      if (isset($vals['stickerHash'])) {
        $this->stickerHash = $vals['stickerHash'];
      }
      if (isset($vals['stickerIds'])) {
        $this->stickerIds = $vals['stickerIds'];
      }
    }
  }

  public function getName() {
    return 'StickerProperty';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->hasAnimation);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->hasSound);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->hasPopup);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->stickerResourceType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->stickerOptions);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->compactStickerOptions);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->stickerHash);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::SET) {
            $this->stickerIds = array();
            $_size68 = 0;
            $_etype71 = 0;
            $xfer += $input->readSetBegin($_etype71, $_size68);
            for ($_i72 = 0; $_i72 < $_size68; ++$_i72)
            {
              $elem73 = null;
              $xfer += $input->readString($elem73);
              $this->stickerIds[$elem73] = true;
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('StickerProperty');
    if ($this->hasAnimation !== null) {
      $xfer += $output->writeFieldBegin('hasAnimation', TType::BOOL, 1);
      $xfer += $output->writeBool($this->hasAnimation);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->hasSound !== null) {
      $xfer += $output->writeFieldBegin('hasSound', TType::BOOL, 2);
      $xfer += $output->writeBool($this->hasSound);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->hasPopup !== null) {
      $xfer += $output->writeFieldBegin('hasPopup', TType::BOOL, 3);
      $xfer += $output->writeBool($this->hasPopup);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->stickerResourceType !== null) {
      $xfer += $output->writeFieldBegin('stickerResourceType', TType::I32, 4);
      $xfer += $output->writeI32($this->stickerResourceType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->stickerOptions !== null) {
      $xfer += $output->writeFieldBegin('stickerOptions', TType::STRING, 5);
      $xfer += $output->writeString($this->stickerOptions);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->compactStickerOptions !== null) {
      $xfer += $output->writeFieldBegin('compactStickerOptions', TType::I32, 6);
      $xfer += $output->writeI32($this->compactStickerOptions);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->stickerHash !== null) {
      $xfer += $output->writeFieldBegin('stickerHash', TType::STRING, 7);
      $xfer += $output->writeString($this->stickerHash);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->stickerIds !== null) {
      if (!is_array($this->stickerIds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('stickerIds', TType::SET, 8);
      {
        $output->writeSetBegin(TType::STRING, count($this->stickerIds));
        {
          foreach ($this->stickerIds as $iter74 => $iter75)
          {
            $xfer += $output->writeString($iter74);
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ThemeProperty {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'thumbnailUrl',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'themeResourceType',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var string
   */
  public $thumbnailUrl = null;
  /**
   * @var int
   */
  public $themeResourceType = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['thumbnailUrl'])) {
        $this->thumbnailUrl = $vals['thumbnailUrl'];
      }
      if (isset($vals['themeResourceType'])) {
        $this->themeResourceType = $vals['themeResourceType'];
      }
    }
  }

  public function getName() {
    return 'ThemeProperty';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->thumbnailUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->themeResourceType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ThemeProperty');
    if ($this->thumbnailUrl !== null) {
      $xfer += $output->writeFieldBegin('thumbnailUrl', TType::STRING, 1);
      $xfer += $output->writeString($this->thumbnailUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->themeResourceType !== null) {
      $xfer += $output->writeFieldBegin('themeResourceType', TType::I32, 2);
      $xfer += $output->writeI32($this->themeResourceType);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SticonProperty {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'sticonIds',
      'isRequired' => false,
      'type' => TType::SET,
      'etype' => TType::STRING,
      'elem' => array(
        'type' => TType::STRING,
        ),
      ),
    );

  /**
   * @var string[]
   */
  public $sticonIds = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['sticonIds'])) {
        $this->sticonIds = $vals['sticonIds'];
      }
    }
  }

  public function getName() {
    return 'SticonProperty';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::SET) {
            $this->sticonIds = array();
            $_size76 = 0;
            $_etype79 = 0;
            $xfer += $input->readSetBegin($_etype79, $_size76);
            for ($_i80 = 0; $_i80 < $_size76; ++$_i80)
            {
              $elem81 = null;
              $xfer += $input->readString($elem81);
              $this->sticonIds[$elem81] = true;
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SticonProperty');
    if ($this->sticonIds !== null) {
      if (!is_array($this->sticonIds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('sticonIds', TType::SET, 1);
      {
        $output->writeSetBegin(TType::STRING, count($this->sticonIds));
        {
          foreach ($this->sticonIds as $iter82 => $iter83)
          {
            $xfer += $output->writeString($iter82);
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ProductProperty {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'stickerProperty',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\StickerProperty',
      ),
    3 => array(
      'var' => 'sticonProperty',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SticonProperty',
      ),
    2 => array(
      'var' => 'themeProperty',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\ThemeProperty',
      ),
    );

  /**
   * @var \StickerProperty
   */
  public $stickerProperty = null;
  /**
   * @var \SticonProperty
   */
  public $sticonProperty = null;
  /**
   * @var \ThemeProperty
   */
  public $themeProperty = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['stickerProperty'])) {
        $this->stickerProperty = $vals['stickerProperty'];
      }
      if (isset($vals['sticonProperty'])) {
        $this->sticonProperty = $vals['sticonProperty'];
      }
      if (isset($vals['themeProperty'])) {
        $this->themeProperty = $vals['themeProperty'];
      }
    }
  }

  public function getName() {
    return 'ProductProperty';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->stickerProperty = new \StickerProperty();
            $xfer += $this->stickerProperty->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->sticonProperty = new \SticonProperty();
            $xfer += $this->sticonProperty->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->themeProperty = new \ThemeProperty();
            $xfer += $this->themeProperty->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ProductProperty');
    if ($this->stickerProperty !== null) {
      if (!is_object($this->stickerProperty)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('stickerProperty', TType::STRUCT, 1);
      $xfer += $this->stickerProperty->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->themeProperty !== null) {
      if (!is_object($this->themeProperty)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('themeProperty', TType::STRUCT, 2);
      $xfer += $this->themeProperty->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sticonProperty !== null) {
      if (!is_object($this->sticonProperty)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('sticonProperty', TType::STRUCT, 3);
      $xfer += $this->sticonProperty->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ProductSearchSummary {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'type',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    3 => array(
      'var' => 'name',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'author',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'promotionInfo',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\PromotionInfo',
      ),
    6 => array(
      'var' => 'version',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    7 => array(
      'var' => 'newFlag',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    8 => array(
      'var' => 'priceTier',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    9 => array(
      'var' => 'priceInLineCoin',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    10 => array(
      'var' => 'property',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\ProductProperty',
      ),
    11 => array(
      'var' => 'subType',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    12 => array(
      'var' => 'onSale',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    13 => array(
      'var' => 'availableForPresent',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    14 => array(
      'var' => 'availableForPurchase',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    15 => array(
      'var' => 'validDays',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    16 => array(
      'var' => 'authorId',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    17 => array(
      'var' => 'saleFlag',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var string
   */
  public $id = null;
  /**
   * @var int
   */
  public $type = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var string
   */
  public $author = null;
  /**
   * @var \PromotionInfo
   */
  public $promotionInfo = null;
  /**
   * @var int
   */
  public $version = null;
  /**
   * @var bool
   */
  public $newFlag = null;
  /**
   * @var int
   */
  public $priceTier = null;
  /**
   * @var string
   */
  public $priceInLineCoin = null;
  /**
   * @var \ProductProperty
   */
  public $property = null;
  /**
   * @var int
   */
  public $subType = null;
  /**
   * @var bool
   */
  public $onSale = null;
  /**
   * @var bool
   */
  public $availableForPresent = null;
  /**
   * @var bool
   */
  public $availableForPurchase = null;
  /**
   * @var int
   */
  public $validDays = null;
  /**
   * @var string
   */
  public $authorId = null;
  /**
   * @var bool
   */
  public $saleFlag = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['author'])) {
        $this->author = $vals['author'];
      }
      if (isset($vals['promotionInfo'])) {
        $this->promotionInfo = $vals['promotionInfo'];
      }
      if (isset($vals['version'])) {
        $this->version = $vals['version'];
      }
      if (isset($vals['newFlag'])) {
        $this->newFlag = $vals['newFlag'];
      }
      if (isset($vals['priceTier'])) {
        $this->priceTier = $vals['priceTier'];
      }
      if (isset($vals['priceInLineCoin'])) {
        $this->priceInLineCoin = $vals['priceInLineCoin'];
      }
      if (isset($vals['property'])) {
        $this->property = $vals['property'];
      }
      if (isset($vals['subType'])) {
        $this->subType = $vals['subType'];
      }
      if (isset($vals['onSale'])) {
        $this->onSale = $vals['onSale'];
      }
      if (isset($vals['availableForPresent'])) {
        $this->availableForPresent = $vals['availableForPresent'];
      }
      if (isset($vals['availableForPurchase'])) {
        $this->availableForPurchase = $vals['availableForPurchase'];
      }
      if (isset($vals['validDays'])) {
        $this->validDays = $vals['validDays'];
      }
      if (isset($vals['authorId'])) {
        $this->authorId = $vals['authorId'];
      }
      if (isset($vals['saleFlag'])) {
        $this->saleFlag = $vals['saleFlag'];
      }
    }
  }

  public function getName() {
    return 'ProductSearchSummary';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->author);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->promotionInfo = new \PromotionInfo();
            $xfer += $this->promotionInfo->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->version);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->newFlag);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->priceTier);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->priceInLineCoin);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRUCT) {
            $this->property = new \ProductProperty();
            $xfer += $this->property->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->subType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->onSale);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->availableForPresent);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->availableForPurchase);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->validDays);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->authorId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->saleFlag);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ProductSearchSummary');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 2);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 3);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->author !== null) {
      $xfer += $output->writeFieldBegin('author', TType::STRING, 4);
      $xfer += $output->writeString($this->author);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->promotionInfo !== null) {
      if (!is_object($this->promotionInfo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('promotionInfo', TType::STRUCT, 5);
      $xfer += $this->promotionInfo->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->version !== null) {
      $xfer += $output->writeFieldBegin('version', TType::I64, 6);
      $xfer += $output->writeI64($this->version);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->newFlag !== null) {
      $xfer += $output->writeFieldBegin('newFlag', TType::BOOL, 7);
      $xfer += $output->writeBool($this->newFlag);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->priceTier !== null) {
      $xfer += $output->writeFieldBegin('priceTier', TType::I32, 8);
      $xfer += $output->writeI32($this->priceTier);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->priceInLineCoin !== null) {
      $xfer += $output->writeFieldBegin('priceInLineCoin', TType::STRING, 9);
      $xfer += $output->writeString($this->priceInLineCoin);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->property !== null) {
      if (!is_object($this->property)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('property', TType::STRUCT, 10);
      $xfer += $this->property->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->subType !== null) {
      $xfer += $output->writeFieldBegin('subType', TType::I32, 11);
      $xfer += $output->writeI32($this->subType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->onSale !== null) {
      $xfer += $output->writeFieldBegin('onSale', TType::BOOL, 12);
      $xfer += $output->writeBool($this->onSale);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->availableForPresent !== null) {
      $xfer += $output->writeFieldBegin('availableForPresent', TType::BOOL, 13);
      $xfer += $output->writeBool($this->availableForPresent);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->availableForPurchase !== null) {
      $xfer += $output->writeFieldBegin('availableForPurchase', TType::BOOL, 14);
      $xfer += $output->writeBool($this->availableForPurchase);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->validDays !== null) {
      $xfer += $output->writeFieldBegin('validDays', TType::I32, 15);
      $xfer += $output->writeI32($this->validDays);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authorId !== null) {
      $xfer += $output->writeFieldBegin('authorId', TType::STRING, 16);
      $xfer += $output->writeString($this->authorId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->saleFlag !== null) {
      $xfer += $output->writeFieldBegin('saleFlag', TType::BOOL, 17);
      $xfer += $output->writeBool($this->saleFlag);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ServiceItem {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'title',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'g',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    4 => array(
      'var' => 'subType',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    5 => array(
      'var' => 'appId',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'channelId',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    7 => array(
      'var' => 'badge',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    8 => array(
      'var' => 'iconUrl',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    9 => array(
      'var' => 'downloadUrl',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    10 => array(
      'var' => 'launchScheme',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    11 => array(
      'var' => 'iconTint',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var string
   */
  public $id = null;
  /**
   * @var string
   */
  public $title = null;
  /**
   * @var int
   */
  public $g = null;
  /**
   * @var int
   */
  public $subType = null;
  /**
   * @var string
   */
  public $appId = null;
  /**
   * @var string
   */
  public $channelId = null;
  /**
   * @var string
   */
  public $badge = null;
  /**
   * @var string
   */
  public $iconUrl = null;
  /**
   * @var string
   */
  public $downloadUrl = null;
  /**
   * @var string
   */
  public $launchScheme = null;
  /**
   * @var bool
   */
  public $iconTint = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['title'])) {
        $this->title = $vals['title'];
      }
      if (isset($vals['g'])) {
        $this->g = $vals['g'];
      }
      if (isset($vals['subType'])) {
        $this->subType = $vals['subType'];
      }
      if (isset($vals['appId'])) {
        $this->appId = $vals['appId'];
      }
      if (isset($vals['channelId'])) {
        $this->channelId = $vals['channelId'];
      }
      if (isset($vals['badge'])) {
        $this->badge = $vals['badge'];
      }
      if (isset($vals['iconUrl'])) {
        $this->iconUrl = $vals['iconUrl'];
      }
      if (isset($vals['downloadUrl'])) {
        $this->downloadUrl = $vals['downloadUrl'];
      }
      if (isset($vals['launchScheme'])) {
        $this->launchScheme = $vals['launchScheme'];
      }
      if (isset($vals['iconTint'])) {
        $this->iconTint = $vals['iconTint'];
      }
    }
  }

  public function getName() {
    return 'ServiceItem';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->title);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->g);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->subType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->appId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->channelId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->badge);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->iconUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->downloadUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->launchScheme);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->iconTint);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ServiceItem');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->title !== null) {
      $xfer += $output->writeFieldBegin('title', TType::STRING, 2);
      $xfer += $output->writeString($this->title);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->g !== null) {
      $xfer += $output->writeFieldBegin('g', TType::I32, 3);
      $xfer += $output->writeI32($this->g);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->subType !== null) {
      $xfer += $output->writeFieldBegin('subType', TType::I32, 4);
      $xfer += $output->writeI32($this->subType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appId !== null) {
      $xfer += $output->writeFieldBegin('appId', TType::STRING, 5);
      $xfer += $output->writeString($this->appId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->channelId !== null) {
      $xfer += $output->writeFieldBegin('channelId', TType::STRING, 6);
      $xfer += $output->writeString($this->channelId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->badge !== null) {
      $xfer += $output->writeFieldBegin('badge', TType::STRING, 7);
      $xfer += $output->writeString($this->badge);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->iconUrl !== null) {
      $xfer += $output->writeFieldBegin('iconUrl', TType::STRING, 8);
      $xfer += $output->writeString($this->iconUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->downloadUrl !== null) {
      $xfer += $output->writeFieldBegin('downloadUrl', TType::STRING, 9);
      $xfer += $output->writeString($this->downloadUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->launchScheme !== null) {
      $xfer += $output->writeFieldBegin('launchScheme', TType::STRING, 10);
      $xfer += $output->writeString($this->launchScheme);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->iconTint !== null) {
      $xfer += $output->writeFieldBegin('iconTint', TType::BOOL, 11);
      $xfer += $output->writeBool($this->iconTint);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AdditionalInfoItem {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'g',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    3 => array(
      'var' => 'title',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'descr',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'iconUrl',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'link',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $id = null;
  /**
   * @var int
   */
  public $g = null;
  /**
   * @var string
   */
  public $title = null;
  /**
   * @var string
   */
  public $descr = null;
  /**
   * @var string
   */
  public $iconUrl = null;
  /**
   * @var string
   */
  public $link = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['g'])) {
        $this->g = $vals['g'];
      }
      if (isset($vals['title'])) {
        $this->title = $vals['title'];
      }
      if (isset($vals['descr'])) {
        $this->descr = $vals['descr'];
      }
      if (isset($vals['iconUrl'])) {
        $this->iconUrl = $vals['iconUrl'];
      }
      if (isset($vals['link'])) {
        $this->link = $vals['link'];
      }
    }
  }

  public function getName() {
    return 'AdditionalInfoItem';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->g);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->title);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->descr);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->iconUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->link);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdditionalInfoItem');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->g !== null) {
      $xfer += $output->writeFieldBegin('g', TType::I32, 2);
      $xfer += $output->writeI32($this->g);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->title !== null) {
      $xfer += $output->writeFieldBegin('title', TType::STRING, 3);
      $xfer += $output->writeString($this->title);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->descr !== null) {
      $xfer += $output->writeFieldBegin('descr', TType::STRING, 4);
      $xfer += $output->writeString($this->descr);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->iconUrl !== null) {
      $xfer += $output->writeFieldBegin('iconUrl', TType::STRING, 5);
      $xfer += $output->writeString($this->iconUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->link !== null) {
      $xfer += $output->writeFieldBegin('link', TType::STRING, 6);
      $xfer += $output->writeString($this->link);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class YellowpageItem {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'mid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'name',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'address',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'latitude',
      'isRequired' => false,
      'type' => TType::DOUBLE,
      ),
    6 => array(
      'var' => 'longitude',
      'isRequired' => false,
      'type' => TType::DOUBLE,
      ),
    7 => array(
      'var' => 'distance',
      'isRequired' => false,
      'type' => TType::DOUBLE,
      ),
    8 => array(
      'var' => 'canFreeCall',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    9 => array(
      'var' => 'k',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    10 => array(
      'var' => 'phoneNumber',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    11 => array(
      'var' => 'cat',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    12 => array(
      'var' => 'categoryIcon',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    13 => array(
      'var' => 'additionalInfo',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\AdditionalInfoItem',
        ),
      ),
    );

  /**
   * @var string
   */
  public $id = null;
  /**
   * @var string
   */
  public $mid = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var string
   */
  public $address = null;
  /**
   * @var double
   */
  public $latitude = null;
  /**
   * @var double
   */
  public $longitude = null;
  /**
   * @var double
   */
  public $distance = null;
  /**
   * @var bool
   */
  public $canFreeCall = null;
  /**
   * @var int
   */
  public $k = null;
  /**
   * @var string
   */
  public $phoneNumber = null;
  /**
   * @var int
   */
  public $cat = null;
  /**
   * @var int
   */
  public $categoryIcon = null;
  /**
   * @var \AdditionalInfoItem[]
   */
  public $additionalInfo = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['mid'])) {
        $this->mid = $vals['mid'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['address'])) {
        $this->address = $vals['address'];
      }
      if (isset($vals['latitude'])) {
        $this->latitude = $vals['latitude'];
      }
      if (isset($vals['longitude'])) {
        $this->longitude = $vals['longitude'];
      }
      if (isset($vals['distance'])) {
        $this->distance = $vals['distance'];
      }
      if (isset($vals['canFreeCall'])) {
        $this->canFreeCall = $vals['canFreeCall'];
      }
      if (isset($vals['k'])) {
        $this->k = $vals['k'];
      }
      if (isset($vals['phoneNumber'])) {
        $this->phoneNumber = $vals['phoneNumber'];
      }
      if (isset($vals['cat'])) {
        $this->cat = $vals['cat'];
      }
      if (isset($vals['categoryIcon'])) {
        $this->categoryIcon = $vals['categoryIcon'];
      }
      if (isset($vals['additionalInfo'])) {
        $this->additionalInfo = $vals['additionalInfo'];
      }
    }
  }

  public function getName() {
    return 'YellowpageItem';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->address);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->latitude);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->longitude);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->distance);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->canFreeCall);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->k);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->phoneNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cat);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->categoryIcon);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::LST) {
            $this->additionalInfo = array();
            $_size84 = 0;
            $_etype87 = 0;
            $xfer += $input->readListBegin($_etype87, $_size84);
            for ($_i88 = 0; $_i88 < $_size84; ++$_i88)
            {
              $elem89 = null;
              $elem89 = new \AdditionalInfoItem();
              $xfer += $elem89->read($input);
              $this->additionalInfo []= $elem89;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('YellowpageItem');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mid !== null) {
      $xfer += $output->writeFieldBegin('mid', TType::STRING, 2);
      $xfer += $output->writeString($this->mid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 3);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->address !== null) {
      $xfer += $output->writeFieldBegin('address', TType::STRING, 4);
      $xfer += $output->writeString($this->address);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->latitude !== null) {
      $xfer += $output->writeFieldBegin('latitude', TType::DOUBLE, 5);
      $xfer += $output->writeDouble($this->latitude);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->longitude !== null) {
      $xfer += $output->writeFieldBegin('longitude', TType::DOUBLE, 6);
      $xfer += $output->writeDouble($this->longitude);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->distance !== null) {
      $xfer += $output->writeFieldBegin('distance', TType::DOUBLE, 7);
      $xfer += $output->writeDouble($this->distance);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->canFreeCall !== null) {
      $xfer += $output->writeFieldBegin('canFreeCall', TType::BOOL, 8);
      $xfer += $output->writeBool($this->canFreeCall);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->k !== null) {
      $xfer += $output->writeFieldBegin('k', TType::I32, 9);
      $xfer += $output->writeI32($this->k);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->phoneNumber !== null) {
      $xfer += $output->writeFieldBegin('phoneNumber', TType::STRING, 10);
      $xfer += $output->writeString($this->phoneNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cat !== null) {
      $xfer += $output->writeFieldBegin('cat', TType::I32, 11);
      $xfer += $output->writeI32($this->cat);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->categoryIcon !== null) {
      $xfer += $output->writeFieldBegin('categoryIcon', TType::I32, 12);
      $xfer += $output->writeI32($this->categoryIcon);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->additionalInfo !== null) {
      if (!is_array($this->additionalInfo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('additionalInfo', TType::LST, 13);
      {
        $output->writeListBegin(TType::STRUCT, count($this->additionalInfo));
        {
          foreach ($this->additionalInfo as $iter90)
          {
            $xfer += $iter90->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BuddySearchResult {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'mid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'displayName',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'pictureStatus',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'picturePath',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'statusMessage',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'businessAccount',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    7 => array(
      'var' => 'iconType',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    8 => array(
      'var' => 'botType',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var string
   */
  public $mid = null;
  /**
   * @var string
   */
  public $displayName = null;
  /**
   * @var string
   */
  public $pictureStatus = null;
  /**
   * @var string
   */
  public $picturePath = null;
  /**
   * @var string
   */
  public $statusMessage = null;
  /**
   * @var bool
   */
  public $businessAccount = null;
  /**
   * @var int
   */
  public $iconType = null;
  /**
   * @var int
   */
  public $botType = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['mid'])) {
        $this->mid = $vals['mid'];
      }
      if (isset($vals['displayName'])) {
        $this->displayName = $vals['displayName'];
      }
      if (isset($vals['pictureStatus'])) {
        $this->pictureStatus = $vals['pictureStatus'];
      }
      if (isset($vals['picturePath'])) {
        $this->picturePath = $vals['picturePath'];
      }
      if (isset($vals['statusMessage'])) {
        $this->statusMessage = $vals['statusMessage'];
      }
      if (isset($vals['businessAccount'])) {
        $this->businessAccount = $vals['businessAccount'];
      }
      if (isset($vals['iconType'])) {
        $this->iconType = $vals['iconType'];
      }
      if (isset($vals['botType'])) {
        $this->botType = $vals['botType'];
      }
    }
  }

  public function getName() {
    return 'BuddySearchResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->displayName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pictureStatus);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->picturePath);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->statusMessage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->businessAccount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->iconType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->botType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BuddySearchResult');
    if ($this->mid !== null) {
      $xfer += $output->writeFieldBegin('mid', TType::STRING, 1);
      $xfer += $output->writeString($this->mid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->displayName !== null) {
      $xfer += $output->writeFieldBegin('displayName', TType::STRING, 2);
      $xfer += $output->writeString($this->displayName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pictureStatus !== null) {
      $xfer += $output->writeFieldBegin('pictureStatus', TType::STRING, 3);
      $xfer += $output->writeString($this->pictureStatus);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->picturePath !== null) {
      $xfer += $output->writeFieldBegin('picturePath', TType::STRING, 4);
      $xfer += $output->writeString($this->picturePath);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->statusMessage !== null) {
      $xfer += $output->writeFieldBegin('statusMessage', TType::STRING, 5);
      $xfer += $output->writeString($this->statusMessage);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->businessAccount !== null) {
      $xfer += $output->writeFieldBegin('businessAccount', TType::BOOL, 6);
      $xfer += $output->writeBool($this->businessAccount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->iconType !== null) {
      $xfer += $output->writeFieldBegin('iconType', TType::I32, 7);
      $xfer += $output->writeI32($this->iconType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->botType !== null) {
      $xfer += $output->writeFieldBegin('botType', TType::I32, 8);
      $xfer += $output->writeI32($this->botType);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GeoAddressItem {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'latitude',
      'isRequired' => false,
      'type' => TType::DOUBLE,
      ),
    2 => array(
      'var' => 'longitude',
      'isRequired' => false,
      'type' => TType::DOUBLE,
      ),
    3 => array(
      'var' => 'displayAddress',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var double
   */
  public $latitude = null;
  /**
   * @var double
   */
  public $longitude = null;
  /**
   * @var string
   */
  public $displayAddress = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['latitude'])) {
        $this->latitude = $vals['latitude'];
      }
      if (isset($vals['longitude'])) {
        $this->longitude = $vals['longitude'];
      }
      if (isset($vals['displayAddress'])) {
        $this->displayAddress = $vals['displayAddress'];
      }
    }
  }

  public function getName() {
    return 'GeoAddressItem';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->latitude);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->longitude);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->displayAddress);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GeoAddressItem');
    if ($this->latitude !== null) {
      $xfer += $output->writeFieldBegin('latitude', TType::DOUBLE, 1);
      $xfer += $output->writeDouble($this->latitude);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->longitude !== null) {
      $xfer += $output->writeFieldBegin('longitude', TType::DOUBLE, 2);
      $xfer += $output->writeDouble($this->longitude);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->displayAddress !== null) {
      $xfer += $output->writeFieldBegin('displayAddress', TType::STRING, 3);
      $xfer += $output->writeString($this->displayAddress);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AddFriendData {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'mid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $mid = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['mid'])) {
        $this->mid = $vals['mid'];
      }
    }
  }

  public function getName() {
    return 'AddFriendData';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AddFriendData');
    if ($this->mid !== null) {
      $xfer += $output->writeFieldBegin('mid', TType::STRING, 1);
      $xfer += $output->writeString($this->mid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class InstallAppData {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'installData',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRING,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRING,
        ),
      ),
    );

  /**
   * @var array
   */
  public $installData = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['installData'])) {
        $this->installData = $vals['installData'];
      }
    }
  }

  public function getName() {
    return 'InstallAppData';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->installData = array();
            $_size91 = 0;
            $_ktype92 = 0;
            $_vtype93 = 0;
            $xfer += $input->readMapBegin($_ktype92, $_vtype93, $_size91);
            for ($_i95 = 0; $_i95 < $_size91; ++$_i95)
            {
              $key96 = '';
              $val97 = '';
              $xfer += $input->readString($key96);
              $xfer += $input->readString($val97);
              $this->installData[$key96] = $val97;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('InstallAppData');
    if ($this->installData !== null) {
      if (!is_array($this->installData)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('installData', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->installData));
        {
          foreach ($this->installData as $kiter98 => $viter99)
          {
            $xfer += $output->writeString($kiter98);
            $xfer += $output->writeString($viter99);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class JumpUrlData {
  static $isValidate = false;

  static $_TSPEC = array(
    );


  public function __construct() {
  }

  public function getName() {
    return 'JumpUrlData';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('JumpUrlData');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ButtonActionData {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'addFriendData',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\AddFriendData',
      ),
    2 => array(
      'var' => 'installAppData',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\InstallAppData',
      ),
    3 => array(
      'var' => 'jumpUrlData',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\JumpUrlData',
      ),
    );

  /**
   * @var \AddFriendData
   */
  public $addFriendData = null;
  /**
   * @var \InstallAppData
   */
  public $installAppData = null;
  /**
   * @var \JumpUrlData
   */
  public $jumpUrlData = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['addFriendData'])) {
        $this->addFriendData = $vals['addFriendData'];
      }
      if (isset($vals['installAppData'])) {
        $this->installAppData = $vals['installAppData'];
      }
      if (isset($vals['jumpUrlData'])) {
        $this->jumpUrlData = $vals['jumpUrlData'];
      }
    }
  }

  public function getName() {
    return 'ButtonActionData';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->addFriendData = new \AddFriendData();
            $xfer += $this->addFriendData->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->installAppData = new \InstallAppData();
            $xfer += $this->installAppData->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->jumpUrlData = new \JumpUrlData();
            $xfer += $this->jumpUrlData->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ButtonActionData');
    if ($this->addFriendData !== null) {
      if (!is_object($this->addFriendData)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('addFriendData', TType::STRUCT, 1);
      $xfer += $this->addFriendData->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->installAppData !== null) {
      if (!is_object($this->installAppData)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('installAppData', TType::STRUCT, 2);
      $xfer += $this->installAppData->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->jumpUrlData !== null) {
      if (!is_object($this->jumpUrlData)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('jumpUrlData', TType::STRUCT, 3);
      $xfer += $this->jumpUrlData->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ShortcutButtonAction {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'actionType',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'actionData',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\ButtonActionData',
      ),
    );

  /**
   * @var int
   */
  public $actionType = null;
  /**
   * @var \ButtonActionData
   */
  public $actionData = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['actionType'])) {
        $this->actionType = $vals['actionType'];
      }
      if (isset($vals['actionData'])) {
        $this->actionData = $vals['actionData'];
      }
    }
  }

  public function getName() {
    return 'ShortcutButtonAction';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->actionType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->actionData = new \ButtonActionData();
            $xfer += $this->actionData->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ShortcutButtonAction');
    if ($this->actionType !== null) {
      $xfer += $output->writeFieldBegin('actionType', TType::I32, 1);
      $xfer += $output->writeI32($this->actionType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->actionData !== null) {
      if (!is_object($this->actionData)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('actionData', TType::STRUCT, 2);
      $xfer += $this->actionData->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ShortcutButton {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'title',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'url',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'iconPath',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'action',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\ShortcutButtonAction',
      ),
    );

  /**
   * @var string
   */
  public $id = null;
  /**
   * @var string
   */
  public $title = null;
  /**
   * @var string
   */
  public $url = null;
  /**
   * @var string
   */
  public $iconPath = null;
  /**
   * @var \ShortcutButtonAction
   */
  public $action = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['title'])) {
        $this->title = $vals['title'];
      }
      if (isset($vals['url'])) {
        $this->url = $vals['url'];
      }
      if (isset($vals['iconPath'])) {
        $this->iconPath = $vals['iconPath'];
      }
      if (isset($vals['action'])) {
        $this->action = $vals['action'];
      }
    }
  }

  public function getName() {
    return 'ShortcutButton';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->title);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->iconPath);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->action = new \ShortcutButtonAction();
            $xfer += $this->action->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ShortcutButton');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->title !== null) {
      $xfer += $output->writeFieldBegin('title', TType::STRING, 2);
      $xfer += $output->writeString($this->title);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->url !== null) {
      $xfer += $output->writeFieldBegin('url', TType::STRING, 3);
      $xfer += $output->writeString($this->url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->iconPath !== null) {
      $xfer += $output->writeFieldBegin('iconPath', TType::STRING, 4);
      $xfer += $output->writeString($this->iconPath);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->action !== null) {
      if (!is_object($this->action)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('action', TType::STRUCT, 5);
      $xfer += $this->action->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ShortcutItem {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'title',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'descr',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'iconPath',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'url',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'buttons',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\ShortcutButton',
        ),
      ),
    7 => array(
      'var' => 'action',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\ShortcutButtonAction',
      ),
    );

  /**
   * @var string
   */
  public $id = null;
  /**
   * @var string
   */
  public $title = null;
  /**
   * @var string
   */
  public $descr = null;
  /**
   * @var string
   */
  public $iconPath = null;
  /**
   * @var string
   */
  public $url = null;
  /**
   * @var \ShortcutButton[]
   */
  public $buttons = null;
  /**
   * @var \ShortcutButtonAction
   */
  public $action = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['title'])) {
        $this->title = $vals['title'];
      }
      if (isset($vals['descr'])) {
        $this->descr = $vals['descr'];
      }
      if (isset($vals['iconPath'])) {
        $this->iconPath = $vals['iconPath'];
      }
      if (isset($vals['url'])) {
        $this->url = $vals['url'];
      }
      if (isset($vals['buttons'])) {
        $this->buttons = $vals['buttons'];
      }
      if (isset($vals['action'])) {
        $this->action = $vals['action'];
      }
    }
  }

  public function getName() {
    return 'ShortcutItem';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->title);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->descr);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->iconPath);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::LST) {
            $this->buttons = array();
            $_size100 = 0;
            $_etype103 = 0;
            $xfer += $input->readListBegin($_etype103, $_size100);
            for ($_i104 = 0; $_i104 < $_size100; ++$_i104)
            {
              $elem105 = null;
              $elem105 = new \ShortcutButton();
              $xfer += $elem105->read($input);
              $this->buttons []= $elem105;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->action = new \ShortcutButtonAction();
            $xfer += $this->action->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ShortcutItem');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->title !== null) {
      $xfer += $output->writeFieldBegin('title', TType::STRING, 2);
      $xfer += $output->writeString($this->title);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->descr !== null) {
      $xfer += $output->writeFieldBegin('descr', TType::STRING, 3);
      $xfer += $output->writeString($this->descr);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->iconPath !== null) {
      $xfer += $output->writeFieldBegin('iconPath', TType::STRING, 4);
      $xfer += $output->writeString($this->iconPath);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->url !== null) {
      $xfer += $output->writeFieldBegin('url', TType::STRING, 5);
      $xfer += $output->writeString($this->url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->buttons !== null) {
      if (!is_array($this->buttons)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('buttons', TType::LST, 6);
      {
        $output->writeListBegin(TType::STRUCT, count($this->buttons));
        {
          foreach ($this->buttons as $iter106)
          {
            $xfer += $iter106->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->action !== null) {
      if (!is_object($this->action)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('action', TType::STRUCT, 7);
      $xfer += $this->action->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SQCat {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'id',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'name',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var int
   */
  public $id = null;
  /**
   * @var string
   */
  public $name = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
    }
  }

  public function getName() {
    return 'SQCat';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SQCat');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SearchItemUnion {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'categoryItem',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\CategoryItem',
      ),
    2 => array(
      'var' => 'spotItem',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SpotItem',
      ),
    3 => array(
      'var' => 'productItem',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\ProductSearchSummary',
      ),
    4 => array(
      'var' => 'serviceItem',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\ServiceItem',
      ),
    5 => array(
      'var' => 'yellowpageItem',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\YellowpageItem',
      ),
    6 => array(
      'var' => 'oaItem',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\BuddySearchResult',
      ),
    7 => array(
      'var' => 'geoAddressItem',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\GeoAddressItem',
      ),
    8 => array(
      'var' => 'shortcutItem',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\ShortcutItem',
      ),
    9 => array(
      'var' => 'squareItem',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareInfo',
      ),
    10 => array(
      'var' => 'squareCategoryItem',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SQCat',
      ),
    );

  /**
   * @var \CategoryItem
   */
  public $categoryItem = null;
  /**
   * @var \SpotItem
   */
  public $spotItem = null;
  /**
   * @var \ProductSearchSummary
   */
  public $productItem = null;
  /**
   * @var \ServiceItem
   */
  public $serviceItem = null;
  /**
   * @var \YellowpageItem
   */
  public $yellowpageItem = null;
  /**
   * @var \BuddySearchResult
   */
  public $oaItem = null;
  /**
   * @var \GeoAddressItem
   */
  public $geoAddressItem = null;
  /**
   * @var \ShortcutItem
   */
  public $shortcutItem = null;
  /**
   * @var \SquareInfo
   */
  public $squareItem = null;
  /**
   * @var \SQCat
   */
  public $squareCategoryItem = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['categoryItem'])) {
        $this->categoryItem = $vals['categoryItem'];
      }
      if (isset($vals['spotItem'])) {
        $this->spotItem = $vals['spotItem'];
      }
      if (isset($vals['productItem'])) {
        $this->productItem = $vals['productItem'];
      }
      if (isset($vals['serviceItem'])) {
        $this->serviceItem = $vals['serviceItem'];
      }
      if (isset($vals['yellowpageItem'])) {
        $this->yellowpageItem = $vals['yellowpageItem'];
      }
      if (isset($vals['oaItem'])) {
        $this->oaItem = $vals['oaItem'];
      }
      if (isset($vals['geoAddressItem'])) {
        $this->geoAddressItem = $vals['geoAddressItem'];
      }
      if (isset($vals['shortcutItem'])) {
        $this->shortcutItem = $vals['shortcutItem'];
      }
      if (isset($vals['squareItem'])) {
        $this->squareItem = $vals['squareItem'];
      }
      if (isset($vals['squareCategoryItem'])) {
        $this->squareCategoryItem = $vals['squareCategoryItem'];
      }
    }
  }

  public function getName() {
    return 'SearchItemUnion';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->categoryItem = new \CategoryItem();
            $xfer += $this->categoryItem->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->spotItem = new \SpotItem();
            $xfer += $this->spotItem->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->productItem = new \ProductSearchSummary();
            $xfer += $this->productItem->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->serviceItem = new \ServiceItem();
            $xfer += $this->serviceItem->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->yellowpageItem = new \YellowpageItem();
            $xfer += $this->yellowpageItem->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->oaItem = new \BuddySearchResult();
            $xfer += $this->oaItem->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->geoAddressItem = new \GeoAddressItem();
            $xfer += $this->geoAddressItem->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRUCT) {
            $this->shortcutItem = new \ShortcutItem();
            $xfer += $this->shortcutItem->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRUCT) {
            $this->squareItem = new \SquareInfo();
            $xfer += $this->squareItem->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRUCT) {
            $this->squareCategoryItem = new \SQCat();
            $xfer += $this->squareCategoryItem->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SearchItemUnion');
    if ($this->categoryItem !== null) {
      if (!is_object($this->categoryItem)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('categoryItem', TType::STRUCT, 1);
      $xfer += $this->categoryItem->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->spotItem !== null) {
      if (!is_object($this->spotItem)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('spotItem', TType::STRUCT, 2);
      $xfer += $this->spotItem->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->productItem !== null) {
      if (!is_object($this->productItem)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('productItem', TType::STRUCT, 3);
      $xfer += $this->productItem->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serviceItem !== null) {
      if (!is_object($this->serviceItem)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('serviceItem', TType::STRUCT, 4);
      $xfer += $this->serviceItem->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->yellowpageItem !== null) {
      if (!is_object($this->yellowpageItem)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('yellowpageItem', TType::STRUCT, 5);
      $xfer += $this->yellowpageItem->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->oaItem !== null) {
      if (!is_object($this->oaItem)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('oaItem', TType::STRUCT, 6);
      $xfer += $this->oaItem->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->geoAddressItem !== null) {
      if (!is_object($this->geoAddressItem)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('geoAddressItem', TType::STRUCT, 7);
      $xfer += $this->geoAddressItem->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->shortcutItem !== null) {
      if (!is_object($this->shortcutItem)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('shortcutItem', TType::STRUCT, 8);
      $xfer += $this->shortcutItem->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareItem !== null) {
      if (!is_object($this->squareItem)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squareItem', TType::STRUCT, 9);
      $xfer += $this->squareItem->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareCategoryItem !== null) {
      if (!is_object($this->squareCategoryItem)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squareCategoryItem', TType::STRUCT, 10);
      $xfer += $this->squareCategoryItem->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SearchResultItem {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'ItemType',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    3 => array(
      'var' => 'item',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SearchItemUnion',
      ),
    4 => array(
      'var' => 'title',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'sub1',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'sub2',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    7 => array(
      'var' => 'iconUrl',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    8 => array(
      'var' => 'titleLink',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    9 => array(
      'var' => 'iconLink',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    10 => array(
      'var' => 'displayTemplate',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    11 => array(
      'var' => 'additionalInfo',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\AdditionalInfoItem',
        ),
      ),
    );

  /**
   * @var string
   */
  public $id = null;
  /**
   * @var int
   */
  public $ItemType = null;
  /**
   * @var \SearchItemUnion
   */
  public $item = null;
  /**
   * @var string
   */
  public $title = null;
  /**
   * @var string
   */
  public $sub1 = null;
  /**
   * @var string
   */
  public $sub2 = null;
  /**
   * @var string
   */
  public $iconUrl = null;
  /**
   * @var string
   */
  public $titleLink = null;
  /**
   * @var string
   */
  public $iconLink = null;
  /**
   * @var string
   */
  public $displayTemplate = null;
  /**
   * @var \AdditionalInfoItem[]
   */
  public $additionalInfo = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['ItemType'])) {
        $this->ItemType = $vals['ItemType'];
      }
      if (isset($vals['item'])) {
        $this->item = $vals['item'];
      }
      if (isset($vals['title'])) {
        $this->title = $vals['title'];
      }
      if (isset($vals['sub1'])) {
        $this->sub1 = $vals['sub1'];
      }
      if (isset($vals['sub2'])) {
        $this->sub2 = $vals['sub2'];
      }
      if (isset($vals['iconUrl'])) {
        $this->iconUrl = $vals['iconUrl'];
      }
      if (isset($vals['titleLink'])) {
        $this->titleLink = $vals['titleLink'];
      }
      if (isset($vals['iconLink'])) {
        $this->iconLink = $vals['iconLink'];
      }
      if (isset($vals['displayTemplate'])) {
        $this->displayTemplate = $vals['displayTemplate'];
      }
      if (isset($vals['additionalInfo'])) {
        $this->additionalInfo = $vals['additionalInfo'];
      }
    }
  }

  public function getName() {
    return 'SearchResultItem';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ItemType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->item = new \SearchItemUnion();
            $xfer += $this->item->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->title);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sub1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sub2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->iconUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->titleLink);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->iconLink);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->displayTemplate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::LST) {
            $this->additionalInfo = array();
            $_size107 = 0;
            $_etype110 = 0;
            $xfer += $input->readListBegin($_etype110, $_size107);
            for ($_i111 = 0; $_i111 < $_size107; ++$_i111)
            {
              $elem112 = null;
              $elem112 = new \AdditionalInfoItem();
              $xfer += $elem112->read($input);
              $this->additionalInfo []= $elem112;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SearchResultItem');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ItemType !== null) {
      $xfer += $output->writeFieldBegin('ItemType', TType::I32, 2);
      $xfer += $output->writeI32($this->ItemType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->item !== null) {
      if (!is_object($this->item)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('item', TType::STRUCT, 3);
      $xfer += $this->item->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->title !== null) {
      $xfer += $output->writeFieldBegin('title', TType::STRING, 4);
      $xfer += $output->writeString($this->title);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sub1 !== null) {
      $xfer += $output->writeFieldBegin('sub1', TType::STRING, 5);
      $xfer += $output->writeString($this->sub1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sub2 !== null) {
      $xfer += $output->writeFieldBegin('sub2', TType::STRING, 6);
      $xfer += $output->writeString($this->sub2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->iconUrl !== null) {
      $xfer += $output->writeFieldBegin('iconUrl', TType::STRING, 7);
      $xfer += $output->writeString($this->iconUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->titleLink !== null) {
      $xfer += $output->writeFieldBegin('titleLink', TType::STRING, 8);
      $xfer += $output->writeString($this->titleLink);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->iconLink !== null) {
      $xfer += $output->writeFieldBegin('iconLink', TType::STRING, 9);
      $xfer += $output->writeString($this->iconLink);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->displayTemplate !== null) {
      $xfer += $output->writeFieldBegin('displayTemplate', TType::STRING, 10);
      $xfer += $output->writeString($this->displayTemplate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->additionalInfo !== null) {
      if (!is_array($this->additionalInfo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('additionalInfo', TType::LST, 11);
      {
        $output->writeListBegin(TType::STRUCT, count($this->additionalInfo));
        {
          foreach ($this->additionalInfo as $iter113)
          {
            $xfer += $iter113->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SearchResultCollection {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'collection',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'title',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'rank',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    4 => array(
      'var' => 'hits',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    5 => array(
      'var' => 'items',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\SearchResultItem',
        ),
      ),
    6 => array(
      'var' => 'hasNext',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    7 => array(
      'var' => 'cat',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::I32,
      'elem' => array(
        'type' => TType::I32,
        ),
      ),
    8 => array(
      'var' => 'error',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    9 => array(
      'var' => 'tabTitle',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    10 => array(
      'var' => 'start',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    11 => array(
      'var' => 'length',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    12 => array(
      'var' => 'squareCategoryId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $collection = null;
  /**
   * @var string
   */
  public $title = null;
  /**
   * @var int
   */
  public $rank = null;
  /**
   * @var int
   */
  public $hits = null;
  /**
   * @var \SearchResultItem[]
   */
  public $items = null;
  /**
   * @var bool
   */
  public $hasNext = null;
  /**
   * @var int[]
   */
  public $cat = null;
  /**
   * @var string
   */
  public $error = null;
  /**
   * @var string
   */
  public $tabTitle = null;
  /**
   * @var int
   */
  public $start = null;
  /**
   * @var int
   */
  public $length = null;
  /**
   * @var int
   */
  public $squareCategoryId = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['collection'])) {
        $this->collection = $vals['collection'];
      }
      if (isset($vals['title'])) {
        $this->title = $vals['title'];
      }
      if (isset($vals['rank'])) {
        $this->rank = $vals['rank'];
      }
      if (isset($vals['hits'])) {
        $this->hits = $vals['hits'];
      }
      if (isset($vals['items'])) {
        $this->items = $vals['items'];
      }
      if (isset($vals['hasNext'])) {
        $this->hasNext = $vals['hasNext'];
      }
      if (isset($vals['cat'])) {
        $this->cat = $vals['cat'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
      if (isset($vals['tabTitle'])) {
        $this->tabTitle = $vals['tabTitle'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['length'])) {
        $this->length = $vals['length'];
      }
      if (isset($vals['squareCategoryId'])) {
        $this->squareCategoryId = $vals['squareCategoryId'];
      }
    }
  }

  public function getName() {
    return 'SearchResultCollection';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->collection);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->title);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->rank);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->hits);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::LST) {
            $this->items = array();
            $_size114 = 0;
            $_etype117 = 0;
            $xfer += $input->readListBegin($_etype117, $_size114);
            for ($_i118 = 0; $_i118 < $_size114; ++$_i118)
            {
              $elem119 = null;
              $elem119 = new \SearchResultItem();
              $xfer += $elem119->read($input);
              $this->items []= $elem119;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->hasNext);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::LST) {
            $this->cat = array();
            $_size120 = 0;
            $_etype123 = 0;
            $xfer += $input->readListBegin($_etype123, $_size120);
            for ($_i124 = 0; $_i124 < $_size120; ++$_i124)
            {
              $elem125 = null;
              $xfer += $input->readI32($elem125);
              $this->cat []= $elem125;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->error);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tabTitle);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->length);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->squareCategoryId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SearchResultCollection');
    if ($this->collection !== null) {
      $xfer += $output->writeFieldBegin('collection', TType::I32, 1);
      $xfer += $output->writeI32($this->collection);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->title !== null) {
      $xfer += $output->writeFieldBegin('title', TType::STRING, 2);
      $xfer += $output->writeString($this->title);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rank !== null) {
      $xfer += $output->writeFieldBegin('rank', TType::I32, 3);
      $xfer += $output->writeI32($this->rank);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->hits !== null) {
      $xfer += $output->writeFieldBegin('hits', TType::I32, 4);
      $xfer += $output->writeI32($this->hits);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->items !== null) {
      if (!is_array($this->items)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('items', TType::LST, 5);
      {
        $output->writeListBegin(TType::STRUCT, count($this->items));
        {
          foreach ($this->items as $iter126)
          {
            $xfer += $iter126->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->hasNext !== null) {
      $xfer += $output->writeFieldBegin('hasNext', TType::BOOL, 6);
      $xfer += $output->writeBool($this->hasNext);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cat !== null) {
      if (!is_array($this->cat)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('cat', TType::LST, 7);
      {
        $output->writeListBegin(TType::I32, count($this->cat));
        {
          foreach ($this->cat as $iter127)
          {
            $xfer += $output->writeI32($iter127);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      $xfer += $output->writeFieldBegin('error', TType::STRING, 8);
      $xfer += $output->writeString($this->error);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tabTitle !== null) {
      $xfer += $output->writeFieldBegin('tabTitle', TType::STRING, 9);
      $xfer += $output->writeString($this->tabTitle);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::I32, 10);
      $xfer += $output->writeI32($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->length !== null) {
      $xfer += $output->writeFieldBegin('length', TType::I32, 11);
      $xfer += $output->writeI32($this->length);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareCategoryId !== null) {
      $xfer += $output->writeFieldBegin('squareCategoryId', TType::I32, 12);
      $xfer += $output->writeI32($this->squareCategoryId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SearchResult {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'sid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'collections',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\SearchResultCollection',
        ),
      ),
    3 => array(
      'var' => 'start',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    4 => array(
      'var' => 'length',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var string
   */
  public $sid = null;
  /**
   * @var \SearchResultCollection[]
   */
  public $collections = null;
  /**
   * @var int
   */
  public $start = null;
  /**
   * @var int
   */
  public $length = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['sid'])) {
        $this->sid = $vals['sid'];
      }
      if (isset($vals['collections'])) {
        $this->collections = $vals['collections'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['length'])) {
        $this->length = $vals['length'];
      }
    }
  }

  public function getName() {
    return 'SearchResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->collections = array();
            $_size128 = 0;
            $_etype131 = 0;
            $xfer += $input->readListBegin($_etype131, $_size128);
            for ($_i132 = 0; $_i132 < $_size128; ++$_i132)
            {
              $elem133 = null;
              $elem133 = new \SearchResultCollection();
              $xfer += $elem133->read($input);
              $this->collections []= $elem133;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->length);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SearchResult');
    if ($this->sid !== null) {
      $xfer += $output->writeFieldBegin('sid', TType::STRING, 1);
      $xfer += $output->writeString($this->sid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->collections !== null) {
      if (!is_array($this->collections)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('collections', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->collections));
        {
          foreach ($this->collections as $iter134)
          {
            $xfer += $iter134->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::I32, 3);
      $xfer += $output->writeI32($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->length !== null) {
      $xfer += $output->writeFieldBegin('length', TType::I32, 4);
      $xfer += $output->writeI32($this->length);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SearchCommonParameter {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'latitude',
      'isRequired' => false,
      'type' => TType::DOUBLE,
      ),
    2 => array(
      'var' => 'longitude',
      'isRequired' => false,
      'type' => TType::DOUBLE,
      ),
    3 => array(
      'var' => 'source',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'region',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'sid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'queryType',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var double
   */
  public $latitude = null;
  /**
   * @var double
   */
  public $longitude = null;
  /**
   * @var string
   */
  public $source = null;
  /**
   * @var string
   */
  public $region = null;
  /**
   * @var string
   */
  public $sid = null;
  /**
   * @var int
   */
  public $queryType = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['latitude'])) {
        $this->latitude = $vals['latitude'];
      }
      if (isset($vals['longitude'])) {
        $this->longitude = $vals['longitude'];
      }
      if (isset($vals['source'])) {
        $this->source = $vals['source'];
      }
      if (isset($vals['region'])) {
        $this->region = $vals['region'];
      }
      if (isset($vals['sid'])) {
        $this->sid = $vals['sid'];
      }
      if (isset($vals['queryType'])) {
        $this->queryType = $vals['queryType'];
      }
    }
  }

  public function getName() {
    return 'SearchCommonParameter';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->latitude);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->longitude);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->source);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->region);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->queryType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SearchCommonParameter');
    if ($this->latitude !== null) {
      $xfer += $output->writeFieldBegin('latitude', TType::DOUBLE, 1);
      $xfer += $output->writeDouble($this->latitude);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->longitude !== null) {
      $xfer += $output->writeFieldBegin('longitude', TType::DOUBLE, 2);
      $xfer += $output->writeDouble($this->longitude);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->source !== null) {
      $xfer += $output->writeFieldBegin('source', TType::STRING, 3);
      $xfer += $output->writeString($this->source);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->region !== null) {
      $xfer += $output->writeFieldBegin('region', TType::STRING, 4);
      $xfer += $output->writeString($this->region);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sid !== null) {
      $xfer += $output->writeFieldBegin('sid', TType::STRING, 5);
      $xfer += $output->writeString($this->sid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->queryType !== null) {
      $xfer += $output->writeFieldBegin('queryType', TType::I32, 6);
      $xfer += $output->writeI32($this->queryType);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SearchPagingParameter {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'collection',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'start',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    3 => array(
      'var' => 'length',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    4 => array(
      'var' => 'commonParam',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SearchCommonParameter',
      ),
    );

  /**
   * @var int
   */
  public $collection = null;
  /**
   * @var int
   */
  public $start = null;
  /**
   * @var int
   */
  public $length = null;
  /**
   * @var \SearchCommonParameter
   */
  public $commonParam = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['collection'])) {
        $this->collection = $vals['collection'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['length'])) {
        $this->length = $vals['length'];
      }
      if (isset($vals['commonParam'])) {
        $this->commonParam = $vals['commonParam'];
      }
    }
  }

  public function getName() {
    return 'SearchPagingParameter';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->collection);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->length);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->commonParam = new \SearchCommonParameter();
            $xfer += $this->commonParam->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SearchPagingParameter');
    if ($this->collection !== null) {
      $xfer += $output->writeFieldBegin('collection', TType::I32, 1);
      $xfer += $output->writeI32($this->collection);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::I32, 2);
      $xfer += $output->writeI32($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->length !== null) {
      $xfer += $output->writeFieldBegin('length', TType::I32, 3);
      $xfer += $output->writeI32($this->length);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->commonParam !== null) {
      if (!is_object($this->commonParam)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('commonParam', TType::STRUCT, 4);
      $xfer += $this->commonParam->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Location {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'title',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'address',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'latitude',
      'isRequired' => false,
      'type' => TType::DOUBLE,
      ),
    4 => array(
      'var' => 'longitude',
      'isRequired' => false,
      'type' => TType::DOUBLE,
      ),
    5 => array(
      'var' => 'phone',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $title = null;
  /**
   * @var string
   */
  public $address = null;
  /**
   * @var double
   */
  public $latitude = null;
  /**
   * @var double
   */
  public $longitude = null;
  /**
   * @var string
   */
  public $phone = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['title'])) {
        $this->title = $vals['title'];
      }
      if (isset($vals['address'])) {
        $this->address = $vals['address'];
      }
      if (isset($vals['latitude'])) {
        $this->latitude = $vals['latitude'];
      }
      if (isset($vals['longitude'])) {
        $this->longitude = $vals['longitude'];
      }
      if (isset($vals['phone'])) {
        $this->phone = $vals['phone'];
      }
    }
  }

  public function getName() {
    return 'Location';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->title);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->address);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->latitude);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->longitude);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->phone);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Location');
    if ($this->title !== null) {
      $xfer += $output->writeFieldBegin('title', TType::STRING, 1);
      $xfer += $output->writeString($this->title);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->address !== null) {
      $xfer += $output->writeFieldBegin('address', TType::STRING, 2);
      $xfer += $output->writeString($this->address);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->latitude !== null) {
      $xfer += $output->writeFieldBegin('latitude', TType::DOUBLE, 3);
      $xfer += $output->writeDouble($this->latitude);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->longitude !== null) {
      $xfer += $output->writeFieldBegin('longitude', TType::DOUBLE, 4);
      $xfer += $output->writeDouble($this->longitude);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->phone !== null) {
      $xfer += $output->writeFieldBegin('phone', TType::STRING, 5);
      $xfer += $output->writeString($this->phone);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MessageBoxV2MessageId {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'deliveredTime',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    2 => array(
      'var' => 'messageId',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    );

  /**
   * @var int
   */
  public $deliveredTime = null;
  /**
   * @var int
   */
  public $messageId = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['deliveredTime'])) {
        $this->deliveredTime = $vals['deliveredTime'];
      }
      if (isset($vals['messageId'])) {
        $this->messageId = $vals['messageId'];
      }
    }
  }

  public function getName() {
    return 'MessageBoxV2MessageId';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->deliveredTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->messageId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MessageBoxV2MessageId');
    if ($this->deliveredTime !== null) {
      $xfer += $output->writeFieldBegin('deliveredTime', TType::I64, 1);
      $xfer += $output->writeI64($this->deliveredTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->messageId !== null) {
      $xfer += $output->writeFieldBegin('messageId', TType::I64, 2);
      $xfer += $output->writeI64($this->messageId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MessageCommitResult {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'requestId',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'state',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    3 => array(
      'var' => 'messageStoreRequestId',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'messageIds',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRING,
      'elem' => array(
        'type' => TType::STRING,
        ),
      ),
    11 => array(
      'var' => 'receiverCount',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    12 => array(
      'var' => 'successCount',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    13 => array(
      'var' => 'failCount',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    14 => array(
      'var' => 'blockCount',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    15 => array(
      'var' => 'unregisteredCount',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    16 => array(
      'var' => 'unrelatedCount',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    21 => array(
      'var' => 'errorDescription',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $requestId = null;
  /**
   * @var int
   */
  public $state = null;
  /**
   * @var string
   */
  public $messageStoreRequestId = null;
  /**
   * @var string[]
   */
  public $messageIds = null;
  /**
   * @var int
   */
  public $receiverCount = null;
  /**
   * @var int
   */
  public $successCount = null;
  /**
   * @var int
   */
  public $failCount = null;
  /**
   * @var int
   */
  public $blockCount = null;
  /**
   * @var int
   */
  public $unregisteredCount = null;
  /**
   * @var int
   */
  public $unrelatedCount = null;
  /**
   * @var string
   */
  public $errorDescription = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['requestId'])) {
        $this->requestId = $vals['requestId'];
      }
      if (isset($vals['state'])) {
        $this->state = $vals['state'];
      }
      if (isset($vals['messageStoreRequestId'])) {
        $this->messageStoreRequestId = $vals['messageStoreRequestId'];
      }
      if (isset($vals['messageIds'])) {
        $this->messageIds = $vals['messageIds'];
      }
      if (isset($vals['receiverCount'])) {
        $this->receiverCount = $vals['receiverCount'];
      }
      if (isset($vals['successCount'])) {
        $this->successCount = $vals['successCount'];
      }
      if (isset($vals['failCount'])) {
        $this->failCount = $vals['failCount'];
      }
      if (isset($vals['blockCount'])) {
        $this->blockCount = $vals['blockCount'];
      }
      if (isset($vals['unregisteredCount'])) {
        $this->unregisteredCount = $vals['unregisteredCount'];
      }
      if (isset($vals['unrelatedCount'])) {
        $this->unrelatedCount = $vals['unrelatedCount'];
      }
      if (isset($vals['errorDescription'])) {
        $this->errorDescription = $vals['errorDescription'];
      }
    }
  }

  public function getName() {
    return 'MessageCommitResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->requestId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->state);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->messageStoreRequestId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->messageIds = array();
            $_size135 = 0;
            $_etype138 = 0;
            $xfer += $input->readListBegin($_etype138, $_size135);
            for ($_i139 = 0; $_i139 < $_size135; ++$_i139)
            {
              $elem140 = null;
              $xfer += $input->readString($elem140);
              $this->messageIds []= $elem140;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->receiverCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->successCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->failCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->blockCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->unregisteredCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->unrelatedCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->errorDescription);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MessageCommitResult');
    if ($this->requestId !== null) {
      $xfer += $output->writeFieldBegin('requestId', TType::STRING, 1);
      $xfer += $output->writeString($this->requestId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->state !== null) {
      $xfer += $output->writeFieldBegin('state', TType::I32, 2);
      $xfer += $output->writeI32($this->state);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->messageStoreRequestId !== null) {
      $xfer += $output->writeFieldBegin('messageStoreRequestId', TType::STRING, 3);
      $xfer += $output->writeString($this->messageStoreRequestId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->messageIds !== null) {
      if (!is_array($this->messageIds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('messageIds', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRING, count($this->messageIds));
        {
          foreach ($this->messageIds as $iter141)
          {
            $xfer += $output->writeString($iter141);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->receiverCount !== null) {
      $xfer += $output->writeFieldBegin('receiverCount', TType::I64, 11);
      $xfer += $output->writeI64($this->receiverCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->successCount !== null) {
      $xfer += $output->writeFieldBegin('successCount', TType::I64, 12);
      $xfer += $output->writeI64($this->successCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->failCount !== null) {
      $xfer += $output->writeFieldBegin('failCount', TType::I64, 13);
      $xfer += $output->writeI64($this->failCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->blockCount !== null) {
      $xfer += $output->writeFieldBegin('blockCount', TType::I64, 14);
      $xfer += $output->writeI64($this->blockCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->unregisteredCount !== null) {
      $xfer += $output->writeFieldBegin('unregisteredCount', TType::I64, 15);
      $xfer += $output->writeI64($this->unregisteredCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->unrelatedCount !== null) {
      $xfer += $output->writeFieldBegin('unrelatedCount', TType::I64, 16);
      $xfer += $output->writeI64($this->unrelatedCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorDescription !== null) {
      $xfer += $output->writeFieldBegin('errorDescription', TType::STRING, 21);
      $xfer += $output->writeString($this->errorDescription);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CallHost {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'host',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'port',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    3 => array(
      'var' => 'zone',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $host = null;
  /**
   * @var int
   */
  public $port = null;
  /**
   * @var string
   */
  public $zone = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['host'])) {
        $this->host = $vals['host'];
      }
      if (isset($vals['port'])) {
        $this->port = $vals['port'];
      }
      if (isset($vals['zone'])) {
        $this->zone = $vals['zone'];
      }
    }
  }

  public function getName() {
    return 'CallHost';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->host);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->port);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->zone);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CallHost');
    if ($this->host !== null) {
      $xfer += $output->writeFieldBegin('host', TType::STRING, 1);
      $xfer += $output->writeString($this->host);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->port !== null) {
      $xfer += $output->writeFieldBegin('port', TType::I32, 2);
      $xfer += $output->writeI32($this->port);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->zone !== null) {
      $xfer += $output->writeFieldBegin('zone', TType::STRING, 3);
      $xfer += $output->writeString($this->zone);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AgeCheckDocomoResult {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'authUrl',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'userAgeType',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var string
   */
  public $authUrl = null;
  /**
   * @var int
   */
  public $userAgeType = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['authUrl'])) {
        $this->authUrl = $vals['authUrl'];
      }
      if (isset($vals['userAgeType'])) {
        $this->userAgeType = $vals['userAgeType'];
      }
    }
  }

  public function getName() {
    return 'AgeCheckDocomoResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->authUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userAgeType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AgeCheckDocomoResult');
    if ($this->authUrl !== null) {
      $xfer += $output->writeFieldBegin('authUrl', TType::STRING, 1);
      $xfer += $output->writeString($this->authUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userAgeType !== null) {
      $xfer += $output->writeFieldBegin('userAgeType', TType::I32, 2);
      $xfer += $output->writeI32($this->userAgeType);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AgeCheckRequestResult {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'authUrl',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'sessionId',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $authUrl = null;
  /**
   * @var string
   */
  public $sessionId = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['authUrl'])) {
        $this->authUrl = $vals['authUrl'];
      }
      if (isset($vals['sessionId'])) {
        $this->sessionId = $vals['sessionId'];
      }
    }
  }

  public function getName() {
    return 'AgeCheckRequestResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->authUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sessionId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AgeCheckRequestResult');
    if ($this->authUrl !== null) {
      $xfer += $output->writeFieldBegin('authUrl', TType::STRING, 1);
      $xfer += $output->writeString($this->authUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionId !== null) {
      $xfer += $output->writeFieldBegin('sessionId', TType::STRING, 2);
      $xfer += $output->writeString($this->sessionId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TextMessageAnnouncementContents {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'messageId',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'text',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'senderSquareMemberMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'createdAt',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    );

  /**
   * @var string
   */
  public $messageId = null;
  /**
   * @var string
   */
  public $text = null;
  /**
   * @var string
   */
  public $senderSquareMemberMid = null;
  /**
   * @var int
   */
  public $createdAt = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['messageId'])) {
        $this->messageId = $vals['messageId'];
      }
      if (isset($vals['text'])) {
        $this->text = $vals['text'];
      }
      if (isset($vals['senderSquareMemberMid'])) {
        $this->senderSquareMemberMid = $vals['senderSquareMemberMid'];
      }
      if (isset($vals['createdAt'])) {
        $this->createdAt = $vals['createdAt'];
      }
    }
  }

  public function getName() {
    return 'TextMessageAnnouncementContents';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->messageId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->text);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->senderSquareMemberMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->createdAt);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TextMessageAnnouncementContents');
    if ($this->messageId !== null) {
      $xfer += $output->writeFieldBegin('messageId', TType::STRING, 1);
      $xfer += $output->writeString($this->messageId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->text !== null) {
      $xfer += $output->writeFieldBegin('text', TType::STRING, 2);
      $xfer += $output->writeString($this->text);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->senderSquareMemberMid !== null) {
      $xfer += $output->writeFieldBegin('senderSquareMemberMid', TType::STRING, 3);
      $xfer += $output->writeString($this->senderSquareMemberMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createdAt !== null) {
      $xfer += $output->writeFieldBegin('createdAt', TType::I64, 4);
      $xfer += $output->writeI64($this->createdAt);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareChatAnnouncementContents {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'textMessageAnnouncementContents',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\TextMessageAnnouncementContents',
      ),
    );

  /**
   * @var \TextMessageAnnouncementContents
   */
  public $textMessageAnnouncementContents = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['textMessageAnnouncementContents'])) {
        $this->textMessageAnnouncementContents = $vals['textMessageAnnouncementContents'];
      }
    }
  }

  public function getName() {
    return 'SquareChatAnnouncementContents';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->textMessageAnnouncementContents = new \TextMessageAnnouncementContents();
            $xfer += $this->textMessageAnnouncementContents->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareChatAnnouncementContents');
    if ($this->textMessageAnnouncementContents !== null) {
      if (!is_object($this->textMessageAnnouncementContents)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('textMessageAnnouncementContents', TType::STRUCT, 1);
      $xfer += $this->textMessageAnnouncementContents->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareChatAnnouncement {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'announcementSeq',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    2 => array(
      'var' => 'type',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    3 => array(
      'var' => 'contents',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareChatAnnouncementContents',
      ),
    );

  /**
   * @var int
   */
  public $announcementSeq = null;
  /**
   * @var int
   */
  public $type = null;
  /**
   * @var \SquareChatAnnouncementContents
   */
  public $contents = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['announcementSeq'])) {
        $this->announcementSeq = $vals['announcementSeq'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['contents'])) {
        $this->contents = $vals['contents'];
      }
    }
  }

  public function getName() {
    return 'SquareChatAnnouncement';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->announcementSeq);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->contents = new \SquareChatAnnouncementContents();
            $xfer += $this->contents->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareChatAnnouncement');
    if ($this->announcementSeq !== null) {
      $xfer += $output->writeFieldBegin('announcementSeq', TType::I64, 1);
      $xfer += $output->writeI64($this->announcementSeq);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 2);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contents !== null) {
      if (!is_object($this->contents)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('contents', TType::STRUCT, 3);
      $xfer += $this->contents->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Announcement {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'index',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    10 => array(
      'var' => 'forceUpdate',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    11 => array(
      'var' => 'title',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    12 => array(
      'var' => 'text',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    13 => array(
      'var' => 'createdTime',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    14 => array(
      'var' => 'pictureUrl',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    15 => array(
      'var' => 'thumbnailUrl',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var int
   */
  public $index = null;
  /**
   * @var bool
   */
  public $forceUpdate = null;
  /**
   * @var string
   */
  public $title = null;
  /**
   * @var string
   */
  public $text = null;
  /**
   * @var int
   */
  public $createdTime = null;
  /**
   * @var string
   */
  public $pictureUrl = null;
  /**
   * @var string
   */
  public $thumbnailUrl = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['index'])) {
        $this->index = $vals['index'];
      }
      if (isset($vals['forceUpdate'])) {
        $this->forceUpdate = $vals['forceUpdate'];
      }
      if (isset($vals['title'])) {
        $this->title = $vals['title'];
      }
      if (isset($vals['text'])) {
        $this->text = $vals['text'];
      }
      if (isset($vals['createdTime'])) {
        $this->createdTime = $vals['createdTime'];
      }
      if (isset($vals['pictureUrl'])) {
        $this->pictureUrl = $vals['pictureUrl'];
      }
      if (isset($vals['thumbnailUrl'])) {
        $this->thumbnailUrl = $vals['thumbnailUrl'];
      }
    }
  }

  public function getName() {
    return 'Announcement';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->index);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->forceUpdate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->title);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->text);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->createdTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pictureUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->thumbnailUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Announcement');
    if ($this->index !== null) {
      $xfer += $output->writeFieldBegin('index', TType::I32, 1);
      $xfer += $output->writeI32($this->index);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->forceUpdate !== null) {
      $xfer += $output->writeFieldBegin('forceUpdate', TType::BOOL, 10);
      $xfer += $output->writeBool($this->forceUpdate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->title !== null) {
      $xfer += $output->writeFieldBegin('title', TType::STRING, 11);
      $xfer += $output->writeString($this->title);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->text !== null) {
      $xfer += $output->writeFieldBegin('text', TType::STRING, 12);
      $xfer += $output->writeString($this->text);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createdTime !== null) {
      $xfer += $output->writeFieldBegin('createdTime', TType::I64, 13);
      $xfer += $output->writeI64($this->createdTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pictureUrl !== null) {
      $xfer += $output->writeFieldBegin('pictureUrl', TType::STRING, 14);
      $xfer += $output->writeString($this->pictureUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->thumbnailUrl !== null) {
      $xfer += $output->writeFieldBegin('thumbnailUrl', TType::STRING, 15);
      $xfer += $output->writeString($this->thumbnailUrl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ChannelProvider {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'name',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $name = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
    }
  }

  public function getName() {
    return 'ChannelProvider';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ChannelProvider');
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 1);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class E2EEPublicKey {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'version',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'keyId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    4 => array(
      'var' => 'keyData',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'createdTime',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    );

  /**
   * @var int
   */
  public $version = null;
  /**
   * @var int
   */
  public $keyId = null;
  /**
   * @var string
   */
  public $keyData = null;
  /**
   * @var int
   */
  public $createdTime = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['version'])) {
        $this->version = $vals['version'];
      }
      if (isset($vals['keyId'])) {
        $this->keyId = $vals['keyId'];
      }
      if (isset($vals['keyData'])) {
        $this->keyData = $vals['keyData'];
      }
      if (isset($vals['createdTime'])) {
        $this->createdTime = $vals['createdTime'];
      }
    }
  }

  public function getName() {
    return 'E2EEPublicKey';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->version);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->keyId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->keyData);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->createdTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('E2EEPublicKey');
    if ($this->version !== null) {
      $xfer += $output->writeFieldBegin('version', TType::I32, 1);
      $xfer += $output->writeI32($this->version);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->keyId !== null) {
      $xfer += $output->writeFieldBegin('keyId', TType::I32, 2);
      $xfer += $output->writeI32($this->keyId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->keyData !== null) {
      $xfer += $output->writeFieldBegin('keyData', TType::STRING, 4);
      $xfer += $output->writeString($this->keyData);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createdTime !== null) {
      $xfer += $output->writeFieldBegin('createdTime', TType::I64, 5);
      $xfer += $output->writeI64($this->createdTime);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ChannelDomain {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'host',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'removed',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var string
   */
  public $host = null;
  /**
   * @var bool
   */
  public $removed = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['host'])) {
        $this->host = $vals['host'];
      }
      if (isset($vals['removed'])) {
        $this->removed = $vals['removed'];
      }
    }
  }

  public function getName() {
    return 'ChannelDomain';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->host);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->removed);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ChannelDomain');
    if ($this->host !== null) {
      $xfer += $output->writeFieldBegin('host', TType::STRING, 1);
      $xfer += $output->writeString($this->host);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->removed !== null) {
      $xfer += $output->writeFieldBegin('removed', TType::BOOL, 2);
      $xfer += $output->writeBool($this->removed);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class E2EENegotiationResult {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'allowedTypes',
      'isRequired' => false,
      'type' => TType::SET,
      'etype' => TType::I32,
      'elem' => array(
        'type' => TType::I32,
        ),
      ),
    2 => array(
      'var' => 'publicKey',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\E2EEPublicKey',
      ),
    );

  /**
   * @var int[]
   */
  public $allowedTypes = null;
  /**
   * @var \E2EEPublicKey
   */
  public $publicKey = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['allowedTypes'])) {
        $this->allowedTypes = $vals['allowedTypes'];
      }
      if (isset($vals['publicKey'])) {
        $this->publicKey = $vals['publicKey'];
      }
    }
  }

  public function getName() {
    return 'E2EENegotiationResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::SET) {
            $this->allowedTypes = array();
            $_size142 = 0;
            $_etype145 = 0;
            $xfer += $input->readSetBegin($_etype145, $_size142);
            for ($_i146 = 0; $_i146 < $_size142; ++$_i146)
            {
              $elem147 = null;
              $xfer += $input->readI32($elem147);
              $this->allowedTypes[$elem147] = true;
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->publicKey = new \E2EEPublicKey();
            $xfer += $this->publicKey->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('E2EENegotiationResult');
    if ($this->allowedTypes !== null) {
      if (!is_array($this->allowedTypes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('allowedTypes', TType::SET, 1);
      {
        $output->writeSetBegin(TType::I32, count($this->allowedTypes));
        {
          foreach ($this->allowedTypes as $iter148 => $iter149)
          {
            $xfer += $output->writeI32($iter148);
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->publicKey !== null) {
      if (!is_object($this->publicKey)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('publicKey', TType::STRUCT, 2);
      $xfer += $this->publicKey->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OTPResult {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'otpId',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'otp',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $otpId = null;
  /**
   * @var string
   */
  public $otp = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['otpId'])) {
        $this->otpId = $vals['otpId'];
      }
      if (isset($vals['otp'])) {
        $this->otp = $vals['otp'];
      }
    }
  }

  public function getName() {
    return 'OTPResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->otpId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->otp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OTPResult');
    if ($this->otpId !== null) {
      $xfer += $output->writeFieldBegin('otpId', TType::STRING, 1);
      $xfer += $output->writeString($this->otpId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->otp !== null) {
      $xfer += $output->writeFieldBegin('otp', TType::STRING, 2);
      $xfer += $output->writeString($this->otp);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Square {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'mid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'name',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'welcomeMessage',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'profileImageObsHash',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'desc',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'searchable',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    7 => array(
      'var' => 'type',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    8 => array(
      'var' => 'categoryID',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    9 => array(
      'var' => 'invitationURL',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    10 => array(
      'var' => 'revision',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    11 => array(
      'var' => 'ableToUseInvitationTicket',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    12 => array(
      'var' => 'state',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var string
   */
  public $mid = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var string
   */
  public $welcomeMessage = null;
  /**
   * @var string
   */
  public $profileImageObsHash = null;
  /**
   * @var string
   */
  public $desc = null;
  /**
   * @var bool
   */
  public $searchable = null;
  /**
   * @var int
   */
  public $type = null;
  /**
   * @var int
   */
  public $categoryID = null;
  /**
   * @var string
   */
  public $invitationURL = null;
  /**
   * @var int
   */
  public $revision = null;
  /**
   * @var bool
   */
  public $ableToUseInvitationTicket = null;
  /**
   * @var int
   */
  public $state = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['mid'])) {
        $this->mid = $vals['mid'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['welcomeMessage'])) {
        $this->welcomeMessage = $vals['welcomeMessage'];
      }
      if (isset($vals['profileImageObsHash'])) {
        $this->profileImageObsHash = $vals['profileImageObsHash'];
      }
      if (isset($vals['desc'])) {
        $this->desc = $vals['desc'];
      }
      if (isset($vals['searchable'])) {
        $this->searchable = $vals['searchable'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['categoryID'])) {
        $this->categoryID = $vals['categoryID'];
      }
      if (isset($vals['invitationURL'])) {
        $this->invitationURL = $vals['invitationURL'];
      }
      if (isset($vals['revision'])) {
        $this->revision = $vals['revision'];
      }
      if (isset($vals['ableToUseInvitationTicket'])) {
        $this->ableToUseInvitationTicket = $vals['ableToUseInvitationTicket'];
      }
      if (isset($vals['state'])) {
        $this->state = $vals['state'];
      }
    }
  }

  public function getName() {
    return 'Square';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->welcomeMessage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->profileImageObsHash);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->desc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->searchable);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->categoryID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->invitationURL);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->revision);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->ableToUseInvitationTicket);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->state);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Square');
    if ($this->mid !== null) {
      $xfer += $output->writeFieldBegin('mid', TType::STRING, 1);
      $xfer += $output->writeString($this->mid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->welcomeMessage !== null) {
      $xfer += $output->writeFieldBegin('welcomeMessage', TType::STRING, 3);
      $xfer += $output->writeString($this->welcomeMessage);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->profileImageObsHash !== null) {
      $xfer += $output->writeFieldBegin('profileImageObsHash', TType::STRING, 4);
      $xfer += $output->writeString($this->profileImageObsHash);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->desc !== null) {
      $xfer += $output->writeFieldBegin('desc', TType::STRING, 5);
      $xfer += $output->writeString($this->desc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->searchable !== null) {
      $xfer += $output->writeFieldBegin('searchable', TType::BOOL, 6);
      $xfer += $output->writeBool($this->searchable);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 7);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->categoryID !== null) {
      $xfer += $output->writeFieldBegin('categoryID', TType::I32, 8);
      $xfer += $output->writeI32($this->categoryID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->invitationURL !== null) {
      $xfer += $output->writeFieldBegin('invitationURL', TType::STRING, 9);
      $xfer += $output->writeString($this->invitationURL);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->revision !== null) {
      $xfer += $output->writeFieldBegin('revision', TType::I64, 10);
      $xfer += $output->writeI64($this->revision);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ableToUseInvitationTicket !== null) {
      $xfer += $output->writeFieldBegin('ableToUseInvitationTicket', TType::BOOL, 11);
      $xfer += $output->writeBool($this->ableToUseInvitationTicket);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->state !== null) {
      $xfer += $output->writeFieldBegin('state', TType::I32, 12);
      $xfer += $output->writeI32($this->state);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareAuthority {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'squareMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'updateSquareProfile',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    3 => array(
      'var' => 'inviteNewMember',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    4 => array(
      'var' => 'approveJoinRequest',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    5 => array(
      'var' => 'createPost',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    6 => array(
      'var' => 'createOpenSquareChat',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    7 => array(
      'var' => 'deleteSquareChatOrPost',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    8 => array(
      'var' => 'removeSquareMember',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    9 => array(
      'var' => 'grantRole',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    10 => array(
      'var' => 'enableInvitationTicket',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    11 => array(
      'var' => 'revision',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    );

  /**
   * @var string
   */
  public $squareMid = null;
  /**
   * @var int
   */
  public $updateSquareProfile = null;
  /**
   * @var int
   */
  public $inviteNewMember = null;
  /**
   * @var int
   */
  public $approveJoinRequest = null;
  /**
   * @var int
   */
  public $createPost = null;
  /**
   * @var int
   */
  public $createOpenSquareChat = null;
  /**
   * @var int
   */
  public $deleteSquareChatOrPost = null;
  /**
   * @var int
   */
  public $removeSquareMember = null;
  /**
   * @var int
   */
  public $grantRole = null;
  /**
   * @var int
   */
  public $enableInvitationTicket = null;
  /**
   * @var int
   */
  public $revision = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['squareMid'])) {
        $this->squareMid = $vals['squareMid'];
      }
      if (isset($vals['updateSquareProfile'])) {
        $this->updateSquareProfile = $vals['updateSquareProfile'];
      }
      if (isset($vals['inviteNewMember'])) {
        $this->inviteNewMember = $vals['inviteNewMember'];
      }
      if (isset($vals['approveJoinRequest'])) {
        $this->approveJoinRequest = $vals['approveJoinRequest'];
      }
      if (isset($vals['createPost'])) {
        $this->createPost = $vals['createPost'];
      }
      if (isset($vals['createOpenSquareChat'])) {
        $this->createOpenSquareChat = $vals['createOpenSquareChat'];
      }
      if (isset($vals['deleteSquareChatOrPost'])) {
        $this->deleteSquareChatOrPost = $vals['deleteSquareChatOrPost'];
      }
      if (isset($vals['removeSquareMember'])) {
        $this->removeSquareMember = $vals['removeSquareMember'];
      }
      if (isset($vals['grantRole'])) {
        $this->grantRole = $vals['grantRole'];
      }
      if (isset($vals['enableInvitationTicket'])) {
        $this->enableInvitationTicket = $vals['enableInvitationTicket'];
      }
      if (isset($vals['revision'])) {
        $this->revision = $vals['revision'];
      }
    }
  }

  public function getName() {
    return 'SquareAuthority';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->updateSquareProfile);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->inviteNewMember);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->approveJoinRequest);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->createPost);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->createOpenSquareChat);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->deleteSquareChatOrPost);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->removeSquareMember);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->grantRole);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->enableInvitationTicket);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->revision);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareAuthority');
    if ($this->squareMid !== null) {
      $xfer += $output->writeFieldBegin('squareMid', TType::STRING, 1);
      $xfer += $output->writeString($this->squareMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->updateSquareProfile !== null) {
      $xfer += $output->writeFieldBegin('updateSquareProfile', TType::I32, 2);
      $xfer += $output->writeI32($this->updateSquareProfile);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->inviteNewMember !== null) {
      $xfer += $output->writeFieldBegin('inviteNewMember', TType::I32, 3);
      $xfer += $output->writeI32($this->inviteNewMember);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->approveJoinRequest !== null) {
      $xfer += $output->writeFieldBegin('approveJoinRequest', TType::I32, 4);
      $xfer += $output->writeI32($this->approveJoinRequest);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createPost !== null) {
      $xfer += $output->writeFieldBegin('createPost', TType::I32, 5);
      $xfer += $output->writeI32($this->createPost);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createOpenSquareChat !== null) {
      $xfer += $output->writeFieldBegin('createOpenSquareChat', TType::I32, 6);
      $xfer += $output->writeI32($this->createOpenSquareChat);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deleteSquareChatOrPost !== null) {
      $xfer += $output->writeFieldBegin('deleteSquareChatOrPost', TType::I32, 7);
      $xfer += $output->writeI32($this->deleteSquareChatOrPost);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->removeSquareMember !== null) {
      $xfer += $output->writeFieldBegin('removeSquareMember', TType::I32, 8);
      $xfer += $output->writeI32($this->removeSquareMember);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->grantRole !== null) {
      $xfer += $output->writeFieldBegin('grantRole', TType::I32, 9);
      $xfer += $output->writeI32($this->grantRole);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->enableInvitationTicket !== null) {
      $xfer += $output->writeFieldBegin('enableInvitationTicket', TType::I32, 10);
      $xfer += $output->writeI32($this->enableInvitationTicket);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->revision !== null) {
      $xfer += $output->writeFieldBegin('revision', TType::I64, 11);
      $xfer += $output->writeI64($this->revision);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquarePreference {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'favoriteTimestamp',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    2 => array(
      'var' => 'notiForNewJoinRequest',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var int
   */
  public $favoriteTimestamp = null;
  /**
   * @var bool
   */
  public $notiForNewJoinRequest = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['favoriteTimestamp'])) {
        $this->favoriteTimestamp = $vals['favoriteTimestamp'];
      }
      if (isset($vals['notiForNewJoinRequest'])) {
        $this->notiForNewJoinRequest = $vals['notiForNewJoinRequest'];
      }
    }
  }

  public function getName() {
    return 'SquarePreference';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->favoriteTimestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->notiForNewJoinRequest);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquarePreference');
    if ($this->favoriteTimestamp !== null) {
      $xfer += $output->writeFieldBegin('favoriteTimestamp', TType::I64, 1);
      $xfer += $output->writeI64($this->favoriteTimestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notiForNewJoinRequest !== null) {
      $xfer += $output->writeFieldBegin('notiForNewJoinRequest', TType::BOOL, 2);
      $xfer += $output->writeBool($this->notiForNewJoinRequest);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareMember {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'squareMemberMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'squareMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'displayName',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'profileImageObsHash',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'ableToReceiveMessage',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    7 => array(
      'var' => 'membershipState',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    8 => array(
      'var' => 'role',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    9 => array(
      'var' => 'revision',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    10 => array(
      'var' => 'preference',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquarePreference',
      ),
    11 => array(
      'var' => 'joinMessage',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $squareMemberMid = null;
  /**
   * @var string
   */
  public $squareMid = null;
  /**
   * @var string
   */
  public $displayName = null;
  /**
   * @var string
   */
  public $profileImageObsHash = null;
  /**
   * @var bool
   */
  public $ableToReceiveMessage = null;
  /**
   * @var int
   */
  public $membershipState = null;
  /**
   * @var int
   */
  public $role = null;
  /**
   * @var int
   */
  public $revision = null;
  /**
   * @var \SquarePreference
   */
  public $preference = null;
  /**
   * @var string
   */
  public $joinMessage = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['squareMemberMid'])) {
        $this->squareMemberMid = $vals['squareMemberMid'];
      }
      if (isset($vals['squareMid'])) {
        $this->squareMid = $vals['squareMid'];
      }
      if (isset($vals['displayName'])) {
        $this->displayName = $vals['displayName'];
      }
      if (isset($vals['profileImageObsHash'])) {
        $this->profileImageObsHash = $vals['profileImageObsHash'];
      }
      if (isset($vals['ableToReceiveMessage'])) {
        $this->ableToReceiveMessage = $vals['ableToReceiveMessage'];
      }
      if (isset($vals['membershipState'])) {
        $this->membershipState = $vals['membershipState'];
      }
      if (isset($vals['role'])) {
        $this->role = $vals['role'];
      }
      if (isset($vals['revision'])) {
        $this->revision = $vals['revision'];
      }
      if (isset($vals['preference'])) {
        $this->preference = $vals['preference'];
      }
      if (isset($vals['joinMessage'])) {
        $this->joinMessage = $vals['joinMessage'];
      }
    }
  }

  public function getName() {
    return 'SquareMember';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareMemberMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->displayName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->profileImageObsHash);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->ableToReceiveMessage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->membershipState);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->role);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->revision);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRUCT) {
            $this->preference = new \SquarePreference();
            $xfer += $this->preference->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->joinMessage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareMember');
    if ($this->squareMemberMid !== null) {
      $xfer += $output->writeFieldBegin('squareMemberMid', TType::STRING, 1);
      $xfer += $output->writeString($this->squareMemberMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareMid !== null) {
      $xfer += $output->writeFieldBegin('squareMid', TType::STRING, 2);
      $xfer += $output->writeString($this->squareMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->displayName !== null) {
      $xfer += $output->writeFieldBegin('displayName', TType::STRING, 3);
      $xfer += $output->writeString($this->displayName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->profileImageObsHash !== null) {
      $xfer += $output->writeFieldBegin('profileImageObsHash', TType::STRING, 4);
      $xfer += $output->writeString($this->profileImageObsHash);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ableToReceiveMessage !== null) {
      $xfer += $output->writeFieldBegin('ableToReceiveMessage', TType::BOOL, 5);
      $xfer += $output->writeBool($this->ableToReceiveMessage);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->membershipState !== null) {
      $xfer += $output->writeFieldBegin('membershipState', TType::I32, 7);
      $xfer += $output->writeI32($this->membershipState);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->role !== null) {
      $xfer += $output->writeFieldBegin('role', TType::I32, 8);
      $xfer += $output->writeI32($this->role);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->revision !== null) {
      $xfer += $output->writeFieldBegin('revision', TType::I64, 9);
      $xfer += $output->writeI64($this->revision);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->preference !== null) {
      if (!is_object($this->preference)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('preference', TType::STRUCT, 10);
      $xfer += $this->preference->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->joinMessage !== null) {
      $xfer += $output->writeFieldBegin('joinMessage', TType::STRING, 11);
      $xfer += $output->writeString($this->joinMessage);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareMemberRelation {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'state',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'revision',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    );

  /**
   * @var int
   */
  public $state = null;
  /**
   * @var int
   */
  public $revision = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['state'])) {
        $this->state = $vals['state'];
      }
      if (isset($vals['revision'])) {
        $this->revision = $vals['revision'];
      }
    }
  }

  public function getName() {
    return 'SquareMemberRelation';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->state);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->revision);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareMemberRelation');
    if ($this->state !== null) {
      $xfer += $output->writeFieldBegin('state', TType::I32, 1);
      $xfer += $output->writeI32($this->state);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->revision !== null) {
      $xfer += $output->writeFieldBegin('revision', TType::I64, 2);
      $xfer += $output->writeI64($this->revision);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareFeature {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'controlState',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'booleanValue',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $controlState = null;
  /**
   * @var int
   */
  public $booleanValue = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['controlState'])) {
        $this->controlState = $vals['controlState'];
      }
      if (isset($vals['booleanValue'])) {
        $this->booleanValue = $vals['booleanValue'];
      }
    }
  }

  public function getName() {
    return 'SquareFeature';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->controlState);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->booleanValue);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareFeature');
    if ($this->controlState !== null) {
      $xfer += $output->writeFieldBegin('controlState', TType::I32, 1);
      $xfer += $output->writeI32($this->controlState);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->booleanValue !== null) {
      $xfer += $output->writeFieldBegin('booleanValue', TType::I32, 2);
      $xfer += $output->writeI32($this->booleanValue);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareFeatureSet {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'squareMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'revision',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    11 => array(
      'var' => 'creatingSecretSquareChat',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareFeature',
      ),
    12 => array(
      'var' => 'invitingIntoOpenSquareChat',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareFeature',
      ),
    );

  /**
   * @var string
   */
  public $squareMid = null;
  /**
   * @var int
   */
  public $revision = null;
  /**
   * @var \SquareFeature
   */
  public $creatingSecretSquareChat = null;
  /**
   * @var \SquareFeature
   */
  public $invitingIntoOpenSquareChat = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['squareMid'])) {
        $this->squareMid = $vals['squareMid'];
      }
      if (isset($vals['revision'])) {
        $this->revision = $vals['revision'];
      }
      if (isset($vals['creatingSecretSquareChat'])) {
        $this->creatingSecretSquareChat = $vals['creatingSecretSquareChat'];
      }
      if (isset($vals['invitingIntoOpenSquareChat'])) {
        $this->invitingIntoOpenSquareChat = $vals['invitingIntoOpenSquareChat'];
      }
    }
  }

  public function getName() {
    return 'SquareFeatureSet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->revision);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRUCT) {
            $this->creatingSecretSquareChat = new \SquareFeature();
            $xfer += $this->creatingSecretSquareChat->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRUCT) {
            $this->invitingIntoOpenSquareChat = new \SquareFeature();
            $xfer += $this->invitingIntoOpenSquareChat->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareFeatureSet');
    if ($this->squareMid !== null) {
      $xfer += $output->writeFieldBegin('squareMid', TType::STRING, 1);
      $xfer += $output->writeString($this->squareMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->revision !== null) {
      $xfer += $output->writeFieldBegin('revision', TType::I64, 2);
      $xfer += $output->writeI64($this->revision);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creatingSecretSquareChat !== null) {
      if (!is_object($this->creatingSecretSquareChat)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creatingSecretSquareChat', TType::STRUCT, 11);
      $xfer += $this->creatingSecretSquareChat->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->invitingIntoOpenSquareChat !== null) {
      if (!is_object($this->invitingIntoOpenSquareChat)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('invitingIntoOpenSquareChat', TType::STRUCT, 12);
      $xfer += $this->invitingIntoOpenSquareChat->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareStatus {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'memberCount',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'joinRequestCount',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    3 => array(
      'var' => 'lastJoinRequestAt',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    4 => array(
      'var' => 'openChatCount',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $memberCount = null;
  /**
   * @var int
   */
  public $joinRequestCount = null;
  /**
   * @var int
   */
  public $lastJoinRequestAt = null;
  /**
   * @var int
   */
  public $openChatCount = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['memberCount'])) {
        $this->memberCount = $vals['memberCount'];
      }
      if (isset($vals['joinRequestCount'])) {
        $this->joinRequestCount = $vals['joinRequestCount'];
      }
      if (isset($vals['lastJoinRequestAt'])) {
        $this->lastJoinRequestAt = $vals['lastJoinRequestAt'];
      }
      if (isset($vals['openChatCount'])) {
        $this->openChatCount = $vals['openChatCount'];
      }
    }
  }

  public function getName() {
    return 'SquareStatus';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->memberCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->joinRequestCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->lastJoinRequestAt);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->openChatCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareStatus');
    if ($this->memberCount !== null) {
      $xfer += $output->writeFieldBegin('memberCount', TType::I32, 1);
      $xfer += $output->writeI32($this->memberCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->joinRequestCount !== null) {
      $xfer += $output->writeFieldBegin('joinRequestCount', TType::I32, 2);
      $xfer += $output->writeI32($this->joinRequestCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lastJoinRequestAt !== null) {
      $xfer += $output->writeFieldBegin('lastJoinRequestAt', TType::I64, 3);
      $xfer += $output->writeI64($this->lastJoinRequestAt);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->openChatCount !== null) {
      $xfer += $output->writeFieldBegin('openChatCount', TType::I32, 4);
      $xfer += $output->writeI32($this->openChatCount);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareChat {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'squareChatMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'squareMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'type',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    4 => array(
      'var' => 'name',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'chatImageObsHash',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'squareChatRevision',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    7 => array(
      'var' => 'maxMemberCount',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    8 => array(
      'var' => 'state',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var string
   */
  public $squareChatMid = null;
  /**
   * @var string
   */
  public $squareMid = null;
  /**
   * @var int
   */
  public $type = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var string
   */
  public $chatImageObsHash = null;
  /**
   * @var int
   */
  public $squareChatRevision = null;
  /**
   * @var int
   */
  public $maxMemberCount = null;
  /**
   * @var int
   */
  public $state = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['squareChatMid'])) {
        $this->squareChatMid = $vals['squareChatMid'];
      }
      if (isset($vals['squareMid'])) {
        $this->squareMid = $vals['squareMid'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['chatImageObsHash'])) {
        $this->chatImageObsHash = $vals['chatImageObsHash'];
      }
      if (isset($vals['squareChatRevision'])) {
        $this->squareChatRevision = $vals['squareChatRevision'];
      }
      if (isset($vals['maxMemberCount'])) {
        $this->maxMemberCount = $vals['maxMemberCount'];
      }
      if (isset($vals['state'])) {
        $this->state = $vals['state'];
      }
    }
  }

  public function getName() {
    return 'SquareChat';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareChatMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->chatImageObsHash);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->squareChatRevision);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->maxMemberCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->state);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareChat');
    if ($this->squareChatMid !== null) {
      $xfer += $output->writeFieldBegin('squareChatMid', TType::STRING, 1);
      $xfer += $output->writeString($this->squareChatMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareMid !== null) {
      $xfer += $output->writeFieldBegin('squareMid', TType::STRING, 2);
      $xfer += $output->writeString($this->squareMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 3);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 4);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->chatImageObsHash !== null) {
      $xfer += $output->writeFieldBegin('chatImageObsHash', TType::STRING, 5);
      $xfer += $output->writeString($this->chatImageObsHash);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareChatRevision !== null) {
      $xfer += $output->writeFieldBegin('squareChatRevision', TType::I64, 6);
      $xfer += $output->writeI64($this->squareChatRevision);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->maxMemberCount !== null) {
      $xfer += $output->writeFieldBegin('maxMemberCount', TType::I32, 7);
      $xfer += $output->writeI32($this->maxMemberCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->state !== null) {
      $xfer += $output->writeFieldBegin('state', TType::I32, 8);
      $xfer += $output->writeI32($this->state);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class NoteStatus {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'noteCount',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'latestCreatedAt',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    );

  /**
   * @var int
   */
  public $noteCount = null;
  /**
   * @var int
   */
  public $latestCreatedAt = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['noteCount'])) {
        $this->noteCount = $vals['noteCount'];
      }
      if (isset($vals['latestCreatedAt'])) {
        $this->latestCreatedAt = $vals['latestCreatedAt'];
      }
    }
  }

  public function getName() {
    return 'NoteStatus';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->noteCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->latestCreatedAt);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('NoteStatus');
    if ($this->noteCount !== null) {
      $xfer += $output->writeFieldBegin('noteCount', TType::I32, 1);
      $xfer += $output->writeI32($this->noteCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->latestCreatedAt !== null) {
      $xfer += $output->writeFieldBegin('latestCreatedAt', TType::I64, 2);
      $xfer += $output->writeI64($this->latestCreatedAt);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareInfo {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'square',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Square',
      ),
    2 => array(
      'var' => 'squareStatus',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareStatus',
      ),
    3 => array(
      'var' => 'squareNoteStatus',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\NoteStatus',
      ),
    );

  /**
   * @var \Square
   */
  public $square = null;
  /**
   * @var \SquareStatus
   */
  public $squareStatus = null;
  /**
   * @var \NoteStatus
   */
  public $squareNoteStatus = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['square'])) {
        $this->square = $vals['square'];
      }
      if (isset($vals['squareStatus'])) {
        $this->squareStatus = $vals['squareStatus'];
      }
      if (isset($vals['squareNoteStatus'])) {
        $this->squareNoteStatus = $vals['squareNoteStatus'];
      }
    }
  }

  public function getName() {
    return 'SquareInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->square = new \Square();
            $xfer += $this->square->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->squareStatus = new \SquareStatus();
            $xfer += $this->squareStatus->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->squareNoteStatus = new \NoteStatus();
            $xfer += $this->squareNoteStatus->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareInfo');
    if ($this->square !== null) {
      if (!is_object($this->square)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('square', TType::STRUCT, 1);
      $xfer += $this->square->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareStatus !== null) {
      if (!is_object($this->squareStatus)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squareStatus', TType::STRUCT, 2);
      $xfer += $this->squareStatus->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareNoteStatus !== null) {
      if (!is_object($this->squareNoteStatus)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squareNoteStatus', TType::STRUCT, 3);
      $xfer += $this->squareNoteStatus->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BotUseInfo {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'botUseAgreementAccepted',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    2 => array(
      'var' => 'botInFriends',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    3 => array(
      'var' => 'primaryApplication',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'locale',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var bool
   */
  public $botUseAgreementAccepted = null;
  /**
   * @var bool
   */
  public $botInFriends = null;
  /**
   * @var string
   */
  public $primaryApplication = null;
  /**
   * @var string
   */
  public $locale = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['botUseAgreementAccepted'])) {
        $this->botUseAgreementAccepted = $vals['botUseAgreementAccepted'];
      }
      if (isset($vals['botInFriends'])) {
        $this->botInFriends = $vals['botInFriends'];
      }
      if (isset($vals['primaryApplication'])) {
        $this->primaryApplication = $vals['primaryApplication'];
      }
      if (isset($vals['locale'])) {
        $this->locale = $vals['locale'];
      }
    }
  }

  public function getName() {
    return 'BotUseInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->botUseAgreementAccepted);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->botInFriends);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->primaryApplication);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->locale);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BotUseInfo');
    if ($this->botUseAgreementAccepted !== null) {
      $xfer += $output->writeFieldBegin('botUseAgreementAccepted', TType::BOOL, 1);
      $xfer += $output->writeBool($this->botUseAgreementAccepted);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->botInFriends !== null) {
      $xfer += $output->writeFieldBegin('botInFriends', TType::BOOL, 2);
      $xfer += $output->writeBool($this->botInFriends);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->primaryApplication !== null) {
      $xfer += $output->writeFieldBegin('primaryApplication', TType::STRING, 3);
      $xfer += $output->writeString($this->primaryApplication);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->locale !== null) {
      $xfer += $output->writeFieldBegin('locale', TType::STRING, 4);
      $xfer += $output->writeString($this->locale);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PaidCallAdCountry {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'countryCode',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'rateDivision',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $countryCode = null;
  /**
   * @var string
   */
  public $rateDivision = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['countryCode'])) {
        $this->countryCode = $vals['countryCode'];
      }
      if (isset($vals['rateDivision'])) {
        $this->rateDivision = $vals['rateDivision'];
      }
    }
  }

  public function getName() {
    return 'PaidCallAdCountry';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->countryCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->rateDivision);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PaidCallAdCountry');
    if ($this->countryCode !== null) {
      $xfer += $output->writeFieldBegin('countryCode', TType::STRING, 1);
      $xfer += $output->writeString($this->countryCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rateDivision !== null) {
      $xfer += $output->writeFieldBegin('rateDivision', TType::STRING, 2);
      $xfer += $output->writeString($this->rateDivision);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PaidCallAdResult {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'adRemains',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $adRemains = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['adRemains'])) {
        $this->adRemains = $vals['adRemains'];
      }
    }
  }

  public function getName() {
    return 'PaidCallAdResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->adRemains);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PaidCallAdResult');
    if ($this->adRemains !== null) {
      $xfer += $output->writeFieldBegin('adRemains', TType::I32, 1);
      $xfer += $output->writeI32($this->adRemains);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PaidCallBalance {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'productType',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'productName',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'unit',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'limitedPaidBalance',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    5 => array(
      'var' => 'limitedFreeBalance',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    6 => array(
      'var' => 'unlimitedPaidBalance',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    7 => array(
      'var' => 'unlimitedFreeBalance',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    8 => array(
      'var' => 'startTime',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    9 => array(
      'var' => 'endTime',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    10 => array(
      'var' => 'autopayEnabled',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var int
   */
  public $productType = null;
  /**
   * @var string
   */
  public $productName = null;
  /**
   * @var string
   */
  public $unit = null;
  /**
   * @var int
   */
  public $limitedPaidBalance = null;
  /**
   * @var int
   */
  public $limitedFreeBalance = null;
  /**
   * @var int
   */
  public $unlimitedPaidBalance = null;
  /**
   * @var int
   */
  public $unlimitedFreeBalance = null;
  /**
   * @var int
   */
  public $startTime = null;
  /**
   * @var int
   */
  public $endTime = null;
  /**
   * @var bool
   */
  public $autopayEnabled = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['productType'])) {
        $this->productType = $vals['productType'];
      }
      if (isset($vals['productName'])) {
        $this->productName = $vals['productName'];
      }
      if (isset($vals['unit'])) {
        $this->unit = $vals['unit'];
      }
      if (isset($vals['limitedPaidBalance'])) {
        $this->limitedPaidBalance = $vals['limitedPaidBalance'];
      }
      if (isset($vals['limitedFreeBalance'])) {
        $this->limitedFreeBalance = $vals['limitedFreeBalance'];
      }
      if (isset($vals['unlimitedPaidBalance'])) {
        $this->unlimitedPaidBalance = $vals['unlimitedPaidBalance'];
      }
      if (isset($vals['unlimitedFreeBalance'])) {
        $this->unlimitedFreeBalance = $vals['unlimitedFreeBalance'];
      }
      if (isset($vals['startTime'])) {
        $this->startTime = $vals['startTime'];
      }
      if (isset($vals['endTime'])) {
        $this->endTime = $vals['endTime'];
      }
      if (isset($vals['autopayEnabled'])) {
        $this->autopayEnabled = $vals['autopayEnabled'];
      }
    }
  }

  public function getName() {
    return 'PaidCallBalance';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->productType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->productName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->unit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->limitedPaidBalance);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->limitedFreeBalance);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->unlimitedPaidBalance);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->unlimitedFreeBalance);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->startTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->endTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->autopayEnabled);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PaidCallBalance');
    if ($this->productType !== null) {
      $xfer += $output->writeFieldBegin('productType', TType::I32, 1);
      $xfer += $output->writeI32($this->productType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->productName !== null) {
      $xfer += $output->writeFieldBegin('productName', TType::STRING, 2);
      $xfer += $output->writeString($this->productName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->unit !== null) {
      $xfer += $output->writeFieldBegin('unit', TType::STRING, 3);
      $xfer += $output->writeString($this->unit);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->limitedPaidBalance !== null) {
      $xfer += $output->writeFieldBegin('limitedPaidBalance', TType::I32, 4);
      $xfer += $output->writeI32($this->limitedPaidBalance);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->limitedFreeBalance !== null) {
      $xfer += $output->writeFieldBegin('limitedFreeBalance', TType::I32, 5);
      $xfer += $output->writeI32($this->limitedFreeBalance);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->unlimitedPaidBalance !== null) {
      $xfer += $output->writeFieldBegin('unlimitedPaidBalance', TType::I32, 6);
      $xfer += $output->writeI32($this->unlimitedPaidBalance);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->unlimitedFreeBalance !== null) {
      $xfer += $output->writeFieldBegin('unlimitedFreeBalance', TType::I32, 7);
      $xfer += $output->writeI32($this->unlimitedFreeBalance);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->startTime !== null) {
      $xfer += $output->writeFieldBegin('startTime', TType::I64, 8);
      $xfer += $output->writeI64($this->startTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->endTime !== null) {
      $xfer += $output->writeFieldBegin('endTime', TType::I64, 9);
      $xfer += $output->writeI64($this->endTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->autopayEnabled !== null) {
      $xfer += $output->writeFieldBegin('autopayEnabled', TType::BOOL, 10);
      $xfer += $output->writeBool($this->autopayEnabled);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PaidCallCurrencyExchangeRate {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'currencyCode',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'currencyName',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'currencySign',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'preferred',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    5 => array(
      'var' => 'coinRate',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'creditRate',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $currencyCode = null;
  /**
   * @var string
   */
  public $currencyName = null;
  /**
   * @var string
   */
  public $currencySign = null;
  /**
   * @var bool
   */
  public $preferred = null;
  /**
   * @var string
   */
  public $coinRate = null;
  /**
   * @var string
   */
  public $creditRate = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['currencyCode'])) {
        $this->currencyCode = $vals['currencyCode'];
      }
      if (isset($vals['currencyName'])) {
        $this->currencyName = $vals['currencyName'];
      }
      if (isset($vals['currencySign'])) {
        $this->currencySign = $vals['currencySign'];
      }
      if (isset($vals['preferred'])) {
        $this->preferred = $vals['preferred'];
      }
      if (isset($vals['coinRate'])) {
        $this->coinRate = $vals['coinRate'];
      }
      if (isset($vals['creditRate'])) {
        $this->creditRate = $vals['creditRate'];
      }
    }
  }

  public function getName() {
    return 'PaidCallCurrencyExchangeRate';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->currencyCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->currencyName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->currencySign);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->preferred);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->coinRate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->creditRate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PaidCallCurrencyExchangeRate');
    if ($this->currencyCode !== null) {
      $xfer += $output->writeFieldBegin('currencyCode', TType::STRING, 1);
      $xfer += $output->writeString($this->currencyCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->currencyName !== null) {
      $xfer += $output->writeFieldBegin('currencyName', TType::STRING, 2);
      $xfer += $output->writeString($this->currencyName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->currencySign !== null) {
      $xfer += $output->writeFieldBegin('currencySign', TType::STRING, 3);
      $xfer += $output->writeString($this->currencySign);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->preferred !== null) {
      $xfer += $output->writeFieldBegin('preferred', TType::BOOL, 4);
      $xfer += $output->writeBool($this->preferred);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->coinRate !== null) {
      $xfer += $output->writeFieldBegin('coinRate', TType::STRING, 5);
      $xfer += $output->writeString($this->coinRate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creditRate !== null) {
      $xfer += $output->writeFieldBegin('creditRate', TType::STRING, 6);
      $xfer += $output->writeString($this->creditRate);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ExtendedProfileBirthday {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'year',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'yearPrivacyLevelType',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    3 => array(
      'var' => 'yearEnabled',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    5 => array(
      'var' => 'day',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'dayPrivacyLevelType',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    7 => array(
      'var' => 'dayEnabled',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var string
   */
  public $year = null;
  /**
   * @var int
   */
  public $yearPrivacyLevelType = null;
  /**
   * @var bool
   */
  public $yearEnabled = null;
  /**
   * @var string
   */
  public $day = null;
  /**
   * @var int
   */
  public $dayPrivacyLevelType = null;
  /**
   * @var bool
   */
  public $dayEnabled = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['year'])) {
        $this->year = $vals['year'];
      }
      if (isset($vals['yearPrivacyLevelType'])) {
        $this->yearPrivacyLevelType = $vals['yearPrivacyLevelType'];
      }
      if (isset($vals['yearEnabled'])) {
        $this->yearEnabled = $vals['yearEnabled'];
      }
      if (isset($vals['day'])) {
        $this->day = $vals['day'];
      }
      if (isset($vals['dayPrivacyLevelType'])) {
        $this->dayPrivacyLevelType = $vals['dayPrivacyLevelType'];
      }
      if (isset($vals['dayEnabled'])) {
        $this->dayEnabled = $vals['dayEnabled'];
      }
    }
  }

  public function getName() {
    return 'ExtendedProfileBirthday';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->year);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->yearPrivacyLevelType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->yearEnabled);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->day);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->dayPrivacyLevelType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->dayEnabled);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ExtendedProfileBirthday');
    if ($this->year !== null) {
      $xfer += $output->writeFieldBegin('year', TType::STRING, 1);
      $xfer += $output->writeString($this->year);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->yearPrivacyLevelType !== null) {
      $xfer += $output->writeFieldBegin('yearPrivacyLevelType', TType::I32, 2);
      $xfer += $output->writeI32($this->yearPrivacyLevelType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->yearEnabled !== null) {
      $xfer += $output->writeFieldBegin('yearEnabled', TType::BOOL, 3);
      $xfer += $output->writeBool($this->yearEnabled);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->day !== null) {
      $xfer += $output->writeFieldBegin('day', TType::STRING, 5);
      $xfer += $output->writeString($this->day);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dayPrivacyLevelType !== null) {
      $xfer += $output->writeFieldBegin('dayPrivacyLevelType', TType::I32, 6);
      $xfer += $output->writeI32($this->dayPrivacyLevelType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dayEnabled !== null) {
      $xfer += $output->writeFieldBegin('dayEnabled', TType::BOOL, 7);
      $xfer += $output->writeBool($this->dayEnabled);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ExtendedProfile {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'birthday',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\ExtendedProfileBirthday',
      ),
    );

  /**
   * @var \ExtendedProfileBirthday
   */
  public $birthday = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['birthday'])) {
        $this->birthday = $vals['birthday'];
      }
    }
  }

  public function getName() {
    return 'ExtendedProfile';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->birthday = new \ExtendedProfileBirthday();
            $xfer += $this->birthday->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ExtendedProfile');
    if ($this->birthday !== null) {
      if (!is_object($this->birthday)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('birthday', TType::STRUCT, 1);
      $xfer += $this->birthday->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PaidCallDialing {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'type',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'dialedNumber',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'serviceDomain',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'productType',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    5 => array(
      'var' => 'productName',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'multipleProduct',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    7 => array(
      'var' => 'callerIdStatus',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    10 => array(
      'var' => 'balance',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    11 => array(
      'var' => 'unit',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    12 => array(
      'var' => 'rate',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    13 => array(
      'var' => 'displayCode',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    14 => array(
      'var' => 'calledNumber',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    15 => array(
      'var' => 'calleeNationalNumber',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    16 => array(
      'var' => 'calleeCallingCode',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    17 => array(
      'var' => 'rateDivision',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    20 => array(
      'var' => 'adMaxMin',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    21 => array(
      'var' => 'adRemains',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    22 => array(
      'var' => 'adSessionId',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var int
   */
  public $type = null;
  /**
   * @var string
   */
  public $dialedNumber = null;
  /**
   * @var string
   */
  public $serviceDomain = null;
  /**
   * @var int
   */
  public $productType = null;
  /**
   * @var string
   */
  public $productName = null;
  /**
   * @var bool
   */
  public $multipleProduct = null;
  /**
   * @var int
   */
  public $callerIdStatus = null;
  /**
   * @var int
   */
  public $balance = null;
  /**
   * @var string
   */
  public $unit = null;
  /**
   * @var int
   */
  public $rate = null;
  /**
   * @var string
   */
  public $displayCode = null;
  /**
   * @var string
   */
  public $calledNumber = null;
  /**
   * @var string
   */
  public $calleeNationalNumber = null;
  /**
   * @var string
   */
  public $calleeCallingCode = null;
  /**
   * @var string
   */
  public $rateDivision = null;
  /**
   * @var int
   */
  public $adMaxMin = null;
  /**
   * @var int
   */
  public $adRemains = null;
  /**
   * @var string
   */
  public $adSessionId = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['dialedNumber'])) {
        $this->dialedNumber = $vals['dialedNumber'];
      }
      if (isset($vals['serviceDomain'])) {
        $this->serviceDomain = $vals['serviceDomain'];
      }
      if (isset($vals['productType'])) {
        $this->productType = $vals['productType'];
      }
      if (isset($vals['productName'])) {
        $this->productName = $vals['productName'];
      }
      if (isset($vals['multipleProduct'])) {
        $this->multipleProduct = $vals['multipleProduct'];
      }
      if (isset($vals['callerIdStatus'])) {
        $this->callerIdStatus = $vals['callerIdStatus'];
      }
      if (isset($vals['balance'])) {
        $this->balance = $vals['balance'];
      }
      if (isset($vals['unit'])) {
        $this->unit = $vals['unit'];
      }
      if (isset($vals['rate'])) {
        $this->rate = $vals['rate'];
      }
      if (isset($vals['displayCode'])) {
        $this->displayCode = $vals['displayCode'];
      }
      if (isset($vals['calledNumber'])) {
        $this->calledNumber = $vals['calledNumber'];
      }
      if (isset($vals['calleeNationalNumber'])) {
        $this->calleeNationalNumber = $vals['calleeNationalNumber'];
      }
      if (isset($vals['calleeCallingCode'])) {
        $this->calleeCallingCode = $vals['calleeCallingCode'];
      }
      if (isset($vals['rateDivision'])) {
        $this->rateDivision = $vals['rateDivision'];
      }
      if (isset($vals['adMaxMin'])) {
        $this->adMaxMin = $vals['adMaxMin'];
      }
      if (isset($vals['adRemains'])) {
        $this->adRemains = $vals['adRemains'];
      }
      if (isset($vals['adSessionId'])) {
        $this->adSessionId = $vals['adSessionId'];
      }
    }
  }

  public function getName() {
    return 'PaidCallDialing';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->dialedNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->serviceDomain);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->productType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->productName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->multipleProduct);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->callerIdStatus);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->balance);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->unit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->rate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->displayCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->calledNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->calleeNationalNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->calleeCallingCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->rateDivision);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->adMaxMin);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->adRemains);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->adSessionId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PaidCallDialing');
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 1);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dialedNumber !== null) {
      $xfer += $output->writeFieldBegin('dialedNumber', TType::STRING, 2);
      $xfer += $output->writeString($this->dialedNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serviceDomain !== null) {
      $xfer += $output->writeFieldBegin('serviceDomain', TType::STRING, 3);
      $xfer += $output->writeString($this->serviceDomain);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->productType !== null) {
      $xfer += $output->writeFieldBegin('productType', TType::I32, 4);
      $xfer += $output->writeI32($this->productType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->productName !== null) {
      $xfer += $output->writeFieldBegin('productName', TType::STRING, 5);
      $xfer += $output->writeString($this->productName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->multipleProduct !== null) {
      $xfer += $output->writeFieldBegin('multipleProduct', TType::BOOL, 6);
      $xfer += $output->writeBool($this->multipleProduct);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->callerIdStatus !== null) {
      $xfer += $output->writeFieldBegin('callerIdStatus', TType::I32, 7);
      $xfer += $output->writeI32($this->callerIdStatus);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->balance !== null) {
      $xfer += $output->writeFieldBegin('balance', TType::I32, 10);
      $xfer += $output->writeI32($this->balance);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->unit !== null) {
      $xfer += $output->writeFieldBegin('unit', TType::STRING, 11);
      $xfer += $output->writeString($this->unit);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rate !== null) {
      $xfer += $output->writeFieldBegin('rate', TType::I32, 12);
      $xfer += $output->writeI32($this->rate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->displayCode !== null) {
      $xfer += $output->writeFieldBegin('displayCode', TType::STRING, 13);
      $xfer += $output->writeString($this->displayCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->calledNumber !== null) {
      $xfer += $output->writeFieldBegin('calledNumber', TType::STRING, 14);
      $xfer += $output->writeString($this->calledNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->calleeNationalNumber !== null) {
      $xfer += $output->writeFieldBegin('calleeNationalNumber', TType::STRING, 15);
      $xfer += $output->writeString($this->calleeNationalNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->calleeCallingCode !== null) {
      $xfer += $output->writeFieldBegin('calleeCallingCode', TType::STRING, 16);
      $xfer += $output->writeString($this->calleeCallingCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rateDivision !== null) {
      $xfer += $output->writeFieldBegin('rateDivision', TType::STRING, 17);
      $xfer += $output->writeString($this->rateDivision);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->adMaxMin !== null) {
      $xfer += $output->writeFieldBegin('adMaxMin', TType::I32, 20);
      $xfer += $output->writeI32($this->adMaxMin);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->adRemains !== null) {
      $xfer += $output->writeFieldBegin('adRemains', TType::I32, 21);
      $xfer += $output->writeI32($this->adRemains);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->adSessionId !== null) {
      $xfer += $output->writeFieldBegin('adSessionId', TType::STRING, 22);
      $xfer += $output->writeString($this->adSessionId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SpotItem {
  static $isValidate = false;

  static $_TSPEC = array(
    2 => array(
      'var' => 'name',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'phone',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'category',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    5 => array(
      'var' => 'mid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'countryAreaCode',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    10 => array(
      'var' => 'freePhoneCallable',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var string
   */
  public $name = null;
  /**
   * @var string
   */
  public $phone = null;
  /**
   * @var int
   */
  public $category = null;
  /**
   * @var string
   */
  public $mid = null;
  /**
   * @var string
   */
  public $countryAreaCode = null;
  /**
   * @var bool
   */
  public $freePhoneCallable = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['phone'])) {
        $this->phone = $vals['phone'];
      }
      if (isset($vals['category'])) {
        $this->category = $vals['category'];
      }
      if (isset($vals['mid'])) {
        $this->mid = $vals['mid'];
      }
      if (isset($vals['countryAreaCode'])) {
        $this->countryAreaCode = $vals['countryAreaCode'];
      }
      if (isset($vals['freePhoneCallable'])) {
        $this->freePhoneCallable = $vals['freePhoneCallable'];
      }
    }
  }

  public function getName() {
    return 'SpotItem';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->phone);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->category);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->countryAreaCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->freePhoneCallable);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SpotItem');
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->phone !== null) {
      $xfer += $output->writeFieldBegin('phone', TType::STRING, 3);
      $xfer += $output->writeString($this->phone);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->category !== null) {
      $xfer += $output->writeFieldBegin('category', TType::I32, 4);
      $xfer += $output->writeI32($this->category);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mid !== null) {
      $xfer += $output->writeFieldBegin('mid', TType::STRING, 5);
      $xfer += $output->writeString($this->mid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->countryAreaCode !== null) {
      $xfer += $output->writeFieldBegin('countryAreaCode', TType::STRING, 6);
      $xfer += $output->writeString($this->countryAreaCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->freePhoneCallable !== null) {
      $xfer += $output->writeFieldBegin('freePhoneCallable', TType::BOOL, 10);
      $xfer += $output->writeBool($this->freePhoneCallable);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SpotNearbyItem {
  static $isValidate = false;

  static $_TSPEC = array(
    2 => array(
      'var' => 'spotItem',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SpotItem',
      ),
    11 => array(
      'var' => 'location',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Location',
      ),
    );

  /**
   * @var \SpotItem
   */
  public $spotItem = null;
  /**
   * @var \Location
   */
  public $location = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['spotItem'])) {
        $this->spotItem = $vals['spotItem'];
      }
      if (isset($vals['location'])) {
        $this->location = $vals['location'];
      }
    }
  }

  public function getName() {
    return 'SpotNearbyItem';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->spotItem = new \SpotItem();
            $xfer += $this->spotItem->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRUCT) {
            $this->location = new \Location();
            $xfer += $this->location->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SpotNearbyItem');
    if ($this->spotItem !== null) {
      if (!is_object($this->spotItem)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('spotItem', TType::STRUCT, 2);
      $xfer += $this->spotItem->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->location !== null) {
      if (!is_object($this->location)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('location', TType::STRUCT, 11);
      $xfer += $this->location->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SpotNearbyResponse {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'spotNearbyItems',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\SpotNearbyItem',
        ),
      ),
    );

  /**
   * @var \SpotNearbyItem[]
   */
  public $spotNearbyItems = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['spotNearbyItems'])) {
        $this->spotNearbyItems = $vals['spotNearbyItems'];
      }
    }
  }

  public function getName() {
    return 'SpotNearbyResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->spotNearbyItems = array();
            $_size150 = 0;
            $_etype153 = 0;
            $xfer += $input->readListBegin($_etype153, $_size150);
            for ($_i154 = 0; $_i154 < $_size150; ++$_i154)
            {
              $elem155 = null;
              $elem155 = new \SpotNearbyItem();
              $xfer += $elem155->read($input);
              $this->spotNearbyItems []= $elem155;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SpotNearbyResponse');
    if ($this->spotNearbyItems !== null) {
      if (!is_array($this->spotNearbyItems)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('spotNearbyItems', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->spotNearbyItems));
        {
          foreach ($this->spotNearbyItems as $iter156)
          {
            $xfer += $iter156->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SpotPhoneNumberResponse {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'spotItems',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\SpotItem',
        ),
      ),
    );

  /**
   * @var \SpotItem[]
   */
  public $spotItems = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['spotItems'])) {
        $this->spotItems = $vals['spotItems'];
      }
    }
  }

  public function getName() {
    return 'SpotPhoneNumberResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->spotItems = array();
            $_size157 = 0;
            $_etype160 = 0;
            $xfer += $input->readListBegin($_etype160, $_size157);
            for ($_i161 = 0; $_i161 < $_size157; ++$_i161)
            {
              $elem162 = null;
              $elem162 = new \SpotItem();
              $xfer += $elem162->read($input);
              $this->spotItems []= $elem162;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SpotPhoneNumberResponse');
    if ($this->spotItems !== null) {
      if (!is_array($this->spotItems)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('spotItems', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->spotItems));
        {
          foreach ($this->spotItems as $iter163)
          {
            $xfer += $iter163->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PaidCallHistory {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'seq',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    2 => array(
      'var' => 'type',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    3 => array(
      'var' => 'dialedNumber',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'calledNumber',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'toMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'toName',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    7 => array(
      'var' => 'setupTime',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    8 => array(
      'var' => 'startTime',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    9 => array(
      'var' => 'endTime',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    10 => array(
      'var' => 'duration',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    11 => array(
      'var' => 'terminate',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    12 => array(
      'var' => 'productType',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    13 => array(
      'var' => 'charge',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    14 => array(
      'var' => 'unit',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    15 => array(
      'var' => 'result',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var int
   */
  public $seq = null;
  /**
   * @var int
   */
  public $type = null;
  /**
   * @var string
   */
  public $dialedNumber = null;
  /**
   * @var string
   */
  public $calledNumber = null;
  /**
   * @var string
   */
  public $toMid = null;
  /**
   * @var string
   */
  public $toName = null;
  /**
   * @var int
   */
  public $setupTime = null;
  /**
   * @var int
   */
  public $startTime = null;
  /**
   * @var int
   */
  public $endTime = null;
  /**
   * @var int
   */
  public $duration = null;
  /**
   * @var int
   */
  public $terminate = null;
  /**
   * @var int
   */
  public $productType = null;
  /**
   * @var int
   */
  public $charge = null;
  /**
   * @var string
   */
  public $unit = null;
  /**
   * @var string
   */
  public $result = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['seq'])) {
        $this->seq = $vals['seq'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['dialedNumber'])) {
        $this->dialedNumber = $vals['dialedNumber'];
      }
      if (isset($vals['calledNumber'])) {
        $this->calledNumber = $vals['calledNumber'];
      }
      if (isset($vals['toMid'])) {
        $this->toMid = $vals['toMid'];
      }
      if (isset($vals['toName'])) {
        $this->toName = $vals['toName'];
      }
      if (isset($vals['setupTime'])) {
        $this->setupTime = $vals['setupTime'];
      }
      if (isset($vals['startTime'])) {
        $this->startTime = $vals['startTime'];
      }
      if (isset($vals['endTime'])) {
        $this->endTime = $vals['endTime'];
      }
      if (isset($vals['duration'])) {
        $this->duration = $vals['duration'];
      }
      if (isset($vals['terminate'])) {
        $this->terminate = $vals['terminate'];
      }
      if (isset($vals['productType'])) {
        $this->productType = $vals['productType'];
      }
      if (isset($vals['charge'])) {
        $this->charge = $vals['charge'];
      }
      if (isset($vals['unit'])) {
        $this->unit = $vals['unit'];
      }
      if (isset($vals['result'])) {
        $this->result = $vals['result'];
      }
    }
  }

  public function getName() {
    return 'PaidCallHistory';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->seq);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->dialedNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->calledNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->toMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->toName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->setupTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->startTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->endTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->duration);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->terminate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->productType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->charge);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->unit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->result);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PaidCallHistory');
    if ($this->seq !== null) {
      $xfer += $output->writeFieldBegin('seq', TType::I64, 1);
      $xfer += $output->writeI64($this->seq);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 2);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dialedNumber !== null) {
      $xfer += $output->writeFieldBegin('dialedNumber', TType::STRING, 3);
      $xfer += $output->writeString($this->dialedNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->calledNumber !== null) {
      $xfer += $output->writeFieldBegin('calledNumber', TType::STRING, 4);
      $xfer += $output->writeString($this->calledNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->toMid !== null) {
      $xfer += $output->writeFieldBegin('toMid', TType::STRING, 5);
      $xfer += $output->writeString($this->toMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->toName !== null) {
      $xfer += $output->writeFieldBegin('toName', TType::STRING, 6);
      $xfer += $output->writeString($this->toName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->setupTime !== null) {
      $xfer += $output->writeFieldBegin('setupTime', TType::I64, 7);
      $xfer += $output->writeI64($this->setupTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->startTime !== null) {
      $xfer += $output->writeFieldBegin('startTime', TType::I64, 8);
      $xfer += $output->writeI64($this->startTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->endTime !== null) {
      $xfer += $output->writeFieldBegin('endTime', TType::I64, 9);
      $xfer += $output->writeI64($this->endTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->duration !== null) {
      $xfer += $output->writeFieldBegin('duration', TType::I64, 10);
      $xfer += $output->writeI64($this->duration);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->terminate !== null) {
      $xfer += $output->writeFieldBegin('terminate', TType::I32, 11);
      $xfer += $output->writeI32($this->terminate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->productType !== null) {
      $xfer += $output->writeFieldBegin('productType', TType::I32, 12);
      $xfer += $output->writeI32($this->productType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->charge !== null) {
      $xfer += $output->writeFieldBegin('charge', TType::I32, 13);
      $xfer += $output->writeI32($this->charge);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->unit !== null) {
      $xfer += $output->writeFieldBegin('unit', TType::STRING, 14);
      $xfer += $output->writeString($this->unit);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->result !== null) {
      $xfer += $output->writeFieldBegin('result', TType::STRING, 15);
      $xfer += $output->writeString($this->result);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PaidCallHistoryResult {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'historys',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\PaidCallHistory',
        ),
      ),
    2 => array(
      'var' => 'hasNext',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var \PaidCallHistory[]
   */
  public $historys = null;
  /**
   * @var bool
   */
  public $hasNext = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['historys'])) {
        $this->historys = $vals['historys'];
      }
      if (isset($vals['hasNext'])) {
        $this->hasNext = $vals['hasNext'];
      }
    }
  }

  public function getName() {
    return 'PaidCallHistoryResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->historys = array();
            $_size164 = 0;
            $_etype167 = 0;
            $xfer += $input->readListBegin($_etype167, $_size164);
            for ($_i168 = 0; $_i168 < $_size164; ++$_i168)
            {
              $elem169 = null;
              $elem169 = new \PaidCallHistory();
              $xfer += $elem169->read($input);
              $this->historys []= $elem169;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->hasNext);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PaidCallHistoryResult');
    if ($this->historys !== null) {
      if (!is_array($this->historys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('historys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->historys));
        {
          foreach ($this->historys as $iter170)
          {
            $xfer += $iter170->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->hasNext !== null) {
      $xfer += $output->writeFieldBegin('hasNext', TType::BOOL, 2);
      $xfer += $output->writeBool($this->hasNext);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PaidCallMetadataResult {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'currencyExchangeRates',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\PaidCallCurrencyExchangeRate',
        ),
      ),
    2 => array(
      'var' => 'recommendedCountryCodes',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRING,
      'elem' => array(
        'type' => TType::STRING,
        ),
      ),
    3 => array(
      'var' => 'adCountries',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\PaidCallAdCountry',
        ),
      ),
    );

  /**
   * @var \PaidCallCurrencyExchangeRate[]
   */
  public $currencyExchangeRates = null;
  /**
   * @var string[]
   */
  public $recommendedCountryCodes = null;
  /**
   * @var \PaidCallAdCountry[]
   */
  public $adCountries = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['currencyExchangeRates'])) {
        $this->currencyExchangeRates = $vals['currencyExchangeRates'];
      }
      if (isset($vals['recommendedCountryCodes'])) {
        $this->recommendedCountryCodes = $vals['recommendedCountryCodes'];
      }
      if (isset($vals['adCountries'])) {
        $this->adCountries = $vals['adCountries'];
      }
    }
  }

  public function getName() {
    return 'PaidCallMetadataResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->currencyExchangeRates = array();
            $_size171 = 0;
            $_etype174 = 0;
            $xfer += $input->readListBegin($_etype174, $_size171);
            for ($_i175 = 0; $_i175 < $_size171; ++$_i175)
            {
              $elem176 = null;
              $elem176 = new \PaidCallCurrencyExchangeRate();
              $xfer += $elem176->read($input);
              $this->currencyExchangeRates []= $elem176;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->recommendedCountryCodes = array();
            $_size177 = 0;
            $_etype180 = 0;
            $xfer += $input->readListBegin($_etype180, $_size177);
            for ($_i181 = 0; $_i181 < $_size177; ++$_i181)
            {
              $elem182 = null;
              $xfer += $input->readString($elem182);
              $this->recommendedCountryCodes []= $elem182;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->adCountries = array();
            $_size183 = 0;
            $_etype186 = 0;
            $xfer += $input->readListBegin($_etype186, $_size183);
            for ($_i187 = 0; $_i187 < $_size183; ++$_i187)
            {
              $elem188 = null;
              $elem188 = new \PaidCallAdCountry();
              $xfer += $elem188->read($input);
              $this->adCountries []= $elem188;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PaidCallMetadataResult');
    if ($this->currencyExchangeRates !== null) {
      if (!is_array($this->currencyExchangeRates)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('currencyExchangeRates', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->currencyExchangeRates));
        {
          foreach ($this->currencyExchangeRates as $iter189)
          {
            $xfer += $iter189->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->recommendedCountryCodes !== null) {
      if (!is_array($this->recommendedCountryCodes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('recommendedCountryCodes', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRING, count($this->recommendedCountryCodes));
        {
          foreach ($this->recommendedCountryCodes as $iter190)
          {
            $xfer += $output->writeString($iter190);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->adCountries !== null) {
      if (!is_array($this->adCountries)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('adCountries', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->adCountries));
        {
          foreach ($this->adCountries as $iter191)
          {
            $xfer += $iter191->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PaidCallRedeemResult {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'eventName',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'eventAmount',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var string
   */
  public $eventName = null;
  /**
   * @var int
   */
  public $eventAmount = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['eventName'])) {
        $this->eventName = $vals['eventName'];
      }
      if (isset($vals['eventAmount'])) {
        $this->eventAmount = $vals['eventAmount'];
      }
    }
  }

  public function getName() {
    return 'PaidCallRedeemResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->eventName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->eventAmount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PaidCallRedeemResult');
    if ($this->eventName !== null) {
      $xfer += $output->writeFieldBegin('eventName', TType::STRING, 1);
      $xfer += $output->writeString($this->eventName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->eventAmount !== null) {
      $xfer += $output->writeFieldBegin('eventAmount', TType::I32, 2);
      $xfer += $output->writeI32($this->eventAmount);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PaidCallResponse {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'host',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\CallHost',
      ),
    2 => array(
      'var' => 'dialing',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\PaidCallDialing',
      ),
    3 => array(
      'var' => 'token',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'spotItems',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\SpotItem',
        ),
      ),
    );

  /**
   * @var \CallHost
   */
  public $host = null;
  /**
   * @var \PaidCallDialing
   */
  public $dialing = null;
  /**
   * @var string
   */
  public $token = null;
  /**
   * @var \SpotItem[]
   */
  public $spotItems = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['host'])) {
        $this->host = $vals['host'];
      }
      if (isset($vals['dialing'])) {
        $this->dialing = $vals['dialing'];
      }
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['spotItems'])) {
        $this->spotItems = $vals['spotItems'];
      }
    }
  }

  public function getName() {
    return 'PaidCallResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->host = new \CallHost();
            $xfer += $this->host->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->dialing = new \PaidCallDialing();
            $xfer += $this->dialing->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->spotItems = array();
            $_size192 = 0;
            $_etype195 = 0;
            $xfer += $input->readListBegin($_etype195, $_size192);
            for ($_i196 = 0; $_i196 < $_size192; ++$_i196)
            {
              $elem197 = null;
              $elem197 = new \SpotItem();
              $xfer += $elem197->read($input);
              $this->spotItems []= $elem197;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PaidCallResponse');
    if ($this->host !== null) {
      if (!is_object($this->host)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('host', TType::STRUCT, 1);
      $xfer += $this->host->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dialing !== null) {
      if (!is_object($this->dialing)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('dialing', TType::STRUCT, 2);
      $xfer += $this->dialing->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 3);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->spotItems !== null) {
      if (!is_array($this->spotItems)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('spotItems', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRUCT, count($this->spotItems));
        {
          foreach ($this->spotItems as $iter198)
          {
            $xfer += $iter198->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PaidCallUserRate {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'countryCode',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'rate',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    3 => array(
      'var' => 'rateDivision',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'rateName',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $countryCode = null;
  /**
   * @var int
   */
  public $rate = null;
  /**
   * @var string
   */
  public $rateDivision = null;
  /**
   * @var string
   */
  public $rateName = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['countryCode'])) {
        $this->countryCode = $vals['countryCode'];
      }
      if (isset($vals['rate'])) {
        $this->rate = $vals['rate'];
      }
      if (isset($vals['rateDivision'])) {
        $this->rateDivision = $vals['rateDivision'];
      }
      if (isset($vals['rateName'])) {
        $this->rateName = $vals['rateName'];
      }
    }
  }

  public function getName() {
    return 'PaidCallUserRate';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->countryCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->rate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->rateDivision);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->rateName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PaidCallUserRate');
    if ($this->countryCode !== null) {
      $xfer += $output->writeFieldBegin('countryCode', TType::STRING, 1);
      $xfer += $output->writeString($this->countryCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rate !== null) {
      $xfer += $output->writeFieldBegin('rate', TType::I32, 2);
      $xfer += $output->writeI32($this->rate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rateDivision !== null) {
      $xfer += $output->writeFieldBegin('rateDivision', TType::STRING, 3);
      $xfer += $output->writeString($this->rateDivision);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rateName !== null) {
      $xfer += $output->writeFieldBegin('rateName', TType::STRING, 4);
      $xfer += $output->writeString($this->rateName);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ChannelInfo {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'channelId',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'name',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'entryPageUrl',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'descriptionText',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'provider',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\ChannelProvider',
      ),
    7 => array(
      'var' => 'publicType',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    8 => array(
      'var' => 'iconImage',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    9 => array(
      'var' => 'permissions',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRING,
      'elem' => array(
        'type' => TType::STRING,
        ),
      ),
    11 => array(
      'var' => 'iconThumbnailImage',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    12 => array(
      'var' => 'channelConfigurations',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::I32,
      'elem' => array(
        'type' => TType::I32,
        ),
      ),
    13 => array(
      'var' => 'lcsAllApiUsable',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    14 => array(
      'var' => 'allowedPermissions',
      'isRequired' => false,
      'type' => TType::SET,
      'etype' => TType::I32,
      'elem' => array(
        'type' => TType::I32,
        ),
      ),
    15 => array(
      'var' => 'channelDomains',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\ChannelDomain',
        ),
      ),
    16 => array(
      'var' => 'updatedTimestamp',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    );

  /**
   * @var string
   */
  public $channelId = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var string
   */
  public $entryPageUrl = null;
  /**
   * @var string
   */
  public $descriptionText = null;
  /**
   * @var \ChannelProvider
   */
  public $provider = null;
  /**
   * @var int
   */
  public $publicType = null;
  /**
   * @var string
   */
  public $iconImage = null;
  /**
   * @var string[]
   */
  public $permissions = null;
  /**
   * @var string
   */
  public $iconThumbnailImage = null;
  /**
   * @var int[]
   */
  public $channelConfigurations = null;
  /**
   * @var bool
   */
  public $lcsAllApiUsable = null;
  /**
   * @var int[]
   */
  public $allowedPermissions = null;
  /**
   * @var \ChannelDomain[]
   */
  public $channelDomains = null;
  /**
   * @var int
   */
  public $updatedTimestamp = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['channelId'])) {
        $this->channelId = $vals['channelId'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['entryPageUrl'])) {
        $this->entryPageUrl = $vals['entryPageUrl'];
      }
      if (isset($vals['descriptionText'])) {
        $this->descriptionText = $vals['descriptionText'];
      }
      if (isset($vals['provider'])) {
        $this->provider = $vals['provider'];
      }
      if (isset($vals['publicType'])) {
        $this->publicType = $vals['publicType'];
      }
      if (isset($vals['iconImage'])) {
        $this->iconImage = $vals['iconImage'];
      }
      if (isset($vals['permissions'])) {
        $this->permissions = $vals['permissions'];
      }
      if (isset($vals['iconThumbnailImage'])) {
        $this->iconThumbnailImage = $vals['iconThumbnailImage'];
      }
      if (isset($vals['channelConfigurations'])) {
        $this->channelConfigurations = $vals['channelConfigurations'];
      }
      if (isset($vals['lcsAllApiUsable'])) {
        $this->lcsAllApiUsable = $vals['lcsAllApiUsable'];
      }
      if (isset($vals['allowedPermissions'])) {
        $this->allowedPermissions = $vals['allowedPermissions'];
      }
      if (isset($vals['channelDomains'])) {
        $this->channelDomains = $vals['channelDomains'];
      }
      if (isset($vals['updatedTimestamp'])) {
        $this->updatedTimestamp = $vals['updatedTimestamp'];
      }
    }
  }

  public function getName() {
    return 'ChannelInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->channelId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->entryPageUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->descriptionText);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->provider = new \ChannelProvider();
            $xfer += $this->provider->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->publicType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->iconImage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::LST) {
            $this->permissions = array();
            $_size199 = 0;
            $_etype202 = 0;
            $xfer += $input->readListBegin($_etype202, $_size199);
            for ($_i203 = 0; $_i203 < $_size199; ++$_i203)
            {
              $elem204 = null;
              $xfer += $input->readString($elem204);
              $this->permissions []= $elem204;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->iconThumbnailImage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::LST) {
            $this->channelConfigurations = array();
            $_size205 = 0;
            $_etype208 = 0;
            $xfer += $input->readListBegin($_etype208, $_size205);
            for ($_i209 = 0; $_i209 < $_size205; ++$_i209)
            {
              $elem210 = null;
              $xfer += $input->readI32($elem210);
              $this->channelConfigurations []= $elem210;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->lcsAllApiUsable);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::SET) {
            $this->allowedPermissions = array();
            $_size211 = 0;
            $_etype214 = 0;
            $xfer += $input->readSetBegin($_etype214, $_size211);
            for ($_i215 = 0; $_i215 < $_size211; ++$_i215)
            {
              $elem216 = null;
              $xfer += $input->readI32($elem216);
              $this->allowedPermissions[$elem216] = true;
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::LST) {
            $this->channelDomains = array();
            $_size217 = 0;
            $_etype220 = 0;
            $xfer += $input->readListBegin($_etype220, $_size217);
            for ($_i221 = 0; $_i221 < $_size217; ++$_i221)
            {
              $elem222 = null;
              $elem222 = new \ChannelDomain();
              $xfer += $elem222->read($input);
              $this->channelDomains []= $elem222;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->updatedTimestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ChannelInfo');
    if ($this->channelId !== null) {
      $xfer += $output->writeFieldBegin('channelId', TType::STRING, 1);
      $xfer += $output->writeString($this->channelId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 3);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->entryPageUrl !== null) {
      $xfer += $output->writeFieldBegin('entryPageUrl', TType::STRING, 4);
      $xfer += $output->writeString($this->entryPageUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->descriptionText !== null) {
      $xfer += $output->writeFieldBegin('descriptionText', TType::STRING, 5);
      $xfer += $output->writeString($this->descriptionText);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->provider !== null) {
      if (!is_object($this->provider)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('provider', TType::STRUCT, 6);
      $xfer += $this->provider->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->publicType !== null) {
      $xfer += $output->writeFieldBegin('publicType', TType::I32, 7);
      $xfer += $output->writeI32($this->publicType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->iconImage !== null) {
      $xfer += $output->writeFieldBegin('iconImage', TType::STRING, 8);
      $xfer += $output->writeString($this->iconImage);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->permissions !== null) {
      if (!is_array($this->permissions)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('permissions', TType::LST, 9);
      {
        $output->writeListBegin(TType::STRING, count($this->permissions));
        {
          foreach ($this->permissions as $iter223)
          {
            $xfer += $output->writeString($iter223);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->iconThumbnailImage !== null) {
      $xfer += $output->writeFieldBegin('iconThumbnailImage', TType::STRING, 11);
      $xfer += $output->writeString($this->iconThumbnailImage);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->channelConfigurations !== null) {
      if (!is_array($this->channelConfigurations)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('channelConfigurations', TType::LST, 12);
      {
        $output->writeListBegin(TType::I32, count($this->channelConfigurations));
        {
          foreach ($this->channelConfigurations as $iter224)
          {
            $xfer += $output->writeI32($iter224);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lcsAllApiUsable !== null) {
      $xfer += $output->writeFieldBegin('lcsAllApiUsable', TType::BOOL, 13);
      $xfer += $output->writeBool($this->lcsAllApiUsable);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->allowedPermissions !== null) {
      if (!is_array($this->allowedPermissions)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('allowedPermissions', TType::SET, 14);
      {
        $output->writeSetBegin(TType::I32, count($this->allowedPermissions));
        {
          foreach ($this->allowedPermissions as $iter225 => $iter226)
          {
            $xfer += $output->writeI32($iter225);
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->channelDomains !== null) {
      if (!is_array($this->channelDomains)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('channelDomains', TType::LST, 15);
      {
        $output->writeListBegin(TType::STRUCT, count($this->channelDomains));
        {
          foreach ($this->channelDomains as $iter227)
          {
            $xfer += $iter227->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->updatedTimestamp !== null) {
      $xfer += $output->writeFieldBegin('updatedTimestamp', TType::I64, 16);
      $xfer += $output->writeI64($this->updatedTimestamp);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ApprovedChannelInfo {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'channelInfo',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\ChannelInfo',
      ),
    2 => array(
      'var' => 'approvedAt',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    );

  /**
   * @var \ChannelInfo
   */
  public $channelInfo = null;
  /**
   * @var int
   */
  public $approvedAt = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['channelInfo'])) {
        $this->channelInfo = $vals['channelInfo'];
      }
      if (isset($vals['approvedAt'])) {
        $this->approvedAt = $vals['approvedAt'];
      }
    }
  }

  public function getName() {
    return 'ApprovedChannelInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->channelInfo = new \ChannelInfo();
            $xfer += $this->channelInfo->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->approvedAt);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ApprovedChannelInfo');
    if ($this->channelInfo !== null) {
      if (!is_object($this->channelInfo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('channelInfo', TType::STRUCT, 1);
      $xfer += $this->channelInfo->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->approvedAt !== null) {
      $xfer += $output->writeFieldBegin('approvedAt', TType::I64, 2);
      $xfer += $output->writeI64($this->approvedAt);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ApprovedChannelInfos {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'approvedChannelInfos',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\ApprovedChannelInfo',
        ),
      ),
    2 => array(
      'var' => 'revision',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    );

  /**
   * @var \ApprovedChannelInfo[]
   */
  public $approvedChannelInfos = null;
  /**
   * @var int
   */
  public $revision = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['approvedChannelInfos'])) {
        $this->approvedChannelInfos = $vals['approvedChannelInfos'];
      }
      if (isset($vals['revision'])) {
        $this->revision = $vals['revision'];
      }
    }
  }

  public function getName() {
    return 'ApprovedChannelInfos';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->approvedChannelInfos = array();
            $_size228 = 0;
            $_etype231 = 0;
            $xfer += $input->readListBegin($_etype231, $_size228);
            for ($_i232 = 0; $_i232 < $_size228; ++$_i232)
            {
              $elem233 = null;
              $elem233 = new \ApprovedChannelInfo();
              $xfer += $elem233->read($input);
              $this->approvedChannelInfos []= $elem233;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->revision);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ApprovedChannelInfos');
    if ($this->approvedChannelInfos !== null) {
      if (!is_array($this->approvedChannelInfos)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('approvedChannelInfos', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->approvedChannelInfos));
        {
          foreach ($this->approvedChannelInfos as $iter234)
          {
            $xfer += $iter234->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->revision !== null) {
      $xfer += $output->writeFieldBegin('revision', TType::I64, 2);
      $xfer += $output->writeI64($this->revision);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AuthQrcode {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'qrcode',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'verifier',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'callbackUrl',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $qrcode = null;
  /**
   * @var string
   */
  public $verifier = null;
  /**
   * @var string
   */
  public $callbackUrl = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['qrcode'])) {
        $this->qrcode = $vals['qrcode'];
      }
      if (isset($vals['verifier'])) {
        $this->verifier = $vals['verifier'];
      }
      if (isset($vals['callbackUrl'])) {
        $this->callbackUrl = $vals['callbackUrl'];
      }
    }
  }

  public function getName() {
    return 'AuthQrcode';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->qrcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->verifier);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->callbackUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AuthQrcode');
    if ($this->qrcode !== null) {
      $xfer += $output->writeFieldBegin('qrcode', TType::STRING, 1);
      $xfer += $output->writeString($this->qrcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->verifier !== null) {
      $xfer += $output->writeFieldBegin('verifier', TType::STRING, 2);
      $xfer += $output->writeString($this->verifier);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->callbackUrl !== null) {
      $xfer += $output->writeFieldBegin('callbackUrl', TType::STRING, 3);
      $xfer += $output->writeString($this->callbackUrl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AnalyticsInfo {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'gaSamplingRate',
      'isRequired' => false,
      'type' => TType::DOUBLE,
      ),
    2 => array(
      'var' => 'tmid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var double
   */
  public $gaSamplingRate = null;
  /**
   * @var string
   */
  public $tmid = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['gaSamplingRate'])) {
        $this->gaSamplingRate = $vals['gaSamplingRate'];
      }
      if (isset($vals['tmid'])) {
        $this->tmid = $vals['tmid'];
      }
    }
  }

  public function getName() {
    return 'AnalyticsInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->gaSamplingRate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tmid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AnalyticsInfo');
    if ($this->gaSamplingRate !== null) {
      $xfer += $output->writeFieldBegin('gaSamplingRate', TType::DOUBLE, 1);
      $xfer += $output->writeDouble($this->gaSamplingRate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tmid !== null) {
      $xfer += $output->writeFieldBegin('tmid', TType::STRING, 2);
      $xfer += $output->writeString($this->tmid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ContactTransition {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'ownerMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'targetMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'previousStatus',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    4 => array(
      'var' => 'resultStatus',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var string
   */
  public $ownerMid = null;
  /**
   * @var string
   */
  public $targetMid = null;
  /**
   * @var int
   */
  public $previousStatus = null;
  /**
   * @var int
   */
  public $resultStatus = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['ownerMid'])) {
        $this->ownerMid = $vals['ownerMid'];
      }
      if (isset($vals['targetMid'])) {
        $this->targetMid = $vals['targetMid'];
      }
      if (isset($vals['previousStatus'])) {
        $this->previousStatus = $vals['previousStatus'];
      }
      if (isset($vals['resultStatus'])) {
        $this->resultStatus = $vals['resultStatus'];
      }
    }
  }

  public function getName() {
    return 'ContactTransition';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ownerMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->targetMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->previousStatus);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->resultStatus);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContactTransition');
    if ($this->ownerMid !== null) {
      $xfer += $output->writeFieldBegin('ownerMid', TType::STRING, 1);
      $xfer += $output->writeString($this->ownerMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->targetMid !== null) {
      $xfer += $output->writeFieldBegin('targetMid', TType::STRING, 2);
      $xfer += $output->writeString($this->targetMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->previousStatus !== null) {
      $xfer += $output->writeFieldBegin('previousStatus', TType::I32, 3);
      $xfer += $output->writeI32($this->previousStatus);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->resultStatus !== null) {
      $xfer += $output->writeFieldBegin('resultStatus', TType::I32, 4);
      $xfer += $output->writeI32($this->resultStatus);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UserTicketResponse {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'mid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'userTicket',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $mid = null;
  /**
   * @var string
   */
  public $userTicket = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['mid'])) {
        $this->mid = $vals['mid'];
      }
      if (isset($vals['userTicket'])) {
        $this->userTicket = $vals['userTicket'];
      }
    }
  }

  public function getName() {
    return 'UserTicketResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->userTicket);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserTicketResponse');
    if ($this->mid !== null) {
      $xfer += $output->writeFieldBegin('mid', TType::STRING, 1);
      $xfer += $output->writeString($this->mid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userTicket !== null) {
      $xfer += $output->writeFieldBegin('userTicket', TType::STRING, 2);
      $xfer += $output->writeString($this->userTicket);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BuddyBanner {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'buddyBannerLinkType',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'buddyBannerLink',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'buddyBannerImageUrl',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var int
   */
  public $buddyBannerLinkType = null;
  /**
   * @var string
   */
  public $buddyBannerLink = null;
  /**
   * @var string
   */
  public $buddyBannerImageUrl = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['buddyBannerLinkType'])) {
        $this->buddyBannerLinkType = $vals['buddyBannerLinkType'];
      }
      if (isset($vals['buddyBannerLink'])) {
        $this->buddyBannerLink = $vals['buddyBannerLink'];
      }
      if (isset($vals['buddyBannerImageUrl'])) {
        $this->buddyBannerImageUrl = $vals['buddyBannerImageUrl'];
      }
    }
  }

  public function getName() {
    return 'BuddyBanner';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->buddyBannerLinkType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->buddyBannerLink);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->buddyBannerImageUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BuddyBanner');
    if ($this->buddyBannerLinkType !== null) {
      $xfer += $output->writeFieldBegin('buddyBannerLinkType', TType::I32, 1);
      $xfer += $output->writeI32($this->buddyBannerLinkType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->buddyBannerLink !== null) {
      $xfer += $output->writeFieldBegin('buddyBannerLink', TType::STRING, 2);
      $xfer += $output->writeString($this->buddyBannerLink);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->buddyBannerImageUrl !== null) {
      $xfer += $output->writeFieldBegin('buddyBannerImageUrl', TType::STRING, 3);
      $xfer += $output->writeString($this->buddyBannerImageUrl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BuddyDetail {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'mid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'memberCount',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    3 => array(
      'var' => 'onAir',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    4 => array(
      'var' => 'businessAccount',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    5 => array(
      'var' => 'addable',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    6 => array(
      'var' => 'acceptableContentTypes',
      'isRequired' => false,
      'type' => TType::SET,
      'etype' => TType::I32,
      'elem' => array(
        'type' => TType::I32,
        ),
      ),
    7 => array(
      'var' => 'capableMyhome',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var string
   */
  public $mid = null;
  /**
   * @var int
   */
  public $memberCount = null;
  /**
   * @var bool
   */
  public $onAir = null;
  /**
   * @var bool
   */
  public $businessAccount = null;
  /**
   * @var bool
   */
  public $addable = null;
  /**
   * @var int[]
   */
  public $acceptableContentTypes = null;
  /**
   * @var bool
   */
  public $capableMyhome = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['mid'])) {
        $this->mid = $vals['mid'];
      }
      if (isset($vals['memberCount'])) {
        $this->memberCount = $vals['memberCount'];
      }
      if (isset($vals['onAir'])) {
        $this->onAir = $vals['onAir'];
      }
      if (isset($vals['businessAccount'])) {
        $this->businessAccount = $vals['businessAccount'];
      }
      if (isset($vals['addable'])) {
        $this->addable = $vals['addable'];
      }
      if (isset($vals['acceptableContentTypes'])) {
        $this->acceptableContentTypes = $vals['acceptableContentTypes'];
      }
      if (isset($vals['capableMyhome'])) {
        $this->capableMyhome = $vals['capableMyhome'];
      }
    }
  }

  public function getName() {
    return 'BuddyDetail';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->memberCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->onAir);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->businessAccount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->addable);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::SET) {
            $this->acceptableContentTypes = array();
            $_size235 = 0;
            $_etype238 = 0;
            $xfer += $input->readSetBegin($_etype238, $_size235);
            for ($_i239 = 0; $_i239 < $_size235; ++$_i239)
            {
              $elem240 = null;
              $xfer += $input->readI32($elem240);
              $this->acceptableContentTypes[$elem240] = true;
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->capableMyhome);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BuddyDetail');
    if ($this->mid !== null) {
      $xfer += $output->writeFieldBegin('mid', TType::STRING, 1);
      $xfer += $output->writeString($this->mid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->memberCount !== null) {
      $xfer += $output->writeFieldBegin('memberCount', TType::I64, 2);
      $xfer += $output->writeI64($this->memberCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->onAir !== null) {
      $xfer += $output->writeFieldBegin('onAir', TType::BOOL, 3);
      $xfer += $output->writeBool($this->onAir);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->businessAccount !== null) {
      $xfer += $output->writeFieldBegin('businessAccount', TType::BOOL, 4);
      $xfer += $output->writeBool($this->businessAccount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->addable !== null) {
      $xfer += $output->writeFieldBegin('addable', TType::BOOL, 5);
      $xfer += $output->writeBool($this->addable);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->acceptableContentTypes !== null) {
      if (!is_array($this->acceptableContentTypes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('acceptableContentTypes', TType::SET, 6);
      {
        $output->writeSetBegin(TType::I32, count($this->acceptableContentTypes));
        {
          foreach ($this->acceptableContentTypes as $iter241 => $iter242)
          {
            $xfer += $output->writeI32($iter241);
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->capableMyhome !== null) {
      $xfer += $output->writeFieldBegin('capableMyhome', TType::BOOL, 7);
      $xfer += $output->writeBool($this->capableMyhome);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Contact {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'mid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'createdTime',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    10 => array(
      'var' => 'type',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    11 => array(
      'var' => 'status',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    21 => array(
      'var' => 'relation',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    22 => array(
      'var' => 'displayName',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    23 => array(
      'var' => 'phoneticName',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    24 => array(
      'var' => 'pictureStatus',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    25 => array(
      'var' => 'thumbnailUrl',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    26 => array(
      'var' => 'statusMessage',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    27 => array(
      'var' => 'displayNameOverridden',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    28 => array(
      'var' => 'favoriteTime',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    31 => array(
      'var' => 'capableVoiceCall',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    32 => array(
      'var' => 'capableVideoCall',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    33 => array(
      'var' => 'capableMyhome',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    34 => array(
      'var' => 'capableBuddy',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    35 => array(
      'var' => 'attributes',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    36 => array(
      'var' => 'settings',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    37 => array(
      'var' => 'picturePath',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    38 => array(
      'var' => 'recommendParams',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    39 => array(
      'var' => 'friendRequestStatus',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    40 => array(
      'var' => 'musicProfile',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    42 => array(
      'var' => 'videoProfile',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    43 => array(
      'var' => 'statusMessageContentMetadata',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRING,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRING,
        ),
      ),
    );

  /**
   * @var string
   */
  public $mid = null;
  /**
   * @var int
   */
  public $createdTime = null;
  /**
   * @var int
   */
  public $type = null;
  /**
   * @var int
   */
  public $status = null;
  /**
   * @var int
   */
  public $relation = null;
  /**
   * @var string
   */
  public $displayName = null;
  /**
   * @var string
   */
  public $phoneticName = null;
  /**
   * @var string
   */
  public $pictureStatus = null;
  /**
   * @var string
   */
  public $thumbnailUrl = null;
  /**
   * @var string
   */
  public $statusMessage = null;
  /**
   * @var string
   */
  public $displayNameOverridden = null;
  /**
   * @var int
   */
  public $favoriteTime = null;
  /**
   * @var bool
   */
  public $capableVoiceCall = null;
  /**
   * @var bool
   */
  public $capableVideoCall = null;
  /**
   * @var bool
   */
  public $capableMyhome = null;
  /**
   * @var bool
   */
  public $capableBuddy = null;
  /**
   * @var int
   */
  public $attributes = null;
  /**
   * @var int
   */
  public $settings = null;
  /**
   * @var string
   */
  public $picturePath = null;
  /**
   * @var string
   */
  public $recommendParams = null;
  /**
   * @var int
   */
  public $friendRequestStatus = null;
  /**
   * @var string
   */
  public $musicProfile = null;
  /**
   * @var string
   */
  public $videoProfile = null;
  /**
   * @var array
   */
  public $statusMessageContentMetadata = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['mid'])) {
        $this->mid = $vals['mid'];
      }
      if (isset($vals['createdTime'])) {
        $this->createdTime = $vals['createdTime'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['relation'])) {
        $this->relation = $vals['relation'];
      }
      if (isset($vals['displayName'])) {
        $this->displayName = $vals['displayName'];
      }
      if (isset($vals['phoneticName'])) {
        $this->phoneticName = $vals['phoneticName'];
      }
      if (isset($vals['pictureStatus'])) {
        $this->pictureStatus = $vals['pictureStatus'];
      }
      if (isset($vals['thumbnailUrl'])) {
        $this->thumbnailUrl = $vals['thumbnailUrl'];
      }
      if (isset($vals['statusMessage'])) {
        $this->statusMessage = $vals['statusMessage'];
      }
      if (isset($vals['displayNameOverridden'])) {
        $this->displayNameOverridden = $vals['displayNameOverridden'];
      }
      if (isset($vals['favoriteTime'])) {
        $this->favoriteTime = $vals['favoriteTime'];
      }
      if (isset($vals['capableVoiceCall'])) {
        $this->capableVoiceCall = $vals['capableVoiceCall'];
      }
      if (isset($vals['capableVideoCall'])) {
        $this->capableVideoCall = $vals['capableVideoCall'];
      }
      if (isset($vals['capableMyhome'])) {
        $this->capableMyhome = $vals['capableMyhome'];
      }
      if (isset($vals['capableBuddy'])) {
        $this->capableBuddy = $vals['capableBuddy'];
      }
      if (isset($vals['attributes'])) {
        $this->attributes = $vals['attributes'];
      }
      if (isset($vals['settings'])) {
        $this->settings = $vals['settings'];
      }
      if (isset($vals['picturePath'])) {
        $this->picturePath = $vals['picturePath'];
      }
      if (isset($vals['recommendParams'])) {
        $this->recommendParams = $vals['recommendParams'];
      }
      if (isset($vals['friendRequestStatus'])) {
        $this->friendRequestStatus = $vals['friendRequestStatus'];
      }
      if (isset($vals['musicProfile'])) {
        $this->musicProfile = $vals['musicProfile'];
      }
      if (isset($vals['videoProfile'])) {
        $this->videoProfile = $vals['videoProfile'];
      }
      if (isset($vals['statusMessageContentMetadata'])) {
        $this->statusMessageContentMetadata = $vals['statusMessageContentMetadata'];
      }
    }
  }

  public function getName() {
    return 'Contact';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->createdTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->relation);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->displayName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->phoneticName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 24:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pictureStatus);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 25:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->thumbnailUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 26:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->statusMessage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 27:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->displayNameOverridden);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 28:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->favoriteTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 31:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->capableVoiceCall);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 32:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->capableVideoCall);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 33:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->capableMyhome);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 34:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->capableBuddy);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 35:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->attributes);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 36:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->settings);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 37:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->picturePath);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 38:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->recommendParams);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 39:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->friendRequestStatus);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 40:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->musicProfile);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 42:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->videoProfile);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 43:
          if ($ftype == TType::MAP) {
            $this->statusMessageContentMetadata = array();
            $_size243 = 0;
            $_ktype244 = 0;
            $_vtype245 = 0;
            $xfer += $input->readMapBegin($_ktype244, $_vtype245, $_size243);
            for ($_i247 = 0; $_i247 < $_size243; ++$_i247)
            {
              $key248 = '';
              $val249 = '';
              $xfer += $input->readString($key248);
              $xfer += $input->readString($val249);
              $this->statusMessageContentMetadata[$key248] = $val249;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Contact');
    if ($this->mid !== null) {
      $xfer += $output->writeFieldBegin('mid', TType::STRING, 1);
      $xfer += $output->writeString($this->mid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createdTime !== null) {
      $xfer += $output->writeFieldBegin('createdTime', TType::I64, 2);
      $xfer += $output->writeI64($this->createdTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 10);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 11);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->relation !== null) {
      $xfer += $output->writeFieldBegin('relation', TType::I32, 21);
      $xfer += $output->writeI32($this->relation);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->displayName !== null) {
      $xfer += $output->writeFieldBegin('displayName', TType::STRING, 22);
      $xfer += $output->writeString($this->displayName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->phoneticName !== null) {
      $xfer += $output->writeFieldBegin('phoneticName', TType::STRING, 23);
      $xfer += $output->writeString($this->phoneticName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pictureStatus !== null) {
      $xfer += $output->writeFieldBegin('pictureStatus', TType::STRING, 24);
      $xfer += $output->writeString($this->pictureStatus);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->thumbnailUrl !== null) {
      $xfer += $output->writeFieldBegin('thumbnailUrl', TType::STRING, 25);
      $xfer += $output->writeString($this->thumbnailUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->statusMessage !== null) {
      $xfer += $output->writeFieldBegin('statusMessage', TType::STRING, 26);
      $xfer += $output->writeString($this->statusMessage);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->displayNameOverridden !== null) {
      $xfer += $output->writeFieldBegin('displayNameOverridden', TType::STRING, 27);
      $xfer += $output->writeString($this->displayNameOverridden);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->favoriteTime !== null) {
      $xfer += $output->writeFieldBegin('favoriteTime', TType::I64, 28);
      $xfer += $output->writeI64($this->favoriteTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->capableVoiceCall !== null) {
      $xfer += $output->writeFieldBegin('capableVoiceCall', TType::BOOL, 31);
      $xfer += $output->writeBool($this->capableVoiceCall);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->capableVideoCall !== null) {
      $xfer += $output->writeFieldBegin('capableVideoCall', TType::BOOL, 32);
      $xfer += $output->writeBool($this->capableVideoCall);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->capableMyhome !== null) {
      $xfer += $output->writeFieldBegin('capableMyhome', TType::BOOL, 33);
      $xfer += $output->writeBool($this->capableMyhome);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->capableBuddy !== null) {
      $xfer += $output->writeFieldBegin('capableBuddy', TType::BOOL, 34);
      $xfer += $output->writeBool($this->capableBuddy);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->attributes !== null) {
      $xfer += $output->writeFieldBegin('attributes', TType::I32, 35);
      $xfer += $output->writeI32($this->attributes);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->settings !== null) {
      $xfer += $output->writeFieldBegin('settings', TType::I64, 36);
      $xfer += $output->writeI64($this->settings);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->picturePath !== null) {
      $xfer += $output->writeFieldBegin('picturePath', TType::STRING, 37);
      $xfer += $output->writeString($this->picturePath);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->recommendParams !== null) {
      $xfer += $output->writeFieldBegin('recommendParams', TType::STRING, 38);
      $xfer += $output->writeString($this->recommendParams);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->friendRequestStatus !== null) {
      $xfer += $output->writeFieldBegin('friendRequestStatus', TType::I32, 39);
      $xfer += $output->writeI32($this->friendRequestStatus);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->musicProfile !== null) {
      $xfer += $output->writeFieldBegin('musicProfile', TType::STRING, 40);
      $xfer += $output->writeString($this->musicProfile);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->videoProfile !== null) {
      $xfer += $output->writeFieldBegin('videoProfile', TType::STRING, 42);
      $xfer += $output->writeString($this->videoProfile);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->statusMessageContentMetadata !== null) {
      if (!is_array($this->statusMessageContentMetadata)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('statusMessageContentMetadata', TType::MAP, 43);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->statusMessageContentMetadata));
        {
          foreach ($this->statusMessageContentMetadata as $kiter250 => $viter251)
          {
            $xfer += $output->writeString($kiter250);
            $xfer += $output->writeString($viter251);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BuddyList {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'classification',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'displayName',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'totalBuddyCount',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    4 => array(
      'var' => 'popularContacts',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\Contact',
        ),
      ),
    );

  /**
   * @var string
   */
  public $classification = null;
  /**
   * @var string
   */
  public $displayName = null;
  /**
   * @var int
   */
  public $totalBuddyCount = null;
  /**
   * @var \Contact[]
   */
  public $popularContacts = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['classification'])) {
        $this->classification = $vals['classification'];
      }
      if (isset($vals['displayName'])) {
        $this->displayName = $vals['displayName'];
      }
      if (isset($vals['totalBuddyCount'])) {
        $this->totalBuddyCount = $vals['totalBuddyCount'];
      }
      if (isset($vals['popularContacts'])) {
        $this->popularContacts = $vals['popularContacts'];
      }
    }
  }

  public function getName() {
    return 'BuddyList';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->classification);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->displayName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->totalBuddyCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->popularContacts = array();
            $_size252 = 0;
            $_etype255 = 0;
            $xfer += $input->readListBegin($_etype255, $_size252);
            for ($_i256 = 0; $_i256 < $_size252; ++$_i256)
            {
              $elem257 = null;
              $elem257 = new \Contact();
              $xfer += $elem257->read($input);
              $this->popularContacts []= $elem257;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BuddyList');
    if ($this->classification !== null) {
      $xfer += $output->writeFieldBegin('classification', TType::STRING, 1);
      $xfer += $output->writeString($this->classification);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->displayName !== null) {
      $xfer += $output->writeFieldBegin('displayName', TType::STRING, 2);
      $xfer += $output->writeString($this->displayName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->totalBuddyCount !== null) {
      $xfer += $output->writeFieldBegin('totalBuddyCount', TType::I32, 3);
      $xfer += $output->writeI32($this->totalBuddyCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->popularContacts !== null) {
      if (!is_array($this->popularContacts)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('popularContacts', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRUCT, count($this->popularContacts));
        {
          foreach ($this->popularContacts as $iter258)
          {
            $xfer += $iter258->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class RegisterWithPhoneNumberResult {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'authToken',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'recommendEmailRegistration',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    3 => array(
      'var' => 'certificate',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $authToken = null;
  /**
   * @var bool
   */
  public $recommendEmailRegistration = null;
  /**
   * @var string
   */
  public $certificate = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['authToken'])) {
        $this->authToken = $vals['authToken'];
      }
      if (isset($vals['recommendEmailRegistration'])) {
        $this->recommendEmailRegistration = $vals['recommendEmailRegistration'];
      }
      if (isset($vals['certificate'])) {
        $this->certificate = $vals['certificate'];
      }
    }
  }

  public function getName() {
    return 'RegisterWithPhoneNumberResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->authToken);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->recommendEmailRegistration);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->certificate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RegisterWithPhoneNumberResult');
    if ($this->authToken !== null) {
      $xfer += $output->writeFieldBegin('authToken', TType::STRING, 1);
      $xfer += $output->writeString($this->authToken);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->recommendEmailRegistration !== null) {
      $xfer += $output->writeFieldBegin('recommendEmailRegistration', TType::BOOL, 2);
      $xfer += $output->writeBool($this->recommendEmailRegistration);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->certificate !== null) {
      $xfer += $output->writeFieldBegin('certificate', TType::STRING, 3);
      $xfer += $output->writeString($this->certificate);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BuddyMessageRequest {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'contentType',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'text',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'location',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Location',
      ),
    4 => array(
      'var' => 'content',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'contentMetadata',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRING,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRING,
        ),
      ),
    );

  /**
   * @var int
   */
  public $contentType = null;
  /**
   * @var string
   */
  public $text = null;
  /**
   * @var \Location
   */
  public $location = null;
  /**
   * @var string
   */
  public $content = null;
  /**
   * @var array
   */
  public $contentMetadata = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['contentType'])) {
        $this->contentType = $vals['contentType'];
      }
      if (isset($vals['text'])) {
        $this->text = $vals['text'];
      }
      if (isset($vals['location'])) {
        $this->location = $vals['location'];
      }
      if (isset($vals['content'])) {
        $this->content = $vals['content'];
      }
      if (isset($vals['contentMetadata'])) {
        $this->contentMetadata = $vals['contentMetadata'];
      }
    }
  }

  public function getName() {
    return 'BuddyMessageRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->contentType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->text);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->location = new \Location();
            $xfer += $this->location->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->content);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::MAP) {
            $this->contentMetadata = array();
            $_size259 = 0;
            $_ktype260 = 0;
            $_vtype261 = 0;
            $xfer += $input->readMapBegin($_ktype260, $_vtype261, $_size259);
            for ($_i263 = 0; $_i263 < $_size259; ++$_i263)
            {
              $key264 = '';
              $val265 = '';
              $xfer += $input->readString($key264);
              $xfer += $input->readString($val265);
              $this->contentMetadata[$key264] = $val265;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BuddyMessageRequest');
    if ($this->contentType !== null) {
      $xfer += $output->writeFieldBegin('contentType', TType::I32, 1);
      $xfer += $output->writeI32($this->contentType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->text !== null) {
      $xfer += $output->writeFieldBegin('text', TType::STRING, 2);
      $xfer += $output->writeString($this->text);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->location !== null) {
      if (!is_object($this->location)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('location', TType::STRUCT, 3);
      $xfer += $this->location->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->content !== null) {
      $xfer += $output->writeFieldBegin('content', TType::STRING, 4);
      $xfer += $output->writeString($this->content);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contentMetadata !== null) {
      if (!is_array($this->contentMetadata)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('contentMetadata', TType::MAP, 5);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->contentMetadata));
        {
          foreach ($this->contentMetadata as $kiter266 => $viter267)
          {
            $xfer += $output->writeString($kiter266);
            $xfer += $output->writeString($viter267);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BuddyOnAirUrls {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'hls',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRING,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRING,
        ),
      ),
    2 => array(
      'var' => 'smoothStreaming',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRING,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRING,
        ),
      ),
    );

  /**
   * @var array
   */
  public $hls = null;
  /**
   * @var array
   */
  public $smoothStreaming = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['hls'])) {
        $this->hls = $vals['hls'];
      }
      if (isset($vals['smoothStreaming'])) {
        $this->smoothStreaming = $vals['smoothStreaming'];
      }
    }
  }

  public function getName() {
    return 'BuddyOnAirUrls';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->hls = array();
            $_size268 = 0;
            $_ktype269 = 0;
            $_vtype270 = 0;
            $xfer += $input->readMapBegin($_ktype269, $_vtype270, $_size268);
            for ($_i272 = 0; $_i272 < $_size268; ++$_i272)
            {
              $key273 = '';
              $val274 = '';
              $xfer += $input->readString($key273);
              $xfer += $input->readString($val274);
              $this->hls[$key273] = $val274;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::MAP) {
            $this->smoothStreaming = array();
            $_size275 = 0;
            $_ktype276 = 0;
            $_vtype277 = 0;
            $xfer += $input->readMapBegin($_ktype276, $_vtype277, $_size275);
            for ($_i279 = 0; $_i279 < $_size275; ++$_i279)
            {
              $key280 = '';
              $val281 = '';
              $xfer += $input->readString($key280);
              $xfer += $input->readString($val281);
              $this->smoothStreaming[$key280] = $val281;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BuddyOnAirUrls');
    if ($this->hls !== null) {
      if (!is_array($this->hls)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('hls', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->hls));
        {
          foreach ($this->hls as $kiter282 => $viter283)
          {
            $xfer += $output->writeString($kiter282);
            $xfer += $output->writeString($viter283);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->smoothStreaming !== null) {
      if (!is_array($this->smoothStreaming)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('smoothStreaming', TType::MAP, 2);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->smoothStreaming));
        {
          foreach ($this->smoothStreaming as $kiter284 => $viter285)
          {
            $xfer += $output->writeString($kiter284);
            $xfer += $output->writeString($viter285);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BuddyOnAir {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'mid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'freshnessLifetime',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    4 => array(
      'var' => 'onAirId',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'onAir',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    11 => array(
      'var' => 'text',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    12 => array(
      'var' => 'viewerCount',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    13 => array(
      'var' => 'targetCount',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    31 => array(
      'var' => 'onAirType',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    32 => array(
      'var' => 'onAirUrls',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\BuddyOnAirUrls',
      ),
    );

  /**
   * @var string
   */
  public $mid = null;
  /**
   * @var int
   */
  public $freshnessLifetime = null;
  /**
   * @var string
   */
  public $onAirId = null;
  /**
   * @var bool
   */
  public $onAir = null;
  /**
   * @var string
   */
  public $text = null;
  /**
   * @var int
   */
  public $viewerCount = null;
  /**
   * @var int
   */
  public $targetCount = null;
  /**
   * @var int
   */
  public $onAirType = null;
  /**
   * @var \BuddyOnAirUrls
   */
  public $onAirUrls = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['mid'])) {
        $this->mid = $vals['mid'];
      }
      if (isset($vals['freshnessLifetime'])) {
        $this->freshnessLifetime = $vals['freshnessLifetime'];
      }
      if (isset($vals['onAirId'])) {
        $this->onAirId = $vals['onAirId'];
      }
      if (isset($vals['onAir'])) {
        $this->onAir = $vals['onAir'];
      }
      if (isset($vals['text'])) {
        $this->text = $vals['text'];
      }
      if (isset($vals['viewerCount'])) {
        $this->viewerCount = $vals['viewerCount'];
      }
      if (isset($vals['targetCount'])) {
        $this->targetCount = $vals['targetCount'];
      }
      if (isset($vals['onAirType'])) {
        $this->onAirType = $vals['onAirType'];
      }
      if (isset($vals['onAirUrls'])) {
        $this->onAirUrls = $vals['onAirUrls'];
      }
    }
  }

  public function getName() {
    return 'BuddyOnAir';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->freshnessLifetime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->onAirId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->onAir);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->text);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->viewerCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->targetCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 31:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->onAirType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 32:
          if ($ftype == TType::STRUCT) {
            $this->onAirUrls = new \BuddyOnAirUrls();
            $xfer += $this->onAirUrls->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BuddyOnAir');
    if ($this->mid !== null) {
      $xfer += $output->writeFieldBegin('mid', TType::STRING, 1);
      $xfer += $output->writeString($this->mid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->freshnessLifetime !== null) {
      $xfer += $output->writeFieldBegin('freshnessLifetime', TType::I64, 3);
      $xfer += $output->writeI64($this->freshnessLifetime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->onAirId !== null) {
      $xfer += $output->writeFieldBegin('onAirId', TType::STRING, 4);
      $xfer += $output->writeString($this->onAirId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->onAir !== null) {
      $xfer += $output->writeFieldBegin('onAir', TType::BOOL, 5);
      $xfer += $output->writeBool($this->onAir);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->text !== null) {
      $xfer += $output->writeFieldBegin('text', TType::STRING, 11);
      $xfer += $output->writeString($this->text);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->viewerCount !== null) {
      $xfer += $output->writeFieldBegin('viewerCount', TType::I64, 12);
      $xfer += $output->writeI64($this->viewerCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->targetCount !== null) {
      $xfer += $output->writeFieldBegin('targetCount', TType::I64, 13);
      $xfer += $output->writeI64($this->targetCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->onAirType !== null) {
      $xfer += $output->writeFieldBegin('onAirType', TType::I32, 31);
      $xfer += $output->writeI32($this->onAirType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->onAirUrls !== null) {
      if (!is_object($this->onAirUrls)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('onAirUrls', TType::STRUCT, 32);
      $xfer += $this->onAirUrls->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BuddyProfile {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'buddyId',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'mid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'searchId',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'displayName',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'statusMessage',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    11 => array(
      'var' => 'contactCount',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    );

  /**
   * @var string
   */
  public $buddyId = null;
  /**
   * @var string
   */
  public $mid = null;
  /**
   * @var string
   */
  public $searchId = null;
  /**
   * @var string
   */
  public $displayName = null;
  /**
   * @var string
   */
  public $statusMessage = null;
  /**
   * @var int
   */
  public $contactCount = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['buddyId'])) {
        $this->buddyId = $vals['buddyId'];
      }
      if (isset($vals['mid'])) {
        $this->mid = $vals['mid'];
      }
      if (isset($vals['searchId'])) {
        $this->searchId = $vals['searchId'];
      }
      if (isset($vals['displayName'])) {
        $this->displayName = $vals['displayName'];
      }
      if (isset($vals['statusMessage'])) {
        $this->statusMessage = $vals['statusMessage'];
      }
      if (isset($vals['contactCount'])) {
        $this->contactCount = $vals['contactCount'];
      }
    }
  }

  public function getName() {
    return 'BuddyProfile';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->buddyId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->searchId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->displayName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->statusMessage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->contactCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BuddyProfile');
    if ($this->buddyId !== null) {
      $xfer += $output->writeFieldBegin('buddyId', TType::STRING, 1);
      $xfer += $output->writeString($this->buddyId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mid !== null) {
      $xfer += $output->writeFieldBegin('mid', TType::STRING, 2);
      $xfer += $output->writeString($this->mid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->searchId !== null) {
      $xfer += $output->writeFieldBegin('searchId', TType::STRING, 3);
      $xfer += $output->writeString($this->searchId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->displayName !== null) {
      $xfer += $output->writeFieldBegin('displayName', TType::STRING, 4);
      $xfer += $output->writeString($this->displayName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->statusMessage !== null) {
      $xfer += $output->writeFieldBegin('statusMessage', TType::STRING, 5);
      $xfer += $output->writeString($this->statusMessage);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contactCount !== null) {
      $xfer += $output->writeFieldBegin('contactCount', TType::I64, 11);
      $xfer += $output->writeI64($this->contactCount);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CommitMessageResult {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'message',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Message',
      ),
    2 => array(
      'var' => 'code',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    3 => array(
      'var' => 'reason',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'successCount',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    5 => array(
      'var' => 'failCount',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    6 => array(
      'var' => 'unregisterCount',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    7 => array(
      'var' => 'blockCount',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    );

  /**
   * @var \Message
   */
  public $message = null;
  /**
   * @var int
   */
  public $code = null;
  /**
   * @var string
   */
  public $reason = null;
  /**
   * @var int
   */
  public $successCount = null;
  /**
   * @var int
   */
  public $failCount = null;
  /**
   * @var int
   */
  public $unregisterCount = null;
  /**
   * @var int
   */
  public $blockCount = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['reason'])) {
        $this->reason = $vals['reason'];
      }
      if (isset($vals['successCount'])) {
        $this->successCount = $vals['successCount'];
      }
      if (isset($vals['failCount'])) {
        $this->failCount = $vals['failCount'];
      }
      if (isset($vals['unregisterCount'])) {
        $this->unregisterCount = $vals['unregisterCount'];
      }
      if (isset($vals['blockCount'])) {
        $this->blockCount = $vals['blockCount'];
      }
    }
  }

  public function getName() {
    return 'CommitMessageResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->message = new \Message();
            $xfer += $this->message->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->reason);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->successCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->failCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->unregisterCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->blockCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CommitMessageResult');
    if ($this->message !== null) {
      if (!is_object($this->message)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('message', TType::STRUCT, 1);
      $xfer += $this->message->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 2);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reason !== null) {
      $xfer += $output->writeFieldBegin('reason', TType::STRING, 3);
      $xfer += $output->writeString($this->reason);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->successCount !== null) {
      $xfer += $output->writeFieldBegin('successCount', TType::I64, 4);
      $xfer += $output->writeI64($this->successCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->failCount !== null) {
      $xfer += $output->writeFieldBegin('failCount', TType::I64, 5);
      $xfer += $output->writeI64($this->failCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->unregisterCount !== null) {
      $xfer += $output->writeFieldBegin('unregisterCount', TType::I64, 6);
      $xfer += $output->writeI64($this->unregisterCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->blockCount !== null) {
      $xfer += $output->writeFieldBegin('blockCount', TType::I64, 7);
      $xfer += $output->writeI64($this->blockCount);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SyncParamMid {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'mid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'diff',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    3 => array(
      'var' => 'revision',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    );

  /**
   * @var string
   */
  public $mid = null;
  /**
   * @var int
   */
  public $diff = null;
  /**
   * @var int
   */
  public $revision = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['mid'])) {
        $this->mid = $vals['mid'];
      }
      if (isset($vals['diff'])) {
        $this->diff = $vals['diff'];
      }
      if (isset($vals['revision'])) {
        $this->revision = $vals['revision'];
      }
    }
  }

  public function getName() {
    return 'SyncParamMid';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->diff);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->revision);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SyncParamMid');
    if ($this->mid !== null) {
      $xfer += $output->writeFieldBegin('mid', TType::STRING, 1);
      $xfer += $output->writeString($this->mid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->diff !== null) {
      $xfer += $output->writeFieldBegin('diff', TType::I32, 2);
      $xfer += $output->writeI32($this->diff);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->revision !== null) {
      $xfer += $output->writeFieldBegin('revision', TType::I64, 3);
      $xfer += $output->writeI64($this->revision);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SIMInfo {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'phoneNumber',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'countryCode',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $phoneNumber = null;
  /**
   * @var string
   */
  public $countryCode = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['phoneNumber'])) {
        $this->phoneNumber = $vals['phoneNumber'];
      }
      if (isset($vals['countryCode'])) {
        $this->countryCode = $vals['countryCode'];
      }
    }
  }

  public function getName() {
    return 'SIMInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->phoneNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->countryCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SIMInfo');
    if ($this->phoneNumber !== null) {
      $xfer += $output->writeFieldBegin('phoneNumber', TType::STRING, 1);
      $xfer += $output->writeString($this->phoneNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->countryCode !== null) {
      $xfer += $output->writeFieldBegin('countryCode', TType::STRING, 2);
      $xfer += $output->writeString($this->countryCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SyncParamContact {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'syncParamMid',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SyncParamMid',
      ),
    2 => array(
      'var' => 'contactStatus',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var \SyncParamMid
   */
  public $syncParamMid = null;
  /**
   * @var int
   */
  public $contactStatus = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['syncParamMid'])) {
        $this->syncParamMid = $vals['syncParamMid'];
      }
      if (isset($vals['contactStatus'])) {
        $this->contactStatus = $vals['contactStatus'];
      }
    }
  }

  public function getName() {
    return 'SyncParamContact';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->syncParamMid = new \SyncParamMid();
            $xfer += $this->syncParamMid->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->contactStatus);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SyncParamContact');
    if ($this->syncParamMid !== null) {
      if (!is_object($this->syncParamMid)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('syncParamMid', TType::STRUCT, 1);
      $xfer += $this->syncParamMid->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contactStatus !== null) {
      $xfer += $output->writeFieldBegin('contactStatus', TType::I32, 2);
      $xfer += $output->writeI32($this->contactStatus);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ChannelDomains {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'channelDomains',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\ChannelDomain',
        ),
      ),
    2 => array(
      'var' => 'revision',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    );

  /**
   * @var \ChannelDomain[]
   */
  public $channelDomains = null;
  /**
   * @var int
   */
  public $revision = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['channelDomains'])) {
        $this->channelDomains = $vals['channelDomains'];
      }
      if (isset($vals['revision'])) {
        $this->revision = $vals['revision'];
      }
    }
  }

  public function getName() {
    return 'ChannelDomains';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->channelDomains = array();
            $_size286 = 0;
            $_etype289 = 0;
            $xfer += $input->readListBegin($_etype289, $_size286);
            for ($_i290 = 0; $_i290 < $_size286; ++$_i290)
            {
              $elem291 = null;
              $elem291 = new \ChannelDomain();
              $xfer += $elem291->read($input);
              $this->channelDomains []= $elem291;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->revision);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ChannelDomains');
    if ($this->channelDomains !== null) {
      if (!is_array($this->channelDomains)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('channelDomains', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->channelDomains));
        {
          foreach ($this->channelDomains as $iter292)
          {
            $xfer += $iter292->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->revision !== null) {
      $xfer += $output->writeFieldBegin('revision', TType::I64, 2);
      $xfer += $output->writeI64($this->revision);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ProductCategory {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'productCategoryId',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    2 => array(
      'var' => 'title',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'productCount',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    4 => array(
      'var' => 'newFlag',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var int
   */
  public $productCategoryId = null;
  /**
   * @var string
   */
  public $title = null;
  /**
   * @var int
   */
  public $productCount = null;
  /**
   * @var bool
   */
  public $newFlag = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['productCategoryId'])) {
        $this->productCategoryId = $vals['productCategoryId'];
      }
      if (isset($vals['title'])) {
        $this->title = $vals['title'];
      }
      if (isset($vals['productCount'])) {
        $this->productCount = $vals['productCount'];
      }
      if (isset($vals['newFlag'])) {
        $this->newFlag = $vals['newFlag'];
      }
    }
  }

  public function getName() {
    return 'ProductCategory';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->productCategoryId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->title);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->productCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->newFlag);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ProductCategory');
    if ($this->productCategoryId !== null) {
      $xfer += $output->writeFieldBegin('productCategoryId', TType::I64, 1);
      $xfer += $output->writeI64($this->productCategoryId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->title !== null) {
      $xfer += $output->writeFieldBegin('title', TType::STRING, 2);
      $xfer += $output->writeString($this->title);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->productCount !== null) {
      $xfer += $output->writeFieldBegin('productCount', TType::I32, 3);
      $xfer += $output->writeI32($this->productCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->newFlag !== null) {
      $xfer += $output->writeFieldBegin('newFlag', TType::BOOL, 4);
      $xfer += $output->writeBool($this->newFlag);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ChannelInfos {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'channelInfos',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\ChannelInfo',
        ),
      ),
    2 => array(
      'var' => 'revision',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    );

  /**
   * @var \ChannelInfo[]
   */
  public $channelInfos = null;
  /**
   * @var int
   */
  public $revision = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['channelInfos'])) {
        $this->channelInfos = $vals['channelInfos'];
      }
      if (isset($vals['revision'])) {
        $this->revision = $vals['revision'];
      }
    }
  }

  public function getName() {
    return 'ChannelInfos';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->channelInfos = array();
            $_size293 = 0;
            $_etype296 = 0;
            $xfer += $input->readListBegin($_etype296, $_size293);
            for ($_i297 = 0; $_i297 < $_size293; ++$_i297)
            {
              $elem298 = null;
              $elem298 = new \ChannelInfo();
              $xfer += $elem298->read($input);
              $this->channelInfos []= $elem298;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->revision);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ChannelInfos');
    if ($this->channelInfos !== null) {
      if (!is_array($this->channelInfos)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('channelInfos', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->channelInfos));
        {
          foreach ($this->channelInfos as $iter299)
          {
            $xfer += $iter299->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->revision !== null) {
      $xfer += $output->writeFieldBegin('revision', TType::I64, 2);
      $xfer += $output->writeI64($this->revision);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ChannelNotificationSetting {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'channelId',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'name',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'notificationReceivable',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    4 => array(
      'var' => 'messageReceivable',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    5 => array(
      'var' => 'showDefault',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var string
   */
  public $channelId = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var bool
   */
  public $notificationReceivable = null;
  /**
   * @var bool
   */
  public $messageReceivable = null;
  /**
   * @var bool
   */
  public $showDefault = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['channelId'])) {
        $this->channelId = $vals['channelId'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['notificationReceivable'])) {
        $this->notificationReceivable = $vals['notificationReceivable'];
      }
      if (isset($vals['messageReceivable'])) {
        $this->messageReceivable = $vals['messageReceivable'];
      }
      if (isset($vals['showDefault'])) {
        $this->showDefault = $vals['showDefault'];
      }
    }
  }

  public function getName() {
    return 'ChannelNotificationSetting';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->channelId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->notificationReceivable);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->messageReceivable);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->showDefault);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ChannelNotificationSetting');
    if ($this->channelId !== null) {
      $xfer += $output->writeFieldBegin('channelId', TType::STRING, 1);
      $xfer += $output->writeString($this->channelId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notificationReceivable !== null) {
      $xfer += $output->writeFieldBegin('notificationReceivable', TType::BOOL, 3);
      $xfer += $output->writeBool($this->notificationReceivable);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->messageReceivable !== null) {
      $xfer += $output->writeFieldBegin('messageReceivable', TType::BOOL, 4);
      $xfer += $output->writeBool($this->messageReceivable);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->showDefault !== null) {
      $xfer += $output->writeFieldBegin('showDefault', TType::BOOL, 5);
      $xfer += $output->writeBool($this->showDefault);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ChannelSyncDatas {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'channelInfos',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\ChannelInfo',
        ),
      ),
    2 => array(
      'var' => 'channelDomains',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\ChannelDomain',
        ),
      ),
    3 => array(
      'var' => 'revision',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    4 => array(
      'var' => 'expires',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    );

  /**
   * @var \ChannelInfo[]
   */
  public $channelInfos = null;
  /**
   * @var \ChannelDomain[]
   */
  public $channelDomains = null;
  /**
   * @var int
   */
  public $revision = null;
  /**
   * @var int
   */
  public $expires = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['channelInfos'])) {
        $this->channelInfos = $vals['channelInfos'];
      }
      if (isset($vals['channelDomains'])) {
        $this->channelDomains = $vals['channelDomains'];
      }
      if (isset($vals['revision'])) {
        $this->revision = $vals['revision'];
      }
      if (isset($vals['expires'])) {
        $this->expires = $vals['expires'];
      }
    }
  }

  public function getName() {
    return 'ChannelSyncDatas';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->channelInfos = array();
            $_size300 = 0;
            $_etype303 = 0;
            $xfer += $input->readListBegin($_etype303, $_size300);
            for ($_i304 = 0; $_i304 < $_size300; ++$_i304)
            {
              $elem305 = null;
              $elem305 = new \ChannelInfo();
              $xfer += $elem305->read($input);
              $this->channelInfos []= $elem305;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->channelDomains = array();
            $_size306 = 0;
            $_etype309 = 0;
            $xfer += $input->readListBegin($_etype309, $_size306);
            for ($_i310 = 0; $_i310 < $_size306; ++$_i310)
            {
              $elem311 = null;
              $elem311 = new \ChannelDomain();
              $xfer += $elem311->read($input);
              $this->channelDomains []= $elem311;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->revision);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->expires);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ChannelSyncDatas');
    if ($this->channelInfos !== null) {
      if (!is_array($this->channelInfos)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('channelInfos', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->channelInfos));
        {
          foreach ($this->channelInfos as $iter312)
          {
            $xfer += $iter312->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->channelDomains !== null) {
      if (!is_array($this->channelDomains)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('channelDomains', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->channelDomains));
        {
          foreach ($this->channelDomains as $iter313)
          {
            $xfer += $iter313->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->revision !== null) {
      $xfer += $output->writeFieldBegin('revision', TType::I64, 3);
      $xfer += $output->writeI64($this->revision);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expires !== null) {
      $xfer += $output->writeFieldBegin('expires', TType::I64, 4);
      $xfer += $output->writeI64($this->expires);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class NotiCenterEventData {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'to',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'from_',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'toChannel',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'fromChannel',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'eventType',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    7 => array(
      'var' => 'createdTime',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    8 => array(
      'var' => 'operationRevision',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    9 => array(
      'var' => 'content',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRING,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRING,
        ),
      ),
    10 => array(
      'var' => 'push',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRING,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRING,
        ),
      ),
    );

  /**
   * @var string
   */
  public $id = null;
  /**
   * @var string
   */
  public $to = null;
  /**
   * @var string
   */
  public $from_ = null;
  /**
   * @var string
   */
  public $toChannel = null;
  /**
   * @var string
   */
  public $fromChannel = null;
  /**
   * @var string
   */
  public $eventType = null;
  /**
   * @var int
   */
  public $createdTime = null;
  /**
   * @var int
   */
  public $operationRevision = null;
  /**
   * @var array
   */
  public $content = null;
  /**
   * @var array
   */
  public $push = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['to'])) {
        $this->to = $vals['to'];
      }
      if (isset($vals['from_'])) {
        $this->from_ = $vals['from_'];
      }
      if (isset($vals['toChannel'])) {
        $this->toChannel = $vals['toChannel'];
      }
      if (isset($vals['fromChannel'])) {
        $this->fromChannel = $vals['fromChannel'];
      }
      if (isset($vals['eventType'])) {
        $this->eventType = $vals['eventType'];
      }
      if (isset($vals['createdTime'])) {
        $this->createdTime = $vals['createdTime'];
      }
      if (isset($vals['operationRevision'])) {
        $this->operationRevision = $vals['operationRevision'];
      }
      if (isset($vals['content'])) {
        $this->content = $vals['content'];
      }
      if (isset($vals['push'])) {
        $this->push = $vals['push'];
      }
    }
  }

  public function getName() {
    return 'NotiCenterEventData';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->to);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->from_);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->toChannel);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fromChannel);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->eventType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->createdTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->operationRevision);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::MAP) {
            $this->content = array();
            $_size314 = 0;
            $_ktype315 = 0;
            $_vtype316 = 0;
            $xfer += $input->readMapBegin($_ktype315, $_vtype316, $_size314);
            for ($_i318 = 0; $_i318 < $_size314; ++$_i318)
            {
              $key319 = '';
              $val320 = '';
              $xfer += $input->readString($key319);
              $xfer += $input->readString($val320);
              $this->content[$key319] = $val320;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::MAP) {
            $this->push = array();
            $_size321 = 0;
            $_ktype322 = 0;
            $_vtype323 = 0;
            $xfer += $input->readMapBegin($_ktype322, $_vtype323, $_size321);
            for ($_i325 = 0; $_i325 < $_size321; ++$_i325)
            {
              $key326 = '';
              $val327 = '';
              $xfer += $input->readString($key326);
              $xfer += $input->readString($val327);
              $this->push[$key326] = $val327;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('NotiCenterEventData');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->to !== null) {
      $xfer += $output->writeFieldBegin('to', TType::STRING, 2);
      $xfer += $output->writeString($this->to);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->from_ !== null) {
      $xfer += $output->writeFieldBegin('from_', TType::STRING, 3);
      $xfer += $output->writeString($this->from_);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->toChannel !== null) {
      $xfer += $output->writeFieldBegin('toChannel', TType::STRING, 4);
      $xfer += $output->writeString($this->toChannel);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fromChannel !== null) {
      $xfer += $output->writeFieldBegin('fromChannel', TType::STRING, 5);
      $xfer += $output->writeString($this->fromChannel);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->eventType !== null) {
      $xfer += $output->writeFieldBegin('eventType', TType::STRING, 6);
      $xfer += $output->writeString($this->eventType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createdTime !== null) {
      $xfer += $output->writeFieldBegin('createdTime', TType::I64, 7);
      $xfer += $output->writeI64($this->createdTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->operationRevision !== null) {
      $xfer += $output->writeFieldBegin('operationRevision', TType::I64, 8);
      $xfer += $output->writeI64($this->operationRevision);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->content !== null) {
      if (!is_array($this->content)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('content', TType::MAP, 9);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->content));
        {
          foreach ($this->content as $kiter328 => $viter329)
          {
            $xfer += $output->writeString($kiter328);
            $xfer += $output->writeString($viter329);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->push !== null) {
      if (!is_array($this->push)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('push', TType::MAP, 10);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->push));
        {
          foreach ($this->push as $kiter330 => $viter331)
          {
            $xfer += $output->writeString($kiter330);
            $xfer += $output->writeString($viter331);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ChannelToken {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'token',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'obsToken',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'expiration',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    4 => array(
      'var' => 'refreshToken',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'channelAccessToken',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $token = null;
  /**
   * @var string
   */
  public $obsToken = null;
  /**
   * @var int
   */
  public $expiration = null;
  /**
   * @var string
   */
  public $refreshToken = null;
  /**
   * @var string
   */
  public $channelAccessToken = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['obsToken'])) {
        $this->obsToken = $vals['obsToken'];
      }
      if (isset($vals['expiration'])) {
        $this->expiration = $vals['expiration'];
      }
      if (isset($vals['refreshToken'])) {
        $this->refreshToken = $vals['refreshToken'];
      }
      if (isset($vals['channelAccessToken'])) {
        $this->channelAccessToken = $vals['channelAccessToken'];
      }
    }
  }

  public function getName() {
    return 'ChannelToken';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->obsToken);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->expiration);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->refreshToken);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->channelAccessToken);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ChannelToken');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->obsToken !== null) {
      $xfer += $output->writeFieldBegin('obsToken', TType::STRING, 2);
      $xfer += $output->writeString($this->obsToken);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expiration !== null) {
      $xfer += $output->writeFieldBegin('expiration', TType::I64, 3);
      $xfer += $output->writeI64($this->expiration);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->refreshToken !== null) {
      $xfer += $output->writeFieldBegin('refreshToken', TType::STRING, 4);
      $xfer += $output->writeString($this->refreshToken);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->channelAccessToken !== null) {
      $xfer += $output->writeFieldBegin('channelAccessToken', TType::STRING, 5);
      $xfer += $output->writeString($this->channelAccessToken);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ChannelSettings {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'unapprovedMessageReceivable',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var bool
   */
  public $unapprovedMessageReceivable = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['unapprovedMessageReceivable'])) {
        $this->unapprovedMessageReceivable = $vals['unapprovedMessageReceivable'];
      }
    }
  }

  public function getName() {
    return 'ChannelSettings';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->unapprovedMessageReceivable);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ChannelSettings');
    if ($this->unapprovedMessageReceivable !== null) {
      $xfer += $output->writeFieldBegin('unapprovedMessageReceivable', TType::BOOL, 1);
      $xfer += $output->writeBool($this->unapprovedMessageReceivable);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ChannelIdWithLastUpdated {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'channelId',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'lastUpdated',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    );

  /**
   * @var string
   */
  public $channelId = null;
  /**
   * @var int
   */
  public $lastUpdated = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['channelId'])) {
        $this->channelId = $vals['channelId'];
      }
      if (isset($vals['lastUpdated'])) {
        $this->lastUpdated = $vals['lastUpdated'];
      }
    }
  }

  public function getName() {
    return 'ChannelIdWithLastUpdated';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->channelId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->lastUpdated);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ChannelIdWithLastUpdated');
    if ($this->channelId !== null) {
      $xfer += $output->writeFieldBegin('channelId', TType::STRING, 1);
      $xfer += $output->writeString($this->channelId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lastUpdated !== null) {
      $xfer += $output->writeFieldBegin('lastUpdated', TType::I64, 2);
      $xfer += $output->writeI64($this->lastUpdated);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Coin {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'freeCoinBalance',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'payedCoinBalance',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    3 => array(
      'var' => 'totalCoinBalance',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    4 => array(
      'var' => 'rewardCoinBalance',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $freeCoinBalance = null;
  /**
   * @var int
   */
  public $payedCoinBalance = null;
  /**
   * @var int
   */
  public $totalCoinBalance = null;
  /**
   * @var int
   */
  public $rewardCoinBalance = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['freeCoinBalance'])) {
        $this->freeCoinBalance = $vals['freeCoinBalance'];
      }
      if (isset($vals['payedCoinBalance'])) {
        $this->payedCoinBalance = $vals['payedCoinBalance'];
      }
      if (isset($vals['totalCoinBalance'])) {
        $this->totalCoinBalance = $vals['totalCoinBalance'];
      }
      if (isset($vals['rewardCoinBalance'])) {
        $this->rewardCoinBalance = $vals['rewardCoinBalance'];
      }
    }
  }

  public function getName() {
    return 'Coin';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->freeCoinBalance);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->payedCoinBalance);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->totalCoinBalance);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->rewardCoinBalance);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Coin');
    if ($this->freeCoinBalance !== null) {
      $xfer += $output->writeFieldBegin('freeCoinBalance', TType::I32, 1);
      $xfer += $output->writeI32($this->freeCoinBalance);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->payedCoinBalance !== null) {
      $xfer += $output->writeFieldBegin('payedCoinBalance', TType::I32, 2);
      $xfer += $output->writeI32($this->payedCoinBalance);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->totalCoinBalance !== null) {
      $xfer += $output->writeFieldBegin('totalCoinBalance', TType::I32, 3);
      $xfer += $output->writeI32($this->totalCoinBalance);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rewardCoinBalance !== null) {
      $xfer += $output->writeFieldBegin('rewardCoinBalance', TType::I32, 4);
      $xfer += $output->writeI32($this->rewardCoinBalance);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CoinPayLoad {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'payCoin',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'freeCoin',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    3 => array(
      'var' => 'type',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    4 => array(
      'var' => 'rewardCoin',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $payCoin = null;
  /**
   * @var int
   */
  public $freeCoin = null;
  /**
   * @var int
   */
  public $type = null;
  /**
   * @var int
   */
  public $rewardCoin = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['payCoin'])) {
        $this->payCoin = $vals['payCoin'];
      }
      if (isset($vals['freeCoin'])) {
        $this->freeCoin = $vals['freeCoin'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['rewardCoin'])) {
        $this->rewardCoin = $vals['rewardCoin'];
      }
    }
  }

  public function getName() {
    return 'CoinPayLoad';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->payCoin);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->freeCoin);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->rewardCoin);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CoinPayLoad');
    if ($this->payCoin !== null) {
      $xfer += $output->writeFieldBegin('payCoin', TType::I32, 1);
      $xfer += $output->writeI32($this->payCoin);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->freeCoin !== null) {
      $xfer += $output->writeFieldBegin('freeCoin', TType::I32, 2);
      $xfer += $output->writeI32($this->freeCoin);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 3);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rewardCoin !== null) {
      $xfer += $output->writeFieldBegin('rewardCoin', TType::I32, 4);
      $xfer += $output->writeI32($this->rewardCoin);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CoinHistory {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'payDate',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    2 => array(
      'var' => 'coinBalance',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    3 => array(
      'var' => 'coin',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    4 => array(
      'var' => 'price',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'title',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'refund',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    7 => array(
      'var' => 'paySeq',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    8 => array(
      'var' => 'currency',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    9 => array(
      'var' => 'currencySign',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    10 => array(
      'var' => 'displayPrice',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    11 => array(
      'var' => 'payload',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\CoinPayLoad',
      ),
    12 => array(
      'var' => 'channelId',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var int
   */
  public $payDate = null;
  /**
   * @var int
   */
  public $coinBalance = null;
  /**
   * @var int
   */
  public $coin = null;
  /**
   * @var string
   */
  public $price = null;
  /**
   * @var string
   */
  public $title = null;
  /**
   * @var bool
   */
  public $refund = null;
  /**
   * @var string
   */
  public $paySeq = null;
  /**
   * @var string
   */
  public $currency = null;
  /**
   * @var string
   */
  public $currencySign = null;
  /**
   * @var string
   */
  public $displayPrice = null;
  /**
   * @var \CoinPayLoad
   */
  public $payload = null;
  /**
   * @var string
   */
  public $channelId = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['payDate'])) {
        $this->payDate = $vals['payDate'];
      }
      if (isset($vals['coinBalance'])) {
        $this->coinBalance = $vals['coinBalance'];
      }
      if (isset($vals['coin'])) {
        $this->coin = $vals['coin'];
      }
      if (isset($vals['price'])) {
        $this->price = $vals['price'];
      }
      if (isset($vals['title'])) {
        $this->title = $vals['title'];
      }
      if (isset($vals['refund'])) {
        $this->refund = $vals['refund'];
      }
      if (isset($vals['paySeq'])) {
        $this->paySeq = $vals['paySeq'];
      }
      if (isset($vals['currency'])) {
        $this->currency = $vals['currency'];
      }
      if (isset($vals['currencySign'])) {
        $this->currencySign = $vals['currencySign'];
      }
      if (isset($vals['displayPrice'])) {
        $this->displayPrice = $vals['displayPrice'];
      }
      if (isset($vals['payload'])) {
        $this->payload = $vals['payload'];
      }
      if (isset($vals['channelId'])) {
        $this->channelId = $vals['channelId'];
      }
    }
  }

  public function getName() {
    return 'CoinHistory';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->payDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->coinBalance);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->coin);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->title);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->refund);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->paySeq);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->currency);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->currencySign);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->displayPrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRUCT) {
            $this->payload = new \CoinPayLoad();
            $xfer += $this->payload->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->channelId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CoinHistory');
    if ($this->payDate !== null) {
      $xfer += $output->writeFieldBegin('payDate', TType::I64, 1);
      $xfer += $output->writeI64($this->payDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->coinBalance !== null) {
      $xfer += $output->writeFieldBegin('coinBalance', TType::I32, 2);
      $xfer += $output->writeI32($this->coinBalance);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->coin !== null) {
      $xfer += $output->writeFieldBegin('coin', TType::I32, 3);
      $xfer += $output->writeI32($this->coin);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->price !== null) {
      $xfer += $output->writeFieldBegin('price', TType::STRING, 4);
      $xfer += $output->writeString($this->price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->title !== null) {
      $xfer += $output->writeFieldBegin('title', TType::STRING, 5);
      $xfer += $output->writeString($this->title);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->refund !== null) {
      $xfer += $output->writeFieldBegin('refund', TType::BOOL, 6);
      $xfer += $output->writeBool($this->refund);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->paySeq !== null) {
      $xfer += $output->writeFieldBegin('paySeq', TType::STRING, 7);
      $xfer += $output->writeString($this->paySeq);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->currency !== null) {
      $xfer += $output->writeFieldBegin('currency', TType::STRING, 8);
      $xfer += $output->writeString($this->currency);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->currencySign !== null) {
      $xfer += $output->writeFieldBegin('currencySign', TType::STRING, 9);
      $xfer += $output->writeString($this->currencySign);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->displayPrice !== null) {
      $xfer += $output->writeFieldBegin('displayPrice', TType::STRING, 10);
      $xfer += $output->writeString($this->displayPrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->payload !== null) {
      if (!is_object($this->payload)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('payload', TType::STRUCT, 11);
      $xfer += $this->payload->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->channelId !== null) {
      $xfer += $output->writeFieldBegin('channelId', TType::STRING, 12);
      $xfer += $output->writeString($this->channelId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CoinHistoryCondition {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'start',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    2 => array(
      'var' => 'size',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    3 => array(
      'var' => 'language',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'eddt',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'appStoreCode',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $start = null;
  /**
   * @var int
   */
  public $size = null;
  /**
   * @var string
   */
  public $language = null;
  /**
   * @var string
   */
  public $eddt = null;
  /**
   * @var int
   */
  public $appStoreCode = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['size'])) {
        $this->size = $vals['size'];
      }
      if (isset($vals['language'])) {
        $this->language = $vals['language'];
      }
      if (isset($vals['eddt'])) {
        $this->eddt = $vals['eddt'];
      }
      if (isset($vals['appStoreCode'])) {
        $this->appStoreCode = $vals['appStoreCode'];
      }
    }
  }

  public function getName() {
    return 'CoinHistoryCondition';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->size);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->language);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->eddt);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->appStoreCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CoinHistoryCondition');
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::I64, 1);
      $xfer += $output->writeI64($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->size !== null) {
      $xfer += $output->writeFieldBegin('size', TType::I32, 2);
      $xfer += $output->writeI32($this->size);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->language !== null) {
      $xfer += $output->writeFieldBegin('language', TType::STRING, 3);
      $xfer += $output->writeString($this->language);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->eddt !== null) {
      $xfer += $output->writeFieldBegin('eddt', TType::STRING, 4);
      $xfer += $output->writeString($this->eddt);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appStoreCode !== null) {
      $xfer += $output->writeFieldBegin('appStoreCode', TType::I32, 5);
      $xfer += $output->writeI32($this->appStoreCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CoinHistoryResult {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'historys',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\CoinHistory',
        ),
      ),
    2 => array(
      'var' => 'balance',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Coin',
      ),
    3 => array(
      'var' => 'hasNext',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var \CoinHistory[]
   */
  public $historys = null;
  /**
   * @var \Coin
   */
  public $balance = null;
  /**
   * @var bool
   */
  public $hasNext = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['historys'])) {
        $this->historys = $vals['historys'];
      }
      if (isset($vals['balance'])) {
        $this->balance = $vals['balance'];
      }
      if (isset($vals['hasNext'])) {
        $this->hasNext = $vals['hasNext'];
      }
    }
  }

  public function getName() {
    return 'CoinHistoryResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->historys = array();
            $_size332 = 0;
            $_etype335 = 0;
            $xfer += $input->readListBegin($_etype335, $_size332);
            for ($_i336 = 0; $_i336 < $_size332; ++$_i336)
            {
              $elem337 = null;
              $elem337 = new \CoinHistory();
              $xfer += $elem337->read($input);
              $this->historys []= $elem337;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->balance = new \Coin();
            $xfer += $this->balance->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->hasNext);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CoinHistoryResult');
    if ($this->historys !== null) {
      if (!is_array($this->historys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('historys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->historys));
        {
          foreach ($this->historys as $iter338)
          {
            $xfer += $iter338->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->balance !== null) {
      if (!is_object($this->balance)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('balance', TType::STRUCT, 2);
      $xfer += $this->balance->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->hasNext !== null) {
      $xfer += $output->writeFieldBegin('hasNext', TType::BOOL, 3);
      $xfer += $output->writeBool($this->hasNext);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CoinProductItem {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'itemId',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'coin',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    3 => array(
      'var' => 'freeCoin',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    5 => array(
      'var' => 'currency',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'price',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    7 => array(
      'var' => 'displayPrice',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    8 => array(
      'var' => 'name',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    9 => array(
      'var' => 'desc',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $itemId = null;
  /**
   * @var int
   */
  public $coin = null;
  /**
   * @var int
   */
  public $freeCoin = null;
  /**
   * @var string
   */
  public $currency = null;
  /**
   * @var string
   */
  public $price = null;
  /**
   * @var string
   */
  public $displayPrice = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var string
   */
  public $desc = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['itemId'])) {
        $this->itemId = $vals['itemId'];
      }
      if (isset($vals['coin'])) {
        $this->coin = $vals['coin'];
      }
      if (isset($vals['freeCoin'])) {
        $this->freeCoin = $vals['freeCoin'];
      }
      if (isset($vals['currency'])) {
        $this->currency = $vals['currency'];
      }
      if (isset($vals['price'])) {
        $this->price = $vals['price'];
      }
      if (isset($vals['displayPrice'])) {
        $this->displayPrice = $vals['displayPrice'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['desc'])) {
        $this->desc = $vals['desc'];
      }
    }
  }

  public function getName() {
    return 'CoinProductItem';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->itemId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->coin);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->freeCoin);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->currency);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->displayPrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->desc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CoinProductItem');
    if ($this->itemId !== null) {
      $xfer += $output->writeFieldBegin('itemId', TType::STRING, 1);
      $xfer += $output->writeString($this->itemId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->coin !== null) {
      $xfer += $output->writeFieldBegin('coin', TType::I32, 2);
      $xfer += $output->writeI32($this->coin);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->freeCoin !== null) {
      $xfer += $output->writeFieldBegin('freeCoin', TType::I32, 3);
      $xfer += $output->writeI32($this->freeCoin);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->currency !== null) {
      $xfer += $output->writeFieldBegin('currency', TType::STRING, 5);
      $xfer += $output->writeString($this->currency);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->price !== null) {
      $xfer += $output->writeFieldBegin('price', TType::STRING, 6);
      $xfer += $output->writeString($this->price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->displayPrice !== null) {
      $xfer += $output->writeFieldBegin('displayPrice', TType::STRING, 7);
      $xfer += $output->writeString($this->displayPrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 8);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->desc !== null) {
      $xfer += $output->writeFieldBegin('desc', TType::STRING, 9);
      $xfer += $output->writeString($this->desc);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CoinPurchaseConfirm {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'orderId',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'appStoreCode',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    3 => array(
      'var' => 'receipt',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'signature',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'seller',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'requestType',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    7 => array(
      'var' => 'ignoreReceipt',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var string
   */
  public $orderId = null;
  /**
   * @var int
   */
  public $appStoreCode = null;
  /**
   * @var string
   */
  public $receipt = null;
  /**
   * @var string
   */
  public $signature = null;
  /**
   * @var string
   */
  public $seller = null;
  /**
   * @var string
   */
  public $requestType = null;
  /**
   * @var bool
   */
  public $ignoreReceipt = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['orderId'])) {
        $this->orderId = $vals['orderId'];
      }
      if (isset($vals['appStoreCode'])) {
        $this->appStoreCode = $vals['appStoreCode'];
      }
      if (isset($vals['receipt'])) {
        $this->receipt = $vals['receipt'];
      }
      if (isset($vals['signature'])) {
        $this->signature = $vals['signature'];
      }
      if (isset($vals['seller'])) {
        $this->seller = $vals['seller'];
      }
      if (isset($vals['requestType'])) {
        $this->requestType = $vals['requestType'];
      }
      if (isset($vals['ignoreReceipt'])) {
        $this->ignoreReceipt = $vals['ignoreReceipt'];
      }
    }
  }

  public function getName() {
    return 'CoinPurchaseConfirm';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->orderId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->appStoreCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->receipt);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->signature);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->seller);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->requestType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->ignoreReceipt);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CoinPurchaseConfirm');
    if ($this->orderId !== null) {
      $xfer += $output->writeFieldBegin('orderId', TType::STRING, 1);
      $xfer += $output->writeString($this->orderId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appStoreCode !== null) {
      $xfer += $output->writeFieldBegin('appStoreCode', TType::I32, 2);
      $xfer += $output->writeI32($this->appStoreCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->receipt !== null) {
      $xfer += $output->writeFieldBegin('receipt', TType::STRING, 3);
      $xfer += $output->writeString($this->receipt);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->signature !== null) {
      $xfer += $output->writeFieldBegin('signature', TType::STRING, 4);
      $xfer += $output->writeString($this->signature);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->seller !== null) {
      $xfer += $output->writeFieldBegin('seller', TType::STRING, 5);
      $xfer += $output->writeString($this->seller);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->requestType !== null) {
      $xfer += $output->writeFieldBegin('requestType', TType::STRING, 6);
      $xfer += $output->writeString($this->requestType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ignoreReceipt !== null) {
      $xfer += $output->writeFieldBegin('ignoreReceipt', TType::BOOL, 7);
      $xfer += $output->writeBool($this->ignoreReceipt);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CoinPurchaseReservation {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'productId',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'country',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'currency',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'price',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'appStoreCode',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    6 => array(
      'var' => 'language',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    7 => array(
      'var' => 'pgCode',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    8 => array(
      'var' => 'redirectUrl',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $productId = null;
  /**
   * @var string
   */
  public $country = null;
  /**
   * @var string
   */
  public $currency = null;
  /**
   * @var string
   */
  public $price = null;
  /**
   * @var int
   */
  public $appStoreCode = null;
  /**
   * @var string
   */
  public $language = null;
  /**
   * @var int
   */
  public $pgCode = null;
  /**
   * @var string
   */
  public $redirectUrl = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['productId'])) {
        $this->productId = $vals['productId'];
      }
      if (isset($vals['country'])) {
        $this->country = $vals['country'];
      }
      if (isset($vals['currency'])) {
        $this->currency = $vals['currency'];
      }
      if (isset($vals['price'])) {
        $this->price = $vals['price'];
      }
      if (isset($vals['appStoreCode'])) {
        $this->appStoreCode = $vals['appStoreCode'];
      }
      if (isset($vals['language'])) {
        $this->language = $vals['language'];
      }
      if (isset($vals['pgCode'])) {
        $this->pgCode = $vals['pgCode'];
      }
      if (isset($vals['redirectUrl'])) {
        $this->redirectUrl = $vals['redirectUrl'];
      }
    }
  }

  public function getName() {
    return 'CoinPurchaseReservation';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->productId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->country);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->currency);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->appStoreCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->language);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pgCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->redirectUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CoinPurchaseReservation');
    if ($this->productId !== null) {
      $xfer += $output->writeFieldBegin('productId', TType::STRING, 1);
      $xfer += $output->writeString($this->productId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->country !== null) {
      $xfer += $output->writeFieldBegin('country', TType::STRING, 2);
      $xfer += $output->writeString($this->country);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->currency !== null) {
      $xfer += $output->writeFieldBegin('currency', TType::STRING, 3);
      $xfer += $output->writeString($this->currency);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->price !== null) {
      $xfer += $output->writeFieldBegin('price', TType::STRING, 4);
      $xfer += $output->writeString($this->price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appStoreCode !== null) {
      $xfer += $output->writeFieldBegin('appStoreCode', TType::I32, 5);
      $xfer += $output->writeI32($this->appStoreCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->language !== null) {
      $xfer += $output->writeFieldBegin('language', TType::STRING, 6);
      $xfer += $output->writeString($this->language);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pgCode !== null) {
      $xfer += $output->writeFieldBegin('pgCode', TType::I32, 7);
      $xfer += $output->writeI32($this->pgCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->redirectUrl !== null) {
      $xfer += $output->writeFieldBegin('redirectUrl', TType::STRING, 8);
      $xfer += $output->writeString($this->redirectUrl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CoinUseReservationItem {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'itemId',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'itemName',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'amount',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var string
   */
  public $itemId = null;
  /**
   * @var string
   */
  public $itemName = null;
  /**
   * @var int
   */
  public $amount = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['itemId'])) {
        $this->itemId = $vals['itemId'];
      }
      if (isset($vals['itemName'])) {
        $this->itemName = $vals['itemName'];
      }
      if (isset($vals['amount'])) {
        $this->amount = $vals['amount'];
      }
    }
  }

  public function getName() {
    return 'CoinUseReservationItem';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->itemId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->itemName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->amount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CoinUseReservationItem');
    if ($this->itemId !== null) {
      $xfer += $output->writeFieldBegin('itemId', TType::STRING, 1);
      $xfer += $output->writeString($this->itemId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->itemName !== null) {
      $xfer += $output->writeFieldBegin('itemName', TType::STRING, 2);
      $xfer += $output->writeString($this->itemName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->amount !== null) {
      $xfer += $output->writeFieldBegin('amount', TType::I32, 3);
      $xfer += $output->writeI32($this->amount);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CoinUseReservation {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'channelId',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'shopOrderId',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'appStoreCode',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    4 => array(
      'var' => 'items',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\CoinUseReservationItem',
        ),
      ),
    5 => array(
      'var' => 'country',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $channelId = null;
  /**
   * @var string
   */
  public $shopOrderId = null;
  /**
   * @var int
   */
  public $appStoreCode = null;
  /**
   * @var \CoinUseReservationItem[]
   */
  public $items = null;
  /**
   * @var string
   */
  public $country = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['channelId'])) {
        $this->channelId = $vals['channelId'];
      }
      if (isset($vals['shopOrderId'])) {
        $this->shopOrderId = $vals['shopOrderId'];
      }
      if (isset($vals['appStoreCode'])) {
        $this->appStoreCode = $vals['appStoreCode'];
      }
      if (isset($vals['items'])) {
        $this->items = $vals['items'];
      }
      if (isset($vals['country'])) {
        $this->country = $vals['country'];
      }
    }
  }

  public function getName() {
    return 'CoinUseReservation';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->channelId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->shopOrderId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->appStoreCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->items = array();
            $_size339 = 0;
            $_etype342 = 0;
            $xfer += $input->readListBegin($_etype342, $_size339);
            for ($_i343 = 0; $_i343 < $_size339; ++$_i343)
            {
              $elem344 = null;
              $elem344 = new \CoinUseReservationItem();
              $xfer += $elem344->read($input);
              $this->items []= $elem344;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->country);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CoinUseReservation');
    if ($this->channelId !== null) {
      $xfer += $output->writeFieldBegin('channelId', TType::STRING, 1);
      $xfer += $output->writeString($this->channelId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->shopOrderId !== null) {
      $xfer += $output->writeFieldBegin('shopOrderId', TType::STRING, 2);
      $xfer += $output->writeString($this->shopOrderId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appStoreCode !== null) {
      $xfer += $output->writeFieldBegin('appStoreCode', TType::I32, 3);
      $xfer += $output->writeI32($this->appStoreCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->items !== null) {
      if (!is_array($this->items)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('items', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRUCT, count($this->items));
        {
          foreach ($this->items as $iter345)
          {
            $xfer += $iter345->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->country !== null) {
      $xfer += $output->writeFieldBegin('country', TType::STRING, 5);
      $xfer += $output->writeString($this->country);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CompactContact {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'mid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'createdTime',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    3 => array(
      'var' => 'modifiedTime',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    4 => array(
      'var' => 'status',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    5 => array(
      'var' => 'settings',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    6 => array(
      'var' => 'displayNameOverridden',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $mid = null;
  /**
   * @var int
   */
  public $createdTime = null;
  /**
   * @var int
   */
  public $modifiedTime = null;
  /**
   * @var int
   */
  public $status = null;
  /**
   * @var int
   */
  public $settings = null;
  /**
   * @var string
   */
  public $displayNameOverridden = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['mid'])) {
        $this->mid = $vals['mid'];
      }
      if (isset($vals['createdTime'])) {
        $this->createdTime = $vals['createdTime'];
      }
      if (isset($vals['modifiedTime'])) {
        $this->modifiedTime = $vals['modifiedTime'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['settings'])) {
        $this->settings = $vals['settings'];
      }
      if (isset($vals['displayNameOverridden'])) {
        $this->displayNameOverridden = $vals['displayNameOverridden'];
      }
    }
  }

  public function getName() {
    return 'CompactContact';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->createdTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->modifiedTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->settings);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->displayNameOverridden);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CompactContact');
    if ($this->mid !== null) {
      $xfer += $output->writeFieldBegin('mid', TType::STRING, 1);
      $xfer += $output->writeString($this->mid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createdTime !== null) {
      $xfer += $output->writeFieldBegin('createdTime', TType::I64, 2);
      $xfer += $output->writeI64($this->createdTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->modifiedTime !== null) {
      $xfer += $output->writeFieldBegin('modifiedTime', TType::I64, 3);
      $xfer += $output->writeI64($this->modifiedTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 4);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->settings !== null) {
      $xfer += $output->writeFieldBegin('settings', TType::I64, 5);
      $xfer += $output->writeI64($this->settings);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->displayNameOverridden !== null) {
      $xfer += $output->writeFieldBegin('displayNameOverridden', TType::STRING, 6);
      $xfer += $output->writeString($this->displayNameOverridden);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ContactModification {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'type',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'luid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    11 => array(
      'var' => 'phones',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRING,
      'elem' => array(
        'type' => TType::STRING,
        ),
      ),
    12 => array(
      'var' => 'emails',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRING,
      'elem' => array(
        'type' => TType::STRING,
        ),
      ),
    13 => array(
      'var' => 'userids',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRING,
      'elem' => array(
        'type' => TType::STRING,
        ),
      ),
    );

  /**
   * @var int
   */
  public $type = null;
  /**
   * @var string
   */
  public $luid = null;
  /**
   * @var string[]
   */
  public $phones = null;
  /**
   * @var string[]
   */
  public $emails = null;
  /**
   * @var string[]
   */
  public $userids = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['luid'])) {
        $this->luid = $vals['luid'];
      }
      if (isset($vals['phones'])) {
        $this->phones = $vals['phones'];
      }
      if (isset($vals['emails'])) {
        $this->emails = $vals['emails'];
      }
      if (isset($vals['userids'])) {
        $this->userids = $vals['userids'];
      }
    }
  }

  public function getName() {
    return 'ContactModification';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->luid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::LST) {
            $this->phones = array();
            $_size346 = 0;
            $_etype349 = 0;
            $xfer += $input->readListBegin($_etype349, $_size346);
            for ($_i350 = 0; $_i350 < $_size346; ++$_i350)
            {
              $elem351 = null;
              $xfer += $input->readString($elem351);
              $this->phones []= $elem351;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::LST) {
            $this->emails = array();
            $_size352 = 0;
            $_etype355 = 0;
            $xfer += $input->readListBegin($_etype355, $_size352);
            for ($_i356 = 0; $_i356 < $_size352; ++$_i356)
            {
              $elem357 = null;
              $xfer += $input->readString($elem357);
              $this->emails []= $elem357;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::LST) {
            $this->userids = array();
            $_size358 = 0;
            $_etype361 = 0;
            $xfer += $input->readListBegin($_etype361, $_size358);
            for ($_i362 = 0; $_i362 < $_size358; ++$_i362)
            {
              $elem363 = null;
              $xfer += $input->readString($elem363);
              $this->userids []= $elem363;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContactModification');
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 1);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->luid !== null) {
      $xfer += $output->writeFieldBegin('luid', TType::STRING, 2);
      $xfer += $output->writeString($this->luid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->phones !== null) {
      if (!is_array($this->phones)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('phones', TType::LST, 11);
      {
        $output->writeListBegin(TType::STRING, count($this->phones));
        {
          foreach ($this->phones as $iter364)
          {
            $xfer += $output->writeString($iter364);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->emails !== null) {
      if (!is_array($this->emails)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('emails', TType::LST, 12);
      {
        $output->writeListBegin(TType::STRING, count($this->emails));
        {
          foreach ($this->emails as $iter365)
          {
            $xfer += $output->writeString($iter365);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userids !== null) {
      if (!is_array($this->userids)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('userids', TType::LST, 13);
      {
        $output->writeListBegin(TType::STRING, count($this->userids));
        {
          foreach ($this->userids as $iter366)
          {
            $xfer += $output->writeString($iter366);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ContactRegistration {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'contact',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Contact',
      ),
    10 => array(
      'var' => 'luid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    11 => array(
      'var' => 'contactType',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    12 => array(
      'var' => 'contactKey',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var \Contact
   */
  public $contact = null;
  /**
   * @var string
   */
  public $luid = null;
  /**
   * @var int
   */
  public $contactType = null;
  /**
   * @var string
   */
  public $contactKey = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['contact'])) {
        $this->contact = $vals['contact'];
      }
      if (isset($vals['luid'])) {
        $this->luid = $vals['luid'];
      }
      if (isset($vals['contactType'])) {
        $this->contactType = $vals['contactType'];
      }
      if (isset($vals['contactKey'])) {
        $this->contactKey = $vals['contactKey'];
      }
    }
  }

  public function getName() {
    return 'ContactRegistration';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->contact = new \Contact();
            $xfer += $this->contact->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->luid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->contactType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->contactKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContactRegistration');
    if ($this->contact !== null) {
      if (!is_object($this->contact)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('contact', TType::STRUCT, 1);
      $xfer += $this->contact->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->luid !== null) {
      $xfer += $output->writeFieldBegin('luid', TType::STRING, 10);
      $xfer += $output->writeString($this->luid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contactType !== null) {
      $xfer += $output->writeFieldBegin('contactType', TType::I32, 11);
      $xfer += $output->writeI32($this->contactType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contactKey !== null) {
      $xfer += $output->writeFieldBegin('contactKey', TType::STRING, 12);
      $xfer += $output->writeString($this->contactKey);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ContactReport {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'mid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'exists',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    3 => array(
      'var' => 'contact',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Contact',
      ),
    );

  /**
   * @var string
   */
  public $mid = null;
  /**
   * @var bool
   */
  public $exists = null;
  /**
   * @var \Contact
   */
  public $contact = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['mid'])) {
        $this->mid = $vals['mid'];
      }
      if (isset($vals['exists'])) {
        $this->exists = $vals['exists'];
      }
      if (isset($vals['contact'])) {
        $this->contact = $vals['contact'];
      }
    }
  }

  public function getName() {
    return 'ContactReport';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->exists);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->contact = new \Contact();
            $xfer += $this->contact->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContactReport');
    if ($this->mid !== null) {
      $xfer += $output->writeFieldBegin('mid', TType::STRING, 1);
      $xfer += $output->writeString($this->mid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->exists !== null) {
      $xfer += $output->writeFieldBegin('exists', TType::BOOL, 2);
      $xfer += $output->writeBool($this->exists);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contact !== null) {
      if (!is_object($this->contact)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('contact', TType::STRUCT, 3);
      $xfer += $this->contact->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ContactReportResult {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'mid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'exists',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var string
   */
  public $mid = null;
  /**
   * @var bool
   */
  public $exists = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['mid'])) {
        $this->mid = $vals['mid'];
      }
      if (isset($vals['exists'])) {
        $this->exists = $vals['exists'];
      }
    }
  }

  public function getName() {
    return 'ContactReportResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->exists);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContactReportResult');
    if ($this->mid !== null) {
      $xfer += $output->writeFieldBegin('mid', TType::STRING, 1);
      $xfer += $output->writeString($this->mid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->exists !== null) {
      $xfer += $output->writeFieldBegin('exists', TType::BOOL, 2);
      $xfer += $output->writeBool($this->exists);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DeviceInfo {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'deviceName',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'systemName',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'systemVersion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'model',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    10 => array(
      'var' => 'carrierCode',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    11 => array(
      'var' => 'carrierName',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    20 => array(
      'var' => 'applicationType',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var string
   */
  public $deviceName = null;
  /**
   * @var string
   */
  public $systemName = null;
  /**
   * @var string
   */
  public $systemVersion = null;
  /**
   * @var string
   */
  public $model = null;
  /**
   * @var int
   */
  public $carrierCode = null;
  /**
   * @var string
   */
  public $carrierName = null;
  /**
   * @var int
   */
  public $applicationType = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['deviceName'])) {
        $this->deviceName = $vals['deviceName'];
      }
      if (isset($vals['systemName'])) {
        $this->systemName = $vals['systemName'];
      }
      if (isset($vals['systemVersion'])) {
        $this->systemVersion = $vals['systemVersion'];
      }
      if (isset($vals['model'])) {
        $this->model = $vals['model'];
      }
      if (isset($vals['carrierCode'])) {
        $this->carrierCode = $vals['carrierCode'];
      }
      if (isset($vals['carrierName'])) {
        $this->carrierName = $vals['carrierName'];
      }
      if (isset($vals['applicationType'])) {
        $this->applicationType = $vals['applicationType'];
      }
    }
  }

  public function getName() {
    return 'DeviceInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->deviceName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->systemName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->systemVersion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->model);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->carrierCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->carrierName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->applicationType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DeviceInfo');
    if ($this->deviceName !== null) {
      $xfer += $output->writeFieldBegin('deviceName', TType::STRING, 1);
      $xfer += $output->writeString($this->deviceName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->systemName !== null) {
      $xfer += $output->writeFieldBegin('systemName', TType::STRING, 2);
      $xfer += $output->writeString($this->systemName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->systemVersion !== null) {
      $xfer += $output->writeFieldBegin('systemVersion', TType::STRING, 3);
      $xfer += $output->writeString($this->systemVersion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->model !== null) {
      $xfer += $output->writeFieldBegin('model', TType::STRING, 4);
      $xfer += $output->writeString($this->model);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->carrierCode !== null) {
      $xfer += $output->writeFieldBegin('carrierCode', TType::I32, 10);
      $xfer += $output->writeI32($this->carrierCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->carrierName !== null) {
      $xfer += $output->writeFieldBegin('carrierName', TType::STRING, 11);
      $xfer += $output->writeString($this->carrierName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->applicationType !== null) {
      $xfer += $output->writeFieldBegin('applicationType', TType::I32, 20);
      $xfer += $output->writeI32($this->applicationType);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class EmailConfirmation {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'usePasswordSet',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    2 => array(
      'var' => 'email',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'password',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'ignoreDuplication',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var bool
   */
  public $usePasswordSet = null;
  /**
   * @var string
   */
  public $email = null;
  /**
   * @var string
   */
  public $password = null;
  /**
   * @var bool
   */
  public $ignoreDuplication = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['usePasswordSet'])) {
        $this->usePasswordSet = $vals['usePasswordSet'];
      }
      if (isset($vals['email'])) {
        $this->email = $vals['email'];
      }
      if (isset($vals['password'])) {
        $this->password = $vals['password'];
      }
      if (isset($vals['ignoreDuplication'])) {
        $this->ignoreDuplication = $vals['ignoreDuplication'];
      }
    }
  }

  public function getName() {
    return 'EmailConfirmation';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->usePasswordSet);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->email);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->password);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->ignoreDuplication);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('EmailConfirmation');
    if ($this->usePasswordSet !== null) {
      $xfer += $output->writeFieldBegin('usePasswordSet', TType::BOOL, 1);
      $xfer += $output->writeBool($this->usePasswordSet);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->email !== null) {
      $xfer += $output->writeFieldBegin('email', TType::STRING, 2);
      $xfer += $output->writeString($this->email);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->password !== null) {
      $xfer += $output->writeFieldBegin('password', TType::STRING, 3);
      $xfer += $output->writeString($this->password);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ignoreDuplication !== null) {
      $xfer += $output->writeFieldBegin('ignoreDuplication', TType::BOOL, 4);
      $xfer += $output->writeBool($this->ignoreDuplication);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class EmailConfirmationSession {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'emailConfirmationType',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'verifier',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'targetEmail',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var int
   */
  public $emailConfirmationType = null;
  /**
   * @var string
   */
  public $verifier = null;
  /**
   * @var string
   */
  public $targetEmail = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['emailConfirmationType'])) {
        $this->emailConfirmationType = $vals['emailConfirmationType'];
      }
      if (isset($vals['verifier'])) {
        $this->verifier = $vals['verifier'];
      }
      if (isset($vals['targetEmail'])) {
        $this->targetEmail = $vals['targetEmail'];
      }
    }
  }

  public function getName() {
    return 'EmailConfirmationSession';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->emailConfirmationType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->verifier);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->targetEmail);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('EmailConfirmationSession');
    if ($this->emailConfirmationType !== null) {
      $xfer += $output->writeFieldBegin('emailConfirmationType', TType::I32, 1);
      $xfer += $output->writeI32($this->emailConfirmationType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->verifier !== null) {
      $xfer += $output->writeFieldBegin('verifier', TType::STRING, 2);
      $xfer += $output->writeString($this->verifier);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->targetEmail !== null) {
      $xfer += $output->writeFieldBegin('targetEmail', TType::STRING, 3);
      $xfer += $output->writeString($this->targetEmail);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class FriendChannelMatrix {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'channelId',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'representMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'count',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    4 => array(
      'var' => 'point',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var string
   */
  public $channelId = null;
  /**
   * @var string
   */
  public $representMid = null;
  /**
   * @var int
   */
  public $count = null;
  /**
   * @var int
   */
  public $point = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['channelId'])) {
        $this->channelId = $vals['channelId'];
      }
      if (isset($vals['representMid'])) {
        $this->representMid = $vals['representMid'];
      }
      if (isset($vals['count'])) {
        $this->count = $vals['count'];
      }
      if (isset($vals['point'])) {
        $this->point = $vals['point'];
      }
    }
  }

  public function getName() {
    return 'FriendChannelMatrix';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->channelId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->representMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->count);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->point);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FriendChannelMatrix');
    if ($this->channelId !== null) {
      $xfer += $output->writeFieldBegin('channelId', TType::STRING, 1);
      $xfer += $output->writeString($this->channelId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->representMid !== null) {
      $xfer += $output->writeFieldBegin('representMid', TType::STRING, 2);
      $xfer += $output->writeString($this->representMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->count !== null) {
      $xfer += $output->writeFieldBegin('count', TType::I32, 3);
      $xfer += $output->writeI32($this->count);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->point !== null) {
      $xfer += $output->writeFieldBegin('point', TType::I32, 4);
      $xfer += $output->writeI32($this->point);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class FriendChannelMatricesResponse {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'expires',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    2 => array(
      'var' => 'matrices',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\FriendChannelMatrix',
        ),
      ),
    );

  /**
   * @var int
   */
  public $expires = null;
  /**
   * @var \FriendChannelMatrix[]
   */
  public $matrices = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['expires'])) {
        $this->expires = $vals['expires'];
      }
      if (isset($vals['matrices'])) {
        $this->matrices = $vals['matrices'];
      }
    }
  }

  public function getName() {
    return 'FriendChannelMatricesResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->expires);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->matrices = array();
            $_size367 = 0;
            $_etype370 = 0;
            $xfer += $input->readListBegin($_etype370, $_size367);
            for ($_i371 = 0; $_i371 < $_size367; ++$_i371)
            {
              $elem372 = null;
              $elem372 = new \FriendChannelMatrix();
              $xfer += $elem372->read($input);
              $this->matrices []= $elem372;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FriendChannelMatricesResponse');
    if ($this->expires !== null) {
      $xfer += $output->writeFieldBegin('expires', TType::I64, 1);
      $xfer += $output->writeI64($this->expires);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->matrices !== null) {
      if (!is_array($this->matrices)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('matrices', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->matrices));
        {
          foreach ($this->matrices as $iter373)
          {
            $xfer += $iter373->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class FriendRequest {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'eMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'mid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'direction',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    4 => array(
      'var' => 'method',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    5 => array(
      'var' => 'param',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'timestamp',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    7 => array(
      'var' => 'seqId',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    10 => array(
      'var' => 'displayName',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    11 => array(
      'var' => 'picturePath',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    12 => array(
      'var' => 'pictureStatus',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $eMid = null;
  /**
   * @var string
   */
  public $mid = null;
  /**
   * @var int
   */
  public $direction = null;
  /**
   * @var int
   */
  public $method = null;
  /**
   * @var string
   */
  public $param = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var int
   */
  public $seqId = null;
  /**
   * @var string
   */
  public $displayName = null;
  /**
   * @var string
   */
  public $picturePath = null;
  /**
   * @var string
   */
  public $pictureStatus = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['eMid'])) {
        $this->eMid = $vals['eMid'];
      }
      if (isset($vals['mid'])) {
        $this->mid = $vals['mid'];
      }
      if (isset($vals['direction'])) {
        $this->direction = $vals['direction'];
      }
      if (isset($vals['method'])) {
        $this->method = $vals['method'];
      }
      if (isset($vals['param'])) {
        $this->param = $vals['param'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['seqId'])) {
        $this->seqId = $vals['seqId'];
      }
      if (isset($vals['displayName'])) {
        $this->displayName = $vals['displayName'];
      }
      if (isset($vals['picturePath'])) {
        $this->picturePath = $vals['picturePath'];
      }
      if (isset($vals['pictureStatus'])) {
        $this->pictureStatus = $vals['pictureStatus'];
      }
    }
  }

  public function getName() {
    return 'FriendRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->eMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->direction);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->method);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->param);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->seqId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->displayName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->picturePath);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pictureStatus);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FriendRequest');
    if ($this->eMid !== null) {
      $xfer += $output->writeFieldBegin('eMid', TType::STRING, 1);
      $xfer += $output->writeString($this->eMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mid !== null) {
      $xfer += $output->writeFieldBegin('mid', TType::STRING, 2);
      $xfer += $output->writeString($this->mid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->direction !== null) {
      $xfer += $output->writeFieldBegin('direction', TType::I32, 3);
      $xfer += $output->writeI32($this->direction);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->method !== null) {
      $xfer += $output->writeFieldBegin('method', TType::I32, 4);
      $xfer += $output->writeI32($this->method);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->param !== null) {
      $xfer += $output->writeFieldBegin('param', TType::STRING, 5);
      $xfer += $output->writeString($this->param);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 6);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->seqId !== null) {
      $xfer += $output->writeFieldBegin('seqId', TType::I64, 7);
      $xfer += $output->writeI64($this->seqId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->displayName !== null) {
      $xfer += $output->writeFieldBegin('displayName', TType::STRING, 10);
      $xfer += $output->writeString($this->displayName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->picturePath !== null) {
      $xfer += $output->writeFieldBegin('picturePath', TType::STRING, 11);
      $xfer += $output->writeString($this->picturePath);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pictureStatus !== null) {
      $xfer += $output->writeFieldBegin('pictureStatus', TType::STRING, 12);
      $xfer += $output->writeString($this->pictureStatus);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class FriendRequestsInfo {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'totalIncomingCount',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'totalOutgoingCount',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    3 => array(
      'var' => 'recentIncomings',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\FriendRequest',
        ),
      ),
    4 => array(
      'var' => 'recentOutgoings',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\FriendRequest',
        ),
      ),
    5 => array(
      'var' => 'totalIncomingLimit',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    6 => array(
      'var' => 'totalOutgoingLimit',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $totalIncomingCount = null;
  /**
   * @var int
   */
  public $totalOutgoingCount = null;
  /**
   * @var \FriendRequest[]
   */
  public $recentIncomings = null;
  /**
   * @var \FriendRequest[]
   */
  public $recentOutgoings = null;
  /**
   * @var int
   */
  public $totalIncomingLimit = null;
  /**
   * @var int
   */
  public $totalOutgoingLimit = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['totalIncomingCount'])) {
        $this->totalIncomingCount = $vals['totalIncomingCount'];
      }
      if (isset($vals['totalOutgoingCount'])) {
        $this->totalOutgoingCount = $vals['totalOutgoingCount'];
      }
      if (isset($vals['recentIncomings'])) {
        $this->recentIncomings = $vals['recentIncomings'];
      }
      if (isset($vals['recentOutgoings'])) {
        $this->recentOutgoings = $vals['recentOutgoings'];
      }
      if (isset($vals['totalIncomingLimit'])) {
        $this->totalIncomingLimit = $vals['totalIncomingLimit'];
      }
      if (isset($vals['totalOutgoingLimit'])) {
        $this->totalOutgoingLimit = $vals['totalOutgoingLimit'];
      }
    }
  }

  public function getName() {
    return 'FriendRequestsInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->totalIncomingCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->totalOutgoingCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->recentIncomings = array();
            $_size374 = 0;
            $_etype377 = 0;
            $xfer += $input->readListBegin($_etype377, $_size374);
            for ($_i378 = 0; $_i378 < $_size374; ++$_i378)
            {
              $elem379 = null;
              $elem379 = new \FriendRequest();
              $xfer += $elem379->read($input);
              $this->recentIncomings []= $elem379;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->recentOutgoings = array();
            $_size380 = 0;
            $_etype383 = 0;
            $xfer += $input->readListBegin($_etype383, $_size380);
            for ($_i384 = 0; $_i384 < $_size380; ++$_i384)
            {
              $elem385 = null;
              $elem385 = new \FriendRequest();
              $xfer += $elem385->read($input);
              $this->recentOutgoings []= $elem385;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->totalIncomingLimit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->totalOutgoingLimit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FriendRequestsInfo');
    if ($this->totalIncomingCount !== null) {
      $xfer += $output->writeFieldBegin('totalIncomingCount', TType::I32, 1);
      $xfer += $output->writeI32($this->totalIncomingCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->totalOutgoingCount !== null) {
      $xfer += $output->writeFieldBegin('totalOutgoingCount', TType::I32, 2);
      $xfer += $output->writeI32($this->totalOutgoingCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->recentIncomings !== null) {
      if (!is_array($this->recentIncomings)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('recentIncomings', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->recentIncomings));
        {
          foreach ($this->recentIncomings as $iter386)
          {
            $xfer += $iter386->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->recentOutgoings !== null) {
      if (!is_array($this->recentOutgoings)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('recentOutgoings', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRUCT, count($this->recentOutgoings));
        {
          foreach ($this->recentOutgoings as $iter387)
          {
            $xfer += $iter387->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->totalIncomingLimit !== null) {
      $xfer += $output->writeFieldBegin('totalIncomingLimit', TType::I32, 5);
      $xfer += $output->writeI32($this->totalIncomingLimit);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->totalOutgoingLimit !== null) {
      $xfer += $output->writeFieldBegin('totalOutgoingLimit', TType::I32, 6);
      $xfer += $output->writeI32($this->totalOutgoingLimit);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Geolocation {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'longitude',
      'isRequired' => false,
      'type' => TType::DOUBLE,
      ),
    2 => array(
      'var' => 'latitude',
      'isRequired' => false,
      'type' => TType::DOUBLE,
      ),
    );

  /**
   * @var double
   */
  public $longitude = null;
  /**
   * @var double
   */
  public $latitude = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['longitude'])) {
        $this->longitude = $vals['longitude'];
      }
      if (isset($vals['latitude'])) {
        $this->latitude = $vals['latitude'];
      }
    }
  }

  public function getName() {
    return 'Geolocation';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->longitude);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->latitude);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Geolocation');
    if ($this->longitude !== null) {
      $xfer += $output->writeFieldBegin('longitude', TType::DOUBLE, 1);
      $xfer += $output->writeDouble($this->longitude);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->latitude !== null) {
      $xfer += $output->writeFieldBegin('latitude', TType::DOUBLE, 2);
      $xfer += $output->writeDouble($this->latitude);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class NotificationTarget {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'applicationType',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'applicationVersion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'region',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $applicationType = null;
  /**
   * @var string
   */
  public $applicationVersion = null;
  /**
   * @var string
   */
  public $region = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['applicationType'])) {
        $this->applicationType = $vals['applicationType'];
      }
      if (isset($vals['applicationVersion'])) {
        $this->applicationVersion = $vals['applicationVersion'];
      }
      if (isset($vals['region'])) {
        $this->region = $vals['region'];
      }
    }
  }

  public function getName() {
    return 'NotificationTarget';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->applicationType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->applicationVersion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->region);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('NotificationTarget');
    if ($this->applicationType !== null) {
      $xfer += $output->writeFieldBegin('applicationType', TType::STRING, 1);
      $xfer += $output->writeString($this->applicationType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->applicationVersion !== null) {
      $xfer += $output->writeFieldBegin('applicationVersion', TType::STRING, 2);
      $xfer += $output->writeString($this->applicationVersion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->region !== null) {
      $xfer += $output->writeFieldBegin('region', TType::STRING, 3);
      $xfer += $output->writeString($this->region);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GlobalEvent {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'key',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'targets',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\NotificationTarget',
        ),
      ),
    3 => array(
      'var' => 'createdTime',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    4 => array(
      'var' => 'data',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    5 => array(
      'var' => 'maxDelay',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \NotificationTarget[]
   */
  public $targets = null;
  /**
   * @var int
   */
  public $createdTime = null;
  /**
   * @var int
   */
  public $data = null;
  /**
   * @var int
   */
  public $maxDelay = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['targets'])) {
        $this->targets = $vals['targets'];
      }
      if (isset($vals['createdTime'])) {
        $this->createdTime = $vals['createdTime'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
      if (isset($vals['maxDelay'])) {
        $this->maxDelay = $vals['maxDelay'];
      }
    }
  }

  public function getName() {
    return 'GlobalEvent';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->targets = array();
            $_size388 = 0;
            $_etype391 = 0;
            $xfer += $input->readListBegin($_etype391, $_size388);
            for ($_i392 = 0; $_i392 < $_size388; ++$_i392)
            {
              $elem393 = null;
              $elem393 = new \NotificationTarget();
              $xfer += $elem393->read($input);
              $this->targets []= $elem393;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->createdTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->data);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->maxDelay);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GlobalEvent');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->targets !== null) {
      if (!is_array($this->targets)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('targets', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->targets));
        {
          foreach ($this->targets as $iter394)
          {
            $xfer += $iter394->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createdTime !== null) {
      $xfer += $output->writeFieldBegin('createdTime', TType::I64, 3);
      $xfer += $output->writeI64($this->createdTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      $xfer += $output->writeFieldBegin('data', TType::I64, 4);
      $xfer += $output->writeI64($this->data);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->maxDelay !== null) {
      $xfer += $output->writeFieldBegin('maxDelay', TType::I32, 5);
      $xfer += $output->writeI32($this->maxDelay);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GroupPreference {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'invitationTicket',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'favoriteTimestamp',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    );

  /**
   * @var string
   */
  public $invitationTicket = null;
  /**
   * @var int
   */
  public $favoriteTimestamp = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['invitationTicket'])) {
        $this->invitationTicket = $vals['invitationTicket'];
      }
      if (isset($vals['favoriteTimestamp'])) {
        $this->favoriteTimestamp = $vals['favoriteTimestamp'];
      }
    }
  }

  public function getName() {
    return 'GroupPreference';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->invitationTicket);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->favoriteTimestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GroupPreference');
    if ($this->invitationTicket !== null) {
      $xfer += $output->writeFieldBegin('invitationTicket', TType::STRING, 1);
      $xfer += $output->writeString($this->invitationTicket);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->favoriteTimestamp !== null) {
      $xfer += $output->writeFieldBegin('favoriteTimestamp', TType::I64, 2);
      $xfer += $output->writeI64($this->favoriteTimestamp);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Group {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'createdTime',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    10 => array(
      'var' => 'name',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    11 => array(
      'var' => 'pictureStatus',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    12 => array(
      'var' => 'preventedJoinByTicket',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    13 => array(
      'var' => 'groupPreference',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\GroupPreference',
      ),
    20 => array(
      'var' => 'members',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\Contact',
        ),
      ),
    21 => array(
      'var' => 'creator',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Contact',
      ),
    22 => array(
      'var' => 'invitee',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\Contact',
        ),
      ),
    31 => array(
      'var' => 'notificationDisabled',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    32 => array(
      'var' => 'picturePath',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    40 => array(
      'var' => 'memberMids',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRING,
      'elem' => array(
        'type' => TType::STRING,
        ),
      ),
    41 => array(
      'var' => 'inviteeMids',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRING,
      'elem' => array(
        'type' => TType::STRING,
        ),
      ),
    );

  /**
   * @var string
   */
  public $id = null;
  /**
   * @var int
   */
  public $createdTime = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var string
   */
  public $pictureStatus = null;
  /**
   * @var bool
   */
  public $preventedJoinByTicket = null;
  /**
   * @var \GroupPreference
   */
  public $groupPreference = null;
  /**
   * @var \Contact[]
   */
  public $members = null;
  /**
   * @var \Contact
   */
  public $creator = null;
  /**
   * @var \Contact[]
   */
  public $invitee = null;
  /**
   * @var bool
   */
  public $notificationDisabled = null;
  /**
   * @var string
   */
  public $picturePath = null;
  /**
   * @var string[]
   */
  public $memberMids = null;
  /**
   * @var string[]
   */
  public $inviteeMids = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['createdTime'])) {
        $this->createdTime = $vals['createdTime'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['pictureStatus'])) {
        $this->pictureStatus = $vals['pictureStatus'];
      }
      if (isset($vals['preventedJoinByTicket'])) {
        $this->preventedJoinByTicket = $vals['preventedJoinByTicket'];
      }
      if (isset($vals['groupPreference'])) {
        $this->groupPreference = $vals['groupPreference'];
      }
      if (isset($vals['members'])) {
        $this->members = $vals['members'];
      }
      if (isset($vals['creator'])) {
        $this->creator = $vals['creator'];
      }
      if (isset($vals['invitee'])) {
        $this->invitee = $vals['invitee'];
      }
      if (isset($vals['notificationDisabled'])) {
        $this->notificationDisabled = $vals['notificationDisabled'];
      }
      if (isset($vals['picturePath'])) {
        $this->picturePath = $vals['picturePath'];
      }
      if (isset($vals['memberMids'])) {
        $this->memberMids = $vals['memberMids'];
      }
      if (isset($vals['inviteeMids'])) {
        $this->inviteeMids = $vals['inviteeMids'];
      }
    }
  }

  public function getName() {
    return 'Group';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->createdTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pictureStatus);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->preventedJoinByTicket);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRUCT) {
            $this->groupPreference = new \GroupPreference();
            $xfer += $this->groupPreference->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::LST) {
            $this->members = array();
            $_size395 = 0;
            $_etype398 = 0;
            $xfer += $input->readListBegin($_etype398, $_size395);
            for ($_i399 = 0; $_i399 < $_size395; ++$_i399)
            {
              $elem400 = null;
              $elem400 = new \Contact();
              $xfer += $elem400->read($input);
              $this->members []= $elem400;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::STRUCT) {
            $this->creator = new \Contact();
            $xfer += $this->creator->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::LST) {
            $this->invitee = array();
            $_size401 = 0;
            $_etype404 = 0;
            $xfer += $input->readListBegin($_etype404, $_size401);
            for ($_i405 = 0; $_i405 < $_size401; ++$_i405)
            {
              $elem406 = null;
              $elem406 = new \Contact();
              $xfer += $elem406->read($input);
              $this->invitee []= $elem406;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 31:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->notificationDisabled);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 32:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->picturePath);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 40:
          if ($ftype == TType::LST) {
            $this->memberMids = array();
            $_size407 = 0;
            $_etype410 = 0;
            $xfer += $input->readListBegin($_etype410, $_size407);
            for ($_i411 = 0; $_i411 < $_size407; ++$_i411)
            {
              $elem412 = null;
              $xfer += $input->readString($elem412);
              $this->memberMids []= $elem412;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 41:
          if ($ftype == TType::LST) {
            $this->inviteeMids = array();
            $_size413 = 0;
            $_etype416 = 0;
            $xfer += $input->readListBegin($_etype416, $_size413);
            for ($_i417 = 0; $_i417 < $_size413; ++$_i417)
            {
              $elem418 = null;
              $xfer += $input->readString($elem418);
              $this->inviteeMids []= $elem418;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Group');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createdTime !== null) {
      $xfer += $output->writeFieldBegin('createdTime', TType::I64, 2);
      $xfer += $output->writeI64($this->createdTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 10);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pictureStatus !== null) {
      $xfer += $output->writeFieldBegin('pictureStatus', TType::STRING, 11);
      $xfer += $output->writeString($this->pictureStatus);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->preventedJoinByTicket !== null) {
      $xfer += $output->writeFieldBegin('preventedJoinByTicket', TType::BOOL, 12);
      $xfer += $output->writeBool($this->preventedJoinByTicket);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->groupPreference !== null) {
      if (!is_object($this->groupPreference)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('groupPreference', TType::STRUCT, 13);
      $xfer += $this->groupPreference->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->members !== null) {
      if (!is_array($this->members)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('members', TType::LST, 20);
      {
        $output->writeListBegin(TType::STRUCT, count($this->members));
        {
          foreach ($this->members as $iter419)
          {
            $xfer += $iter419->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creator !== null) {
      if (!is_object($this->creator)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creator', TType::STRUCT, 21);
      $xfer += $this->creator->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->invitee !== null) {
      if (!is_array($this->invitee)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('invitee', TType::LST, 22);
      {
        $output->writeListBegin(TType::STRUCT, count($this->invitee));
        {
          foreach ($this->invitee as $iter420)
          {
            $xfer += $iter420->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notificationDisabled !== null) {
      $xfer += $output->writeFieldBegin('notificationDisabled', TType::BOOL, 31);
      $xfer += $output->writeBool($this->notificationDisabled);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->picturePath !== null) {
      $xfer += $output->writeFieldBegin('picturePath', TType::STRING, 32);
      $xfer += $output->writeString($this->picturePath);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->memberMids !== null) {
      if (!is_array($this->memberMids)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('memberMids', TType::LST, 40);
      {
        $output->writeListBegin(TType::STRING, count($this->memberMids));
        {
          foreach ($this->memberMids as $iter421)
          {
            $xfer += $output->writeString($iter421);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->inviteeMids !== null) {
      if (!is_array($this->inviteeMids)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('inviteeMids', TType::LST, 41);
      {
        $output->writeListBegin(TType::STRING, count($this->inviteeMids));
        {
          foreach ($this->inviteeMids as $iter422)
          {
            $xfer += $output->writeString($iter422);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class IdentityCredential {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'provider',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'identifier',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'password',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var int
   */
  public $provider = null;
  /**
   * @var string
   */
  public $identifier = null;
  /**
   * @var string
   */
  public $password = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['provider'])) {
        $this->provider = $vals['provider'];
      }
      if (isset($vals['identifier'])) {
        $this->identifier = $vals['identifier'];
      }
      if (isset($vals['password'])) {
        $this->password = $vals['password'];
      }
    }
  }

  public function getName() {
    return 'IdentityCredential';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->provider);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->identifier);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->password);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('IdentityCredential');
    if ($this->provider !== null) {
      $xfer += $output->writeFieldBegin('provider', TType::I32, 1);
      $xfer += $output->writeI32($this->provider);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->identifier !== null) {
      $xfer += $output->writeFieldBegin('identifier', TType::STRING, 2);
      $xfer += $output->writeString($this->identifier);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->password !== null) {
      $xfer += $output->writeFieldBegin('password', TType::STRING, 3);
      $xfer += $output->writeString($this->password);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class LastReadMessageId {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'mid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'lastReadMessageId',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $mid = null;
  /**
   * @var string
   */
  public $lastReadMessageId = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['mid'])) {
        $this->mid = $vals['mid'];
      }
      if (isset($vals['lastReadMessageId'])) {
        $this->lastReadMessageId = $vals['lastReadMessageId'];
      }
    }
  }

  public function getName() {
    return 'LastReadMessageId';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->lastReadMessageId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('LastReadMessageId');
    if ($this->mid !== null) {
      $xfer += $output->writeFieldBegin('mid', TType::STRING, 1);
      $xfer += $output->writeString($this->mid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lastReadMessageId !== null) {
      $xfer += $output->writeFieldBegin('lastReadMessageId', TType::STRING, 2);
      $xfer += $output->writeString($this->lastReadMessageId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class LastReadMessageIds {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'chatId',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'lastReadMessageIds',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\LastReadMessageId',
        ),
      ),
    );

  /**
   * @var string
   */
  public $chatId = null;
  /**
   * @var \LastReadMessageId[]
   */
  public $lastReadMessageIds = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['chatId'])) {
        $this->chatId = $vals['chatId'];
      }
      if (isset($vals['lastReadMessageIds'])) {
        $this->lastReadMessageIds = $vals['lastReadMessageIds'];
      }
    }
  }

  public function getName() {
    return 'LastReadMessageIds';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->chatId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->lastReadMessageIds = array();
            $_size423 = 0;
            $_etype426 = 0;
            $xfer += $input->readListBegin($_etype426, $_size423);
            for ($_i427 = 0; $_i427 < $_size423; ++$_i427)
            {
              $elem428 = null;
              $elem428 = new \LastReadMessageId();
              $xfer += $elem428->read($input);
              $this->lastReadMessageIds []= $elem428;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('LastReadMessageIds');
    if ($this->chatId !== null) {
      $xfer += $output->writeFieldBegin('chatId', TType::STRING, 1);
      $xfer += $output->writeString($this->chatId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lastReadMessageIds !== null) {
      if (!is_array($this->lastReadMessageIds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('lastReadMessageIds', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->lastReadMessageIds));
        {
          foreach ($this->lastReadMessageIds as $iter429)
          {
            $xfer += $iter429->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class VerificationSessionData {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'sessionId',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'method',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    3 => array(
      'var' => 'callback',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'normalizedPhone',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'countryCode',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'nationalSignificantNumber',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    7 => array(
      'var' => 'availableVerificationMethods',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::I32,
      'elem' => array(
        'type' => TType::I32,
        ),
      ),
    8 => array(
      'var' => 'callerIdMask',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $sessionId = null;
  /**
   * @var int
   */
  public $method = null;
  /**
   * @var string
   */
  public $callback = null;
  /**
   * @var string
   */
  public $normalizedPhone = null;
  /**
   * @var string
   */
  public $countryCode = null;
  /**
   * @var string
   */
  public $nationalSignificantNumber = null;
  /**
   * @var int[]
   */
  public $availableVerificationMethods = null;
  /**
   * @var string
   */
  public $callerIdMask = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['sessionId'])) {
        $this->sessionId = $vals['sessionId'];
      }
      if (isset($vals['method'])) {
        $this->method = $vals['method'];
      }
      if (isset($vals['callback'])) {
        $this->callback = $vals['callback'];
      }
      if (isset($vals['normalizedPhone'])) {
        $this->normalizedPhone = $vals['normalizedPhone'];
      }
      if (isset($vals['countryCode'])) {
        $this->countryCode = $vals['countryCode'];
      }
      if (isset($vals['nationalSignificantNumber'])) {
        $this->nationalSignificantNumber = $vals['nationalSignificantNumber'];
      }
      if (isset($vals['availableVerificationMethods'])) {
        $this->availableVerificationMethods = $vals['availableVerificationMethods'];
      }
      if (isset($vals['callerIdMask'])) {
        $this->callerIdMask = $vals['callerIdMask'];
      }
    }
  }

  public function getName() {
    return 'VerificationSessionData';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sessionId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->method);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->callback);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->normalizedPhone);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->countryCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nationalSignificantNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::LST) {
            $this->availableVerificationMethods = array();
            $_size430 = 0;
            $_etype433 = 0;
            $xfer += $input->readListBegin($_etype433, $_size430);
            for ($_i434 = 0; $_i434 < $_size430; ++$_i434)
            {
              $elem435 = null;
              $xfer += $input->readI32($elem435);
              $this->availableVerificationMethods []= $elem435;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->callerIdMask);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('VerificationSessionData');
    if ($this->sessionId !== null) {
      $xfer += $output->writeFieldBegin('sessionId', TType::STRING, 1);
      $xfer += $output->writeString($this->sessionId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->method !== null) {
      $xfer += $output->writeFieldBegin('method', TType::I32, 2);
      $xfer += $output->writeI32($this->method);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->callback !== null) {
      $xfer += $output->writeFieldBegin('callback', TType::STRING, 3);
      $xfer += $output->writeString($this->callback);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->normalizedPhone !== null) {
      $xfer += $output->writeFieldBegin('normalizedPhone', TType::STRING, 4);
      $xfer += $output->writeString($this->normalizedPhone);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->countryCode !== null) {
      $xfer += $output->writeFieldBegin('countryCode', TType::STRING, 5);
      $xfer += $output->writeString($this->countryCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nationalSignificantNumber !== null) {
      $xfer += $output->writeFieldBegin('nationalSignificantNumber', TType::STRING, 6);
      $xfer += $output->writeString($this->nationalSignificantNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->availableVerificationMethods !== null) {
      if (!is_array($this->availableVerificationMethods)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('availableVerificationMethods', TType::LST, 7);
      {
        $output->writeListBegin(TType::I32, count($this->availableVerificationMethods));
        {
          foreach ($this->availableVerificationMethods as $iter436)
          {
            $xfer += $output->writeI32($iter436);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->callerIdMask !== null) {
      $xfer += $output->writeFieldBegin('callerIdMask', TType::STRING, 8);
      $xfer += $output->writeString($this->callerIdMask);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class LoginResult {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'authToken',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'certificate',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'verifier',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'pinCode',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'type',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    6 => array(
      'var' => 'lastPrimaryBindTime',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    7 => array(
      'var' => 'displayMessage',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    8 => array(
      'var' => 'sessionForSMSConfirm',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\VerificationSessionData',
      ),
    );

  /**
   * @var string
   */
  public $authToken = null;
  /**
   * @var string
   */
  public $certificate = null;
  /**
   * @var string
   */
  public $verifier = null;
  /**
   * @var string
   */
  public $pinCode = null;
  /**
   * @var int
   */
  public $type = null;
  /**
   * @var int
   */
  public $lastPrimaryBindTime = null;
  /**
   * @var string
   */
  public $displayMessage = null;
  /**
   * @var \VerificationSessionData
   */
  public $sessionForSMSConfirm = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['authToken'])) {
        $this->authToken = $vals['authToken'];
      }
      if (isset($vals['certificate'])) {
        $this->certificate = $vals['certificate'];
      }
      if (isset($vals['verifier'])) {
        $this->verifier = $vals['verifier'];
      }
      if (isset($vals['pinCode'])) {
        $this->pinCode = $vals['pinCode'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['lastPrimaryBindTime'])) {
        $this->lastPrimaryBindTime = $vals['lastPrimaryBindTime'];
      }
      if (isset($vals['displayMessage'])) {
        $this->displayMessage = $vals['displayMessage'];
      }
      if (isset($vals['sessionForSMSConfirm'])) {
        $this->sessionForSMSConfirm = $vals['sessionForSMSConfirm'];
      }
    }
  }

  public function getName() {
    return 'LoginResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->authToken);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->certificate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->verifier);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pinCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->lastPrimaryBindTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->displayMessage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRUCT) {
            $this->sessionForSMSConfirm = new \VerificationSessionData();
            $xfer += $this->sessionForSMSConfirm->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('LoginResult');
    if ($this->authToken !== null) {
      $xfer += $output->writeFieldBegin('authToken', TType::STRING, 1);
      $xfer += $output->writeString($this->authToken);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->certificate !== null) {
      $xfer += $output->writeFieldBegin('certificate', TType::STRING, 2);
      $xfer += $output->writeString($this->certificate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->verifier !== null) {
      $xfer += $output->writeFieldBegin('verifier', TType::STRING, 3);
      $xfer += $output->writeString($this->verifier);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pinCode !== null) {
      $xfer += $output->writeFieldBegin('pinCode', TType::STRING, 4);
      $xfer += $output->writeString($this->pinCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 5);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lastPrimaryBindTime !== null) {
      $xfer += $output->writeFieldBegin('lastPrimaryBindTime', TType::I64, 6);
      $xfer += $output->writeI64($this->lastPrimaryBindTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->displayMessage !== null) {
      $xfer += $output->writeFieldBegin('displayMessage', TType::STRING, 7);
      $xfer += $output->writeString($this->displayMessage);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionForSMSConfirm !== null) {
      if (!is_object($this->sessionForSMSConfirm)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('sessionForSMSConfirm', TType::STRUCT, 8);
      $xfer += $this->sessionForSMSConfirm->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class LoginRequest {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'type',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'identityProvider',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    3 => array(
      'var' => 'identifier',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'password',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'keepLoggedIn',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    6 => array(
      'var' => 'accessLocation',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    7 => array(
      'var' => 'systemName',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    8 => array(
      'var' => 'certificate',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    9 => array(
      'var' => 'verifier',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    10 => array(
      'var' => 'secret',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    11 => array(
      'var' => 'e2eeVersion',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $type = null;
  /**
   * @var int
   */
  public $identityProvider = null;
  /**
   * @var string
   */
  public $identifier = null;
  /**
   * @var string
   */
  public $password = null;
  /**
   * @var bool
   */
  public $keepLoggedIn = null;
  /**
   * @var string
   */
  public $accessLocation = null;
  /**
   * @var string
   */
  public $systemName = null;
  /**
   * @var string
   */
  public $certificate = null;
  /**
   * @var string
   */
  public $verifier = null;
  /**
   * @var string
   */
  public $secret = null;
  /**
   * @var int
   */
  public $e2eeVersion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['identityProvider'])) {
        $this->identityProvider = $vals['identityProvider'];
      }
      if (isset($vals['identifier'])) {
        $this->identifier = $vals['identifier'];
      }
      if (isset($vals['password'])) {
        $this->password = $vals['password'];
      }
      if (isset($vals['keepLoggedIn'])) {
        $this->keepLoggedIn = $vals['keepLoggedIn'];
      }
      if (isset($vals['accessLocation'])) {
        $this->accessLocation = $vals['accessLocation'];
      }
      if (isset($vals['systemName'])) {
        $this->systemName = $vals['systemName'];
      }
      if (isset($vals['certificate'])) {
        $this->certificate = $vals['certificate'];
      }
      if (isset($vals['verifier'])) {
        $this->verifier = $vals['verifier'];
      }
      if (isset($vals['secret'])) {
        $this->secret = $vals['secret'];
      }
      if (isset($vals['e2eeVersion'])) {
        $this->e2eeVersion = $vals['e2eeVersion'];
      }
    }
  }

  public function getName() {
    return 'LoginRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->identityProvider);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->identifier);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->password);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->keepLoggedIn);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessLocation);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->systemName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->certificate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->verifier);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->secret);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->e2eeVersion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('LoginRequest');
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 1);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->identityProvider !== null) {
      $xfer += $output->writeFieldBegin('identityProvider', TType::I32, 2);
      $xfer += $output->writeI32($this->identityProvider);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->identifier !== null) {
      $xfer += $output->writeFieldBegin('identifier', TType::STRING, 3);
      $xfer += $output->writeString($this->identifier);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->password !== null) {
      $xfer += $output->writeFieldBegin('password', TType::STRING, 4);
      $xfer += $output->writeString($this->password);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->keepLoggedIn !== null) {
      $xfer += $output->writeFieldBegin('keepLoggedIn', TType::BOOL, 5);
      $xfer += $output->writeBool($this->keepLoggedIn);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessLocation !== null) {
      $xfer += $output->writeFieldBegin('accessLocation', TType::STRING, 6);
      $xfer += $output->writeString($this->accessLocation);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->systemName !== null) {
      $xfer += $output->writeFieldBegin('systemName', TType::STRING, 7);
      $xfer += $output->writeString($this->systemName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->certificate !== null) {
      $xfer += $output->writeFieldBegin('certificate', TType::STRING, 8);
      $xfer += $output->writeString($this->certificate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->verifier !== null) {
      $xfer += $output->writeFieldBegin('verifier', TType::STRING, 9);
      $xfer += $output->writeString($this->verifier);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->secret !== null) {
      $xfer += $output->writeFieldBegin('secret', TType::STRING, 10);
      $xfer += $output->writeString($this->secret);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->e2eeVersion !== null) {
      $xfer += $output->writeFieldBegin('e2eeVersion', TType::I32, 11);
      $xfer += $output->writeI32($this->e2eeVersion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class LoginSession {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'tokenKey',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'expirationTime',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    11 => array(
      'var' => 'applicationType',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    12 => array(
      'var' => 'systemName',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    22 => array(
      'var' => 'accessLocation',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $tokenKey = null;
  /**
   * @var int
   */
  public $expirationTime = null;
  /**
   * @var int
   */
  public $applicationType = null;
  /**
   * @var string
   */
  public $systemName = null;
  /**
   * @var string
   */
  public $accessLocation = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['tokenKey'])) {
        $this->tokenKey = $vals['tokenKey'];
      }
      if (isset($vals['expirationTime'])) {
        $this->expirationTime = $vals['expirationTime'];
      }
      if (isset($vals['applicationType'])) {
        $this->applicationType = $vals['applicationType'];
      }
      if (isset($vals['systemName'])) {
        $this->systemName = $vals['systemName'];
      }
      if (isset($vals['accessLocation'])) {
        $this->accessLocation = $vals['accessLocation'];
      }
    }
  }

  public function getName() {
    return 'LoginSession';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tokenKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->expirationTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->applicationType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->systemName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessLocation);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('LoginSession');
    if ($this->tokenKey !== null) {
      $xfer += $output->writeFieldBegin('tokenKey', TType::STRING, 1);
      $xfer += $output->writeString($this->tokenKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expirationTime !== null) {
      $xfer += $output->writeFieldBegin('expirationTime', TType::I64, 3);
      $xfer += $output->writeI64($this->expirationTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->applicationType !== null) {
      $xfer += $output->writeFieldBegin('applicationType', TType::I32, 11);
      $xfer += $output->writeI32($this->applicationType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->systemName !== null) {
      $xfer += $output->writeFieldBegin('systemName', TType::STRING, 12);
      $xfer += $output->writeString($this->systemName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessLocation !== null) {
      $xfer += $output->writeFieldBegin('accessLocation', TType::STRING, 22);
      $xfer += $output->writeString($this->accessLocation);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Message {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => '_from',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    99 => array(
      'var' => 'displayName',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    98 => array(
      'var' => 'picturePath',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    97 => array(
      'var' => 'type',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    96 => array(
      'var' => 'person',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    95 => array(
      'var' => 'person2',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    94 => array(
      'var' => 'personName',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    93 => array(
      'var' => 'personName2',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'to',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'toType',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    4 => array(
      'var' => 'id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'createdTime',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    6 => array(
      'var' => 'deliveredTime',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    10 => array(
      'var' => 'text',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    11 => array(
      'var' => 'location',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Location',
      ),
    14 => array(
      'var' => 'hasContent',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    15 => array(
      'var' => 'contentType',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    17 => array(
      'var' => 'contentPreview',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    18 => array(
      'var' => 'contentMetadata',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRING,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRING,
        ),
      ),
    19 => array(
      'var' => 'sessionId',
      'isRequired' => false,
      'type' => TType::BYTE,
      ),
    20 => array(
      'var' => 'chunks',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRING,
      'elem' => array(
        'type' => TType::STRING,
        ),
      ),
    21 => array(
      'var' => 'relatedMessageId',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    22 => array(
      'var' => 'messageRelationType',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    23 => array(
      'var' => 'readCount',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    24 => array(
      'var' => 'relatedMessageServiceCode',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var string
   */
  public $_from = null;
  /**
   * @var string
   */
  public $displayName = null;
  /**
   * @var string
   */
  public $picturePath = null;
  /**
   * @var string
   */
  public $type = null;
  /**
   * @var string
   */
  public $person = null;
  /**
   * @var string
   */
  public $person2 = null;
  /**
   * @var string
   */
  public $personName = null;
  /**
   * @var string
   */
  public $personName2 = null;
  /**
   * @var string
   */
  public $to = null;
  /**
   * @var int
   */
  public $toType = null;
  /**
   * @var string
   */
  public $id = null;
  /**
   * @var int
   */
  public $createdTime = null;
  /**
   * @var int
   */
  public $deliveredTime = null;
  /**
   * @var string
   */
  public $text = null;
  /**
   * @var \Location
   */
  public $location = null;
  /**
   * @var bool
   */
  public $hasContent = null;
  /**
   * @var int
   */
  public $contentType = null;
  /**
   * @var string
   */
  public $contentPreview = null;
  /**
   * @var array
   */
  public $contentMetadata = null;
  /**
   * @var int
   */
  public $sessionId = null;
  /**
   * @var string[]
   */
  public $chunks = null;
  /**
   * @var string
   */
  public $relatedMessageId = null;
  /**
   * @var int
   */
  public $messageRelationType = null;
  /**
   * @var int
   */
  public $readCount = null;
  /**
   * @var int
   */
  public $relatedMessageServiceCode = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['_from'])) {
        $this->_from = $vals['_from'];
      }
      if (isset($vals['displayName'])) {
        $this->displayName = $vals['displayName'];
      }
      if (isset($vals['picturePath'])) {
        $this->picturePath = $vals['picturePath'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['person'])) {
        $this->person = $vals['person'];
      }
      if (isset($vals['person2'])) {
        $this->person2 = $vals['person2'];
      }
      if (isset($vals['personName'])) {
        $this->personName = $vals['personName'];
      }
      if (isset($vals['personName2'])) {
        $this->personName2 = $vals['personName2'];
      }
      if (isset($vals['to'])) {
        $this->to = $vals['to'];
      }
      if (isset($vals['toType'])) {
        $this->toType = $vals['toType'];
      }
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['createdTime'])) {
        $this->createdTime = $vals['createdTime'];
      }
      if (isset($vals['deliveredTime'])) {
        $this->deliveredTime = $vals['deliveredTime'];
      }
      if (isset($vals['text'])) {
        $this->text = $vals['text'];
      }
      if (isset($vals['location'])) {
        $this->location = $vals['location'];
      }
      if (isset($vals['hasContent'])) {
        $this->hasContent = $vals['hasContent'];
      }
      if (isset($vals['contentType'])) {
        $this->contentType = $vals['contentType'];
      }
      if (isset($vals['contentPreview'])) {
        $this->contentPreview = $vals['contentPreview'];
      }
      if (isset($vals['contentMetadata'])) {
        $this->contentMetadata = $vals['contentMetadata'];
      }
      if (isset($vals['sessionId'])) {
        $this->sessionId = $vals['sessionId'];
      }
      if (isset($vals['chunks'])) {
        $this->chunks = $vals['chunks'];
      }
      if (isset($vals['relatedMessageId'])) {
        $this->relatedMessageId = $vals['relatedMessageId'];
      }
      if (isset($vals['messageRelationType'])) {
        $this->messageRelationType = $vals['messageRelationType'];
      }
      if (isset($vals['readCount'])) {
        $this->readCount = $vals['readCount'];
      }
      if (isset($vals['relatedMessageServiceCode'])) {
        $this->relatedMessageServiceCode = $vals['relatedMessageServiceCode'];
      }
    }
  }

  public function getName() {
    return 'Message';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->_from);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 99:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->displayName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 98:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->picturePath);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 97:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 96:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->person);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 95:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->person2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 94:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->personName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 93:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->personName2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->to);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->toType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->createdTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->deliveredTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->text);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRUCT) {
            $this->location = new \Location();
            $xfer += $this->location->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->hasContent);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->contentType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->contentPreview);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::MAP) {
            $this->contentMetadata = array();
            $_size437 = 0;
            $_ktype438 = 0;
            $_vtype439 = 0;
            $xfer += $input->readMapBegin($_ktype438, $_vtype439, $_size437);
            for ($_i441 = 0; $_i441 < $_size437; ++$_i441)
            {
              $key442 = '';
              $val443 = '';
              $xfer += $input->readString($key442);
              $xfer += $input->readString($val443);
              $this->contentMetadata[$key442] = $val443;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->sessionId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::LST) {
            $this->chunks = array();
            $_size444 = 0;
            $_etype447 = 0;
            $xfer += $input->readListBegin($_etype447, $_size444);
            for ($_i448 = 0; $_i448 < $_size444; ++$_i448)
            {
              $elem449 = null;
              $xfer += $input->readString($elem449);
              $this->chunks []= $elem449;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->relatedMessageId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->messageRelationType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->readCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 24:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->relatedMessageServiceCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Message');
    if ($this->_from !== null) {
      $xfer += $output->writeFieldBegin('_from', TType::STRING, 1);
      $xfer += $output->writeString($this->_from);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->to !== null) {
      $xfer += $output->writeFieldBegin('to', TType::STRING, 2);
      $xfer += $output->writeString($this->to);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->toType !== null) {
      $xfer += $output->writeFieldBegin('toType', TType::I32, 3);
      $xfer += $output->writeI32($this->toType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 4);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createdTime !== null) {
      $xfer += $output->writeFieldBegin('createdTime', TType::I64, 5);
      $xfer += $output->writeI64($this->createdTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deliveredTime !== null) {
      $xfer += $output->writeFieldBegin('deliveredTime', TType::I64, 6);
      $xfer += $output->writeI64($this->deliveredTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->text !== null) {
      $xfer += $output->writeFieldBegin('text', TType::STRING, 10);
      $xfer += $output->writeString($this->text);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->location !== null) {
      if (!is_object($this->location)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('location', TType::STRUCT, 11);
      $xfer += $this->location->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->hasContent !== null) {
      $xfer += $output->writeFieldBegin('hasContent', TType::BOOL, 14);
      $xfer += $output->writeBool($this->hasContent);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contentType !== null) {
      $xfer += $output->writeFieldBegin('contentType', TType::I32, 15);
      $xfer += $output->writeI32($this->contentType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contentPreview !== null) {
      $xfer += $output->writeFieldBegin('contentPreview', TType::STRING, 17);
      $xfer += $output->writeString($this->contentPreview);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contentMetadata !== null) {
      if (!is_array($this->contentMetadata)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('contentMetadata', TType::MAP, 18);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->contentMetadata));
        {
          foreach ($this->contentMetadata as $kiter450 => $viter451)
          {
            $xfer += $output->writeString($kiter450);
            $xfer += $output->writeString($viter451);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionId !== null) {
      $xfer += $output->writeFieldBegin('sessionId', TType::BYTE, 19);
      $xfer += $output->writeByte($this->sessionId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->chunks !== null) {
      if (!is_array($this->chunks)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('chunks', TType::LST, 20);
      {
        $output->writeListBegin(TType::STRING, count($this->chunks));
        {
          foreach ($this->chunks as $iter452)
          {
            $xfer += $output->writeString($iter452);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->relatedMessageId !== null) {
      $xfer += $output->writeFieldBegin('relatedMessageId', TType::STRING, 21);
      $xfer += $output->writeString($this->relatedMessageId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->messageRelationType !== null) {
      $xfer += $output->writeFieldBegin('messageRelationType', TType::I32, 22);
      $xfer += $output->writeI32($this->messageRelationType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->readCount !== null) {
      $xfer += $output->writeFieldBegin('readCount', TType::I32, 23);
      $xfer += $output->writeI32($this->readCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->relatedMessageServiceCode !== null) {
      $xfer += $output->writeFieldBegin('relatedMessageServiceCode', TType::I32, 24);
      $xfer += $output->writeI32($this->relatedMessageServiceCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->personName2 !== null) {
      $xfer += $output->writeFieldBegin('personName2', TType::STRING, 93);
      $xfer += $output->writeString($this->personName2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->personName !== null) {
      $xfer += $output->writeFieldBegin('personName', TType::STRING, 94);
      $xfer += $output->writeString($this->personName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->person2 !== null) {
      $xfer += $output->writeFieldBegin('person2', TType::STRING, 95);
      $xfer += $output->writeString($this->person2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->person !== null) {
      $xfer += $output->writeFieldBegin('person', TType::STRING, 96);
      $xfer += $output->writeString($this->person);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::STRING, 97);
      $xfer += $output->writeString($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->picturePath !== null) {
      $xfer += $output->writeFieldBegin('picturePath', TType::STRING, 98);
      $xfer += $output->writeString($this->picturePath);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->displayName !== null) {
      $xfer += $output->writeFieldBegin('displayName', TType::STRING, 99);
      $xfer += $output->writeString($this->displayName);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareMessage {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'message',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Message',
      ),
    3 => array(
      'var' => 'fromType',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    4 => array(
      'var' => 'squareMessageRevision',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    );

  /**
   * @var \Message
   */
  public $message = null;
  /**
   * @var int
   */
  public $fromType = null;
  /**
   * @var int
   */
  public $squareMessageRevision = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
      if (isset($vals['fromType'])) {
        $this->fromType = $vals['fromType'];
      }
      if (isset($vals['squareMessageRevision'])) {
        $this->squareMessageRevision = $vals['squareMessageRevision'];
      }
    }
  }

  public function getName() {
    return 'SquareMessage';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->message = new \Message();
            $xfer += $this->message->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->fromType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->squareMessageRevision);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareMessage');
    if ($this->message !== null) {
      if (!is_object($this->message)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('message', TType::STRUCT, 1);
      $xfer += $this->message->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fromType !== null) {
      $xfer += $output->writeFieldBegin('fromType', TType::I32, 3);
      $xfer += $output->writeI32($this->fromType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareMessageRevision !== null) {
      $xfer += $output->writeFieldBegin('squareMessageRevision', TType::I64, 4);
      $xfer += $output->writeI64($this->squareMessageRevision);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareChatStatusWithoutMessage {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'memberCount',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'unreadMessageCount',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $memberCount = null;
  /**
   * @var int
   */
  public $unreadMessageCount = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['memberCount'])) {
        $this->memberCount = $vals['memberCount'];
      }
      if (isset($vals['unreadMessageCount'])) {
        $this->unreadMessageCount = $vals['unreadMessageCount'];
      }
    }
  }

  public function getName() {
    return 'SquareChatStatusWithoutMessage';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->memberCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->unreadMessageCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareChatStatusWithoutMessage');
    if ($this->memberCount !== null) {
      $xfer += $output->writeFieldBegin('memberCount', TType::I32, 1);
      $xfer += $output->writeI32($this->memberCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->unreadMessageCount !== null) {
      $xfer += $output->writeFieldBegin('unreadMessageCount', TType::I32, 2);
      $xfer += $output->writeI32($this->unreadMessageCount);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareChatStatus {
  static $isValidate = false;

  static $_TSPEC = array(
    3 => array(
      'var' => 'lastMessage',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareMessage',
      ),
    4 => array(
      'var' => 'senderDisplayName',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'otherStatus',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareChatStatusWithoutMessage',
      ),
    );

  /**
   * @var \SquareMessage
   */
  public $lastMessage = null;
  /**
   * @var string
   */
  public $senderDisplayName = null;
  /**
   * @var \SquareChatStatusWithoutMessage
   */
  public $otherStatus = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['lastMessage'])) {
        $this->lastMessage = $vals['lastMessage'];
      }
      if (isset($vals['senderDisplayName'])) {
        $this->senderDisplayName = $vals['senderDisplayName'];
      }
      if (isset($vals['otherStatus'])) {
        $this->otherStatus = $vals['otherStatus'];
      }
    }
  }

  public function getName() {
    return 'SquareChatStatus';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->lastMessage = new \SquareMessage();
            $xfer += $this->lastMessage->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->senderDisplayName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->otherStatus = new \SquareChatStatusWithoutMessage();
            $xfer += $this->otherStatus->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareChatStatus');
    if ($this->lastMessage !== null) {
      if (!is_object($this->lastMessage)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('lastMessage', TType::STRUCT, 3);
      $xfer += $this->lastMessage->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->senderDisplayName !== null) {
      $xfer += $output->writeFieldBegin('senderDisplayName', TType::STRING, 4);
      $xfer += $output->writeString($this->senderDisplayName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->otherStatus !== null) {
      if (!is_object($this->otherStatus)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('otherStatus', TType::STRUCT, 5);
      $xfer += $this->otherStatus->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareChatMember {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'squareMemberMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'squareChatMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'revision',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    4 => array(
      'var' => 'membershipState',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    5 => array(
      'var' => 'notificationForMessage',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var string
   */
  public $squareMemberMid = null;
  /**
   * @var string
   */
  public $squareChatMid = null;
  /**
   * @var int
   */
  public $revision = null;
  /**
   * @var int
   */
  public $membershipState = null;
  /**
   * @var bool
   */
  public $notificationForMessage = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['squareMemberMid'])) {
        $this->squareMemberMid = $vals['squareMemberMid'];
      }
      if (isset($vals['squareChatMid'])) {
        $this->squareChatMid = $vals['squareChatMid'];
      }
      if (isset($vals['revision'])) {
        $this->revision = $vals['revision'];
      }
      if (isset($vals['membershipState'])) {
        $this->membershipState = $vals['membershipState'];
      }
      if (isset($vals['notificationForMessage'])) {
        $this->notificationForMessage = $vals['notificationForMessage'];
      }
    }
  }

  public function getName() {
    return 'SquareChatMember';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareMemberMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareChatMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->revision);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->membershipState);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->notificationForMessage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareChatMember');
    if ($this->squareMemberMid !== null) {
      $xfer += $output->writeFieldBegin('squareMemberMid', TType::STRING, 1);
      $xfer += $output->writeString($this->squareMemberMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareChatMid !== null) {
      $xfer += $output->writeFieldBegin('squareChatMid', TType::STRING, 2);
      $xfer += $output->writeString($this->squareChatMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->revision !== null) {
      $xfer += $output->writeFieldBegin('revision', TType::I64, 3);
      $xfer += $output->writeI64($this->revision);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->membershipState !== null) {
      $xfer += $output->writeFieldBegin('membershipState', TType::I32, 4);
      $xfer += $output->writeI32($this->membershipState);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notificationForMessage !== null) {
      $xfer += $output->writeFieldBegin('notificationForMessage', TType::BOOL, 5);
      $xfer += $output->writeBool($this->notificationForMessage);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MessageOperation {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'revision',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    2 => array(
      'var' => 'createdTime',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    3 => array(
      'var' => 'type',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    4 => array(
      'var' => 'reqSeq',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    5 => array(
      'var' => 'status',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    10 => array(
      'var' => 'param1',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    11 => array(
      'var' => 'param2',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    12 => array(
      'var' => 'param3',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    20 => array(
      'var' => 'message',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Message',
      ),
    );

  /**
   * @var int
   */
  public $revision = null;
  /**
   * @var int
   */
  public $createdTime = null;
  /**
   * @var int
   */
  public $type = null;
  /**
   * @var int
   */
  public $reqSeq = null;
  /**
   * @var int
   */
  public $status = null;
  /**
   * @var string
   */
  public $param1 = null;
  /**
   * @var string
   */
  public $param2 = null;
  /**
   * @var string
   */
  public $param3 = null;
  /**
   * @var \Message
   */
  public $message = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['revision'])) {
        $this->revision = $vals['revision'];
      }
      if (isset($vals['createdTime'])) {
        $this->createdTime = $vals['createdTime'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['reqSeq'])) {
        $this->reqSeq = $vals['reqSeq'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['param1'])) {
        $this->param1 = $vals['param1'];
      }
      if (isset($vals['param2'])) {
        $this->param2 = $vals['param2'];
      }
      if (isset($vals['param3'])) {
        $this->param3 = $vals['param3'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    }
  }

  public function getName() {
    return 'MessageOperation';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->revision);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->createdTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->reqSeq);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->param1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->param2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->param3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::STRUCT) {
            $this->message = new \Message();
            $xfer += $this->message->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MessageOperation');
    if ($this->revision !== null) {
      $xfer += $output->writeFieldBegin('revision', TType::I64, 1);
      $xfer += $output->writeI64($this->revision);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createdTime !== null) {
      $xfer += $output->writeFieldBegin('createdTime', TType::I64, 2);
      $xfer += $output->writeI64($this->createdTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 3);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reqSeq !== null) {
      $xfer += $output->writeFieldBegin('reqSeq', TType::I32, 4);
      $xfer += $output->writeI32($this->reqSeq);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 5);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->param1 !== null) {
      $xfer += $output->writeFieldBegin('param1', TType::STRING, 10);
      $xfer += $output->writeString($this->param1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->param2 !== null) {
      $xfer += $output->writeFieldBegin('param2', TType::STRING, 11);
      $xfer += $output->writeString($this->param2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->param3 !== null) {
      $xfer += $output->writeFieldBegin('param3', TType::STRING, 12);
      $xfer += $output->writeString($this->param3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      if (!is_object($this->message)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('message', TType::STRUCT, 20);
      $xfer += $this->message->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MessageOperations {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'operations',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\MessageOperation',
        ),
      ),
    2 => array(
      'var' => 'endFlag',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var \MessageOperation[]
   */
  public $operations = null;
  /**
   * @var bool
   */
  public $endFlag = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['operations'])) {
        $this->operations = $vals['operations'];
      }
      if (isset($vals['endFlag'])) {
        $this->endFlag = $vals['endFlag'];
      }
    }
  }

  public function getName() {
    return 'MessageOperations';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->operations = array();
            $_size453 = 0;
            $_etype456 = 0;
            $xfer += $input->readListBegin($_etype456, $_size453);
            for ($_i457 = 0; $_i457 < $_size453; ++$_i457)
            {
              $elem458 = null;
              $elem458 = new \MessageOperation();
              $xfer += $elem458->read($input);
              $this->operations []= $elem458;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->endFlag);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MessageOperations');
    if ($this->operations !== null) {
      if (!is_array($this->operations)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('operations', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->operations));
        {
          foreach ($this->operations as $iter459)
          {
            $xfer += $iter459->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->endFlag !== null) {
      $xfer += $output->writeFieldBegin('endFlag', TType::BOOL, 2);
      $xfer += $output->writeBool($this->endFlag);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MessageStoreResult {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'requestId',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'messageIds',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRING,
      'elem' => array(
        'type' => TType::STRING,
        ),
      ),
    );

  /**
   * @var string
   */
  public $requestId = null;
  /**
   * @var string[]
   */
  public $messageIds = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['requestId'])) {
        $this->requestId = $vals['requestId'];
      }
      if (isset($vals['messageIds'])) {
        $this->messageIds = $vals['messageIds'];
      }
    }
  }

  public function getName() {
    return 'MessageStoreResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->requestId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->messageIds = array();
            $_size460 = 0;
            $_etype463 = 0;
            $xfer += $input->readListBegin($_etype463, $_size460);
            for ($_i464 = 0; $_i464 < $_size460; ++$_i464)
            {
              $elem465 = null;
              $xfer += $input->readString($elem465);
              $this->messageIds []= $elem465;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MessageStoreResult');
    if ($this->requestId !== null) {
      $xfer += $output->writeFieldBegin('requestId', TType::STRING, 1);
      $xfer += $output->writeString($this->requestId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->messageIds !== null) {
      if (!is_array($this->messageIds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('messageIds', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRING, count($this->messageIds));
        {
          foreach ($this->messageIds as $iter466)
          {
            $xfer += $output->writeString($iter466);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MetaProfile {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'createTime',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    2 => array(
      'var' => 'regionCode',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'identities',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::I32,
      'vtype' => TType::STRING,
      'key' => array(
        'type' => TType::I32,
      ),
      'val' => array(
        'type' => TType::STRING,
        ),
      ),
    );

  /**
   * @var int
   */
  public $createTime = null;
  /**
   * @var string
   */
  public $regionCode = null;
  /**
   * @var array
   */
  public $identities = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['createTime'])) {
        $this->createTime = $vals['createTime'];
      }
      if (isset($vals['regionCode'])) {
        $this->regionCode = $vals['regionCode'];
      }
      if (isset($vals['identities'])) {
        $this->identities = $vals['identities'];
      }
    }
  }

  public function getName() {
    return 'MetaProfile';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->createTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->regionCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::MAP) {
            $this->identities = array();
            $_size467 = 0;
            $_ktype468 = 0;
            $_vtype469 = 0;
            $xfer += $input->readMapBegin($_ktype468, $_vtype469, $_size467);
            for ($_i471 = 0; $_i471 < $_size467; ++$_i471)
            {
              $key472 = 0;
              $val473 = '';
              $xfer += $input->readI32($key472);
              $xfer += $input->readString($val473);
              $this->identities[$key472] = $val473;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MetaProfile');
    if ($this->createTime !== null) {
      $xfer += $output->writeFieldBegin('createTime', TType::I64, 1);
      $xfer += $output->writeI64($this->createTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->regionCode !== null) {
      $xfer += $output->writeFieldBegin('regionCode', TType::STRING, 2);
      $xfer += $output->writeString($this->regionCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->identities !== null) {
      if (!is_array($this->identities)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('identities', TType::MAP, 3);
      {
        $output->writeMapBegin(TType::I32, TType::STRING, count($this->identities));
        {
          foreach ($this->identities as $kiter474 => $viter475)
          {
            $xfer += $output->writeI32($kiter474);
            $xfer += $output->writeString($viter475);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class NotificationItem {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => '_from',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'to',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'fromChannel',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'toChannel',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    7 => array(
      'var' => 'revision',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    8 => array(
      'var' => 'createdTime',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    9 => array(
      'var' => 'content',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRING,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRING,
        ),
      ),
    );

  /**
   * @var string
   */
  public $id = null;
  /**
   * @var string
   */
  public $_from = null;
  /**
   * @var string
   */
  public $to = null;
  /**
   * @var string
   */
  public $fromChannel = null;
  /**
   * @var string
   */
  public $toChannel = null;
  /**
   * @var int
   */
  public $revision = null;
  /**
   * @var int
   */
  public $createdTime = null;
  /**
   * @var array
   */
  public $content = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['_from'])) {
        $this->_from = $vals['_from'];
      }
      if (isset($vals['to'])) {
        $this->to = $vals['to'];
      }
      if (isset($vals['fromChannel'])) {
        $this->fromChannel = $vals['fromChannel'];
      }
      if (isset($vals['toChannel'])) {
        $this->toChannel = $vals['toChannel'];
      }
      if (isset($vals['revision'])) {
        $this->revision = $vals['revision'];
      }
      if (isset($vals['createdTime'])) {
        $this->createdTime = $vals['createdTime'];
      }
      if (isset($vals['content'])) {
        $this->content = $vals['content'];
      }
    }
  }

  public function getName() {
    return 'NotificationItem';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->_from);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->to);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fromChannel);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->toChannel);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->revision);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->createdTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::MAP) {
            $this->content = array();
            $_size476 = 0;
            $_ktype477 = 0;
            $_vtype478 = 0;
            $xfer += $input->readMapBegin($_ktype477, $_vtype478, $_size476);
            for ($_i480 = 0; $_i480 < $_size476; ++$_i480)
            {
              $key481 = '';
              $val482 = '';
              $xfer += $input->readString($key481);
              $xfer += $input->readString($val482);
              $this->content[$key481] = $val482;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('NotificationItem');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->_from !== null) {
      $xfer += $output->writeFieldBegin('_from', TType::STRING, 2);
      $xfer += $output->writeString($this->_from);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->to !== null) {
      $xfer += $output->writeFieldBegin('to', TType::STRING, 3);
      $xfer += $output->writeString($this->to);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fromChannel !== null) {
      $xfer += $output->writeFieldBegin('fromChannel', TType::STRING, 4);
      $xfer += $output->writeString($this->fromChannel);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->toChannel !== null) {
      $xfer += $output->writeFieldBegin('toChannel', TType::STRING, 5);
      $xfer += $output->writeString($this->toChannel);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->revision !== null) {
      $xfer += $output->writeFieldBegin('revision', TType::I64, 7);
      $xfer += $output->writeI64($this->revision);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createdTime !== null) {
      $xfer += $output->writeFieldBegin('createdTime', TType::I64, 8);
      $xfer += $output->writeI64($this->createdTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->content !== null) {
      if (!is_array($this->content)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('content', TType::MAP, 9);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->content));
        {
          foreach ($this->content as $kiter483 => $viter484)
          {
            $xfer += $output->writeString($kiter483);
            $xfer += $output->writeString($viter484);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class NotificationFetchResult {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'fetchMode',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'itemList',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\NotificationItem',
        ),
      ),
    );

  /**
   * @var int
   */
  public $fetchMode = null;
  /**
   * @var \NotificationItem[]
   */
  public $itemList = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['fetchMode'])) {
        $this->fetchMode = $vals['fetchMode'];
      }
      if (isset($vals['itemList'])) {
        $this->itemList = $vals['itemList'];
      }
    }
  }

  public function getName() {
    return 'NotificationFetchResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->fetchMode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->itemList = array();
            $_size485 = 0;
            $_etype488 = 0;
            $xfer += $input->readListBegin($_etype488, $_size485);
            for ($_i489 = 0; $_i489 < $_size485; ++$_i489)
            {
              $elem490 = null;
              $elem490 = new \NotificationItem();
              $xfer += $elem490->read($input);
              $this->itemList []= $elem490;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('NotificationFetchResult');
    if ($this->fetchMode !== null) {
      $xfer += $output->writeFieldBegin('fetchMode', TType::I32, 1);
      $xfer += $output->writeI32($this->fetchMode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->itemList !== null) {
      if (!is_array($this->itemList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('itemList', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->itemList));
        {
          foreach ($this->itemList as $iter491)
          {
            $xfer += $iter491->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Operation {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'revision',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    2 => array(
      'var' => 'createdTime',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    3 => array(
      'var' => 'type',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    4 => array(
      'var' => 'reqSeq',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    5 => array(
      'var' => 'checksum',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    7 => array(
      'var' => 'status',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    10 => array(
      'var' => 'param1',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    11 => array(
      'var' => 'param2',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    12 => array(
      'var' => 'param3',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    20 => array(
      'var' => 'message',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Message',
      ),
    );

  /**
   * @var int
   */
  public $revision = null;
  /**
   * @var int
   */
  public $createdTime = null;
  /**
   * @var int
   */
  public $type = null;
  /**
   * @var int
   */
  public $reqSeq = null;
  /**
   * @var string
   */
  public $checksum = null;
  /**
   * @var int
   */
  public $status = null;
  /**
   * @var string
   */
  public $param1 = null;
  /**
   * @var string
   */
  public $param2 = null;
  /**
   * @var string
   */
  public $param3 = null;
  /**
   * @var \Message
   */
  public $message = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['revision'])) {
        $this->revision = $vals['revision'];
      }
      if (isset($vals['createdTime'])) {
        $this->createdTime = $vals['createdTime'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['reqSeq'])) {
        $this->reqSeq = $vals['reqSeq'];
      }
      if (isset($vals['checksum'])) {
        $this->checksum = $vals['checksum'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['param1'])) {
        $this->param1 = $vals['param1'];
      }
      if (isset($vals['param2'])) {
        $this->param2 = $vals['param2'];
      }
      if (isset($vals['param3'])) {
        $this->param3 = $vals['param3'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    }
  }

  public function getName() {
    return 'Operation';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->revision);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->createdTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->reqSeq);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->checksum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->param1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->param2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->param3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::STRUCT) {
            $this->message = new \Message();
            $xfer += $this->message->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Operation');
    if ($this->revision !== null) {
      $xfer += $output->writeFieldBegin('revision', TType::I64, 1);
      $xfer += $output->writeI64($this->revision);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createdTime !== null) {
      $xfer += $output->writeFieldBegin('createdTime', TType::I64, 2);
      $xfer += $output->writeI64($this->createdTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 3);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reqSeq !== null) {
      $xfer += $output->writeFieldBegin('reqSeq', TType::I32, 4);
      $xfer += $output->writeI32($this->reqSeq);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->checksum !== null) {
      $xfer += $output->writeFieldBegin('checksum', TType::STRING, 5);
      $xfer += $output->writeString($this->checksum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 7);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->param1 !== null) {
      $xfer += $output->writeFieldBegin('param1', TType::STRING, 10);
      $xfer += $output->writeString($this->param1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->param2 !== null) {
      $xfer += $output->writeFieldBegin('param2', TType::STRING, 11);
      $xfer += $output->writeString($this->param2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->param3 !== null) {
      $xfer += $output->writeFieldBegin('param3', TType::STRING, 12);
      $xfer += $output->writeString($this->param3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      if (!is_object($this->message)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('message', TType::STRUCT, 20);
      $xfer += $this->message->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PaymentReservation {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'receiverMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'productId',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'language',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'location',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'currency',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'price',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    7 => array(
      'var' => 'appStoreCode',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    8 => array(
      'var' => 'messageText',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    9 => array(
      'var' => 'messageTemplate',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    10 => array(
      'var' => 'packageId',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    );

  /**
   * @var string
   */
  public $receiverMid = null;
  /**
   * @var string
   */
  public $productId = null;
  /**
   * @var string
   */
  public $language = null;
  /**
   * @var string
   */
  public $location = null;
  /**
   * @var string
   */
  public $currency = null;
  /**
   * @var string
   */
  public $price = null;
  /**
   * @var int
   */
  public $appStoreCode = null;
  /**
   * @var string
   */
  public $messageText = null;
  /**
   * @var int
   */
  public $messageTemplate = null;
  /**
   * @var int
   */
  public $packageId = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['receiverMid'])) {
        $this->receiverMid = $vals['receiverMid'];
      }
      if (isset($vals['productId'])) {
        $this->productId = $vals['productId'];
      }
      if (isset($vals['language'])) {
        $this->language = $vals['language'];
      }
      if (isset($vals['location'])) {
        $this->location = $vals['location'];
      }
      if (isset($vals['currency'])) {
        $this->currency = $vals['currency'];
      }
      if (isset($vals['price'])) {
        $this->price = $vals['price'];
      }
      if (isset($vals['appStoreCode'])) {
        $this->appStoreCode = $vals['appStoreCode'];
      }
      if (isset($vals['messageText'])) {
        $this->messageText = $vals['messageText'];
      }
      if (isset($vals['messageTemplate'])) {
        $this->messageTemplate = $vals['messageTemplate'];
      }
      if (isset($vals['packageId'])) {
        $this->packageId = $vals['packageId'];
      }
    }
  }

  public function getName() {
    return 'PaymentReservation';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->receiverMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->productId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->language);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->location);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->currency);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->appStoreCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->messageText);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->messageTemplate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->packageId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PaymentReservation');
    if ($this->receiverMid !== null) {
      $xfer += $output->writeFieldBegin('receiverMid', TType::STRING, 1);
      $xfer += $output->writeString($this->receiverMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->productId !== null) {
      $xfer += $output->writeFieldBegin('productId', TType::STRING, 2);
      $xfer += $output->writeString($this->productId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->language !== null) {
      $xfer += $output->writeFieldBegin('language', TType::STRING, 3);
      $xfer += $output->writeString($this->language);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->location !== null) {
      $xfer += $output->writeFieldBegin('location', TType::STRING, 4);
      $xfer += $output->writeString($this->location);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->currency !== null) {
      $xfer += $output->writeFieldBegin('currency', TType::STRING, 5);
      $xfer += $output->writeString($this->currency);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->price !== null) {
      $xfer += $output->writeFieldBegin('price', TType::STRING, 6);
      $xfer += $output->writeString($this->price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appStoreCode !== null) {
      $xfer += $output->writeFieldBegin('appStoreCode', TType::I32, 7);
      $xfer += $output->writeI32($this->appStoreCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->messageText !== null) {
      $xfer += $output->writeFieldBegin('messageText', TType::STRING, 8);
      $xfer += $output->writeString($this->messageText);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->messageTemplate !== null) {
      $xfer += $output->writeFieldBegin('messageTemplate', TType::I32, 9);
      $xfer += $output->writeI32($this->messageTemplate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->packageId !== null) {
      $xfer += $output->writeFieldBegin('packageId', TType::I64, 10);
      $xfer += $output->writeI64($this->packageId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PaymentReservationResult {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'orderId',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'confirmUrl',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'extras',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRING,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRING,
        ),
      ),
    );

  /**
   * @var string
   */
  public $orderId = null;
  /**
   * @var string
   */
  public $confirmUrl = null;
  /**
   * @var array
   */
  public $extras = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['orderId'])) {
        $this->orderId = $vals['orderId'];
      }
      if (isset($vals['confirmUrl'])) {
        $this->confirmUrl = $vals['confirmUrl'];
      }
      if (isset($vals['extras'])) {
        $this->extras = $vals['extras'];
      }
    }
  }

  public function getName() {
    return 'PaymentReservationResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->orderId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->confirmUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::MAP) {
            $this->extras = array();
            $_size492 = 0;
            $_ktype493 = 0;
            $_vtype494 = 0;
            $xfer += $input->readMapBegin($_ktype493, $_vtype494, $_size492);
            for ($_i496 = 0; $_i496 < $_size492; ++$_i496)
            {
              $key497 = '';
              $val498 = '';
              $xfer += $input->readString($key497);
              $xfer += $input->readString($val498);
              $this->extras[$key497] = $val498;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PaymentReservationResult');
    if ($this->orderId !== null) {
      $xfer += $output->writeFieldBegin('orderId', TType::STRING, 1);
      $xfer += $output->writeString($this->orderId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->confirmUrl !== null) {
      $xfer += $output->writeFieldBegin('confirmUrl', TType::STRING, 2);
      $xfer += $output->writeString($this->confirmUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extras !== null) {
      if (!is_array($this->extras)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('extras', TType::MAP, 3);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->extras));
        {
          foreach ($this->extras as $kiter499 => $viter500)
          {
            $xfer += $output->writeString($kiter499);
            $xfer += $output->writeString($viter500);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Product {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'productId',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'packageId',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    3 => array(
      'var' => 'version',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    4 => array(
      'var' => 'authorName',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'onSale',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    6 => array(
      'var' => 'validDays',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    7 => array(
      'var' => 'saleType',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    8 => array(
      'var' => 'copyright',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    9 => array(
      'var' => 'title',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    10 => array(
      'var' => 'descriptionText',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    11 => array(
      'var' => 'shopOrderId',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    12 => array(
      'var' => 'fromMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    13 => array(
      'var' => 'toMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    14 => array(
      'var' => 'validUntil',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    15 => array(
      'var' => 'priceTier',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    16 => array(
      'var' => 'price',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    17 => array(
      'var' => 'currency',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    18 => array(
      'var' => 'currencySymbol',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    19 => array(
      'var' => 'paymentType',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    20 => array(
      'var' => 'createDate',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    21 => array(
      'var' => 'ownFlag',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    22 => array(
      'var' => 'eventType',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    23 => array(
      'var' => 'urlSchema',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    24 => array(
      'var' => 'downloadUrl',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    25 => array(
      'var' => 'buddyMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    26 => array(
      'var' => 'publishSince',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    27 => array(
      'var' => 'newFlag',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    28 => array(
      'var' => 'missionFlag',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    29 => array(
      'var' => 'categories',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\ProductCategory',
        ),
      ),
    30 => array(
      'var' => 'missionButtonText',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    31 => array(
      'var' => 'missionShortDescription',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    32 => array(
      'var' => 'authorId',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    41 => array(
      'var' => 'grantedByDefault',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    42 => array(
      'var' => 'displayOrder',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    43 => array(
      'var' => 'availableForPresent',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    44 => array(
      'var' => 'availableForMyself',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    51 => array(
      'var' => 'hasAnimation',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    52 => array(
      'var' => 'hasSound',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    53 => array(
      'var' => 'recommendationsEnabled',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    54 => array(
      'var' => 'stickerResourceType',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var string
   */
  public $productId = null;
  /**
   * @var int
   */
  public $packageId = null;
  /**
   * @var int
   */
  public $version = null;
  /**
   * @var string
   */
  public $authorName = null;
  /**
   * @var bool
   */
  public $onSale = null;
  /**
   * @var int
   */
  public $validDays = null;
  /**
   * @var int
   */
  public $saleType = null;
  /**
   * @var string
   */
  public $copyright = null;
  /**
   * @var string
   */
  public $title = null;
  /**
   * @var string
   */
  public $descriptionText = null;
  /**
   * @var int
   */
  public $shopOrderId = null;
  /**
   * @var string
   */
  public $fromMid = null;
  /**
   * @var string
   */
  public $toMid = null;
  /**
   * @var int
   */
  public $validUntil = null;
  /**
   * @var int
   */
  public $priceTier = null;
  /**
   * @var string
   */
  public $price = null;
  /**
   * @var string
   */
  public $currency = null;
  /**
   * @var string
   */
  public $currencySymbol = null;
  /**
   * @var int
   */
  public $paymentType = null;
  /**
   * @var int
   */
  public $createDate = null;
  /**
   * @var bool
   */
  public $ownFlag = null;
  /**
   * @var int
   */
  public $eventType = null;
  /**
   * @var string
   */
  public $urlSchema = null;
  /**
   * @var string
   */
  public $downloadUrl = null;
  /**
   * @var string
   */
  public $buddyMid = null;
  /**
   * @var int
   */
  public $publishSince = null;
  /**
   * @var bool
   */
  public $newFlag = null;
  /**
   * @var bool
   */
  public $missionFlag = null;
  /**
   * @var \ProductCategory[]
   */
  public $categories = null;
  /**
   * @var string
   */
  public $missionButtonText = null;
  /**
   * @var string
   */
  public $missionShortDescription = null;
  /**
   * @var string
   */
  public $authorId = null;
  /**
   * @var bool
   */
  public $grantedByDefault = null;
  /**
   * @var int
   */
  public $displayOrder = null;
  /**
   * @var bool
   */
  public $availableForPresent = null;
  /**
   * @var bool
   */
  public $availableForMyself = null;
  /**
   * @var bool
   */
  public $hasAnimation = null;
  /**
   * @var bool
   */
  public $hasSound = null;
  /**
   * @var bool
   */
  public $recommendationsEnabled = null;
  /**
   * @var int
   */
  public $stickerResourceType = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['productId'])) {
        $this->productId = $vals['productId'];
      }
      if (isset($vals['packageId'])) {
        $this->packageId = $vals['packageId'];
      }
      if (isset($vals['version'])) {
        $this->version = $vals['version'];
      }
      if (isset($vals['authorName'])) {
        $this->authorName = $vals['authorName'];
      }
      if (isset($vals['onSale'])) {
        $this->onSale = $vals['onSale'];
      }
      if (isset($vals['validDays'])) {
        $this->validDays = $vals['validDays'];
      }
      if (isset($vals['saleType'])) {
        $this->saleType = $vals['saleType'];
      }
      if (isset($vals['copyright'])) {
        $this->copyright = $vals['copyright'];
      }
      if (isset($vals['title'])) {
        $this->title = $vals['title'];
      }
      if (isset($vals['descriptionText'])) {
        $this->descriptionText = $vals['descriptionText'];
      }
      if (isset($vals['shopOrderId'])) {
        $this->shopOrderId = $vals['shopOrderId'];
      }
      if (isset($vals['fromMid'])) {
        $this->fromMid = $vals['fromMid'];
      }
      if (isset($vals['toMid'])) {
        $this->toMid = $vals['toMid'];
      }
      if (isset($vals['validUntil'])) {
        $this->validUntil = $vals['validUntil'];
      }
      if (isset($vals['priceTier'])) {
        $this->priceTier = $vals['priceTier'];
      }
      if (isset($vals['price'])) {
        $this->price = $vals['price'];
      }
      if (isset($vals['currency'])) {
        $this->currency = $vals['currency'];
      }
      if (isset($vals['currencySymbol'])) {
        $this->currencySymbol = $vals['currencySymbol'];
      }
      if (isset($vals['paymentType'])) {
        $this->paymentType = $vals['paymentType'];
      }
      if (isset($vals['createDate'])) {
        $this->createDate = $vals['createDate'];
      }
      if (isset($vals['ownFlag'])) {
        $this->ownFlag = $vals['ownFlag'];
      }
      if (isset($vals['eventType'])) {
        $this->eventType = $vals['eventType'];
      }
      if (isset($vals['urlSchema'])) {
        $this->urlSchema = $vals['urlSchema'];
      }
      if (isset($vals['downloadUrl'])) {
        $this->downloadUrl = $vals['downloadUrl'];
      }
      if (isset($vals['buddyMid'])) {
        $this->buddyMid = $vals['buddyMid'];
      }
      if (isset($vals['publishSince'])) {
        $this->publishSince = $vals['publishSince'];
      }
      if (isset($vals['newFlag'])) {
        $this->newFlag = $vals['newFlag'];
      }
      if (isset($vals['missionFlag'])) {
        $this->missionFlag = $vals['missionFlag'];
      }
      if (isset($vals['categories'])) {
        $this->categories = $vals['categories'];
      }
      if (isset($vals['missionButtonText'])) {
        $this->missionButtonText = $vals['missionButtonText'];
      }
      if (isset($vals['missionShortDescription'])) {
        $this->missionShortDescription = $vals['missionShortDescription'];
      }
      if (isset($vals['authorId'])) {
        $this->authorId = $vals['authorId'];
      }
      if (isset($vals['grantedByDefault'])) {
        $this->grantedByDefault = $vals['grantedByDefault'];
      }
      if (isset($vals['displayOrder'])) {
        $this->displayOrder = $vals['displayOrder'];
      }
      if (isset($vals['availableForPresent'])) {
        $this->availableForPresent = $vals['availableForPresent'];
      }
      if (isset($vals['availableForMyself'])) {
        $this->availableForMyself = $vals['availableForMyself'];
      }
      if (isset($vals['hasAnimation'])) {
        $this->hasAnimation = $vals['hasAnimation'];
      }
      if (isset($vals['hasSound'])) {
        $this->hasSound = $vals['hasSound'];
      }
      if (isset($vals['recommendationsEnabled'])) {
        $this->recommendationsEnabled = $vals['recommendationsEnabled'];
      }
      if (isset($vals['stickerResourceType'])) {
        $this->stickerResourceType = $vals['stickerResourceType'];
      }
    }
  }

  public function getName() {
    return 'Product';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->productId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->packageId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->version);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->authorName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->onSale);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->validDays);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->saleType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->copyright);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->title);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->descriptionText);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->shopOrderId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fromMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->toMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->validUntil);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->priceTier);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->currency);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->currencySymbol);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->paymentType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->createDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->ownFlag);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->eventType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->urlSchema);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 24:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->downloadUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 25:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->buddyMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 26:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->publishSince);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 27:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->newFlag);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 28:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->missionFlag);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 29:
          if ($ftype == TType::LST) {
            $this->categories = array();
            $_size501 = 0;
            $_etype504 = 0;
            $xfer += $input->readListBegin($_etype504, $_size501);
            for ($_i505 = 0; $_i505 < $_size501; ++$_i505)
            {
              $elem506 = null;
              $elem506 = new \ProductCategory();
              $xfer += $elem506->read($input);
              $this->categories []= $elem506;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 30:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->missionButtonText);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 31:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->missionShortDescription);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 32:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->authorId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 41:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->grantedByDefault);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 42:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->displayOrder);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 43:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->availableForPresent);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 44:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->availableForMyself);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 51:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->hasAnimation);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 52:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->hasSound);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 53:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->recommendationsEnabled);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 54:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->stickerResourceType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Product');
    if ($this->productId !== null) {
      $xfer += $output->writeFieldBegin('productId', TType::STRING, 1);
      $xfer += $output->writeString($this->productId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->packageId !== null) {
      $xfer += $output->writeFieldBegin('packageId', TType::I64, 2);
      $xfer += $output->writeI64($this->packageId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->version !== null) {
      $xfer += $output->writeFieldBegin('version', TType::I32, 3);
      $xfer += $output->writeI32($this->version);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authorName !== null) {
      $xfer += $output->writeFieldBegin('authorName', TType::STRING, 4);
      $xfer += $output->writeString($this->authorName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->onSale !== null) {
      $xfer += $output->writeFieldBegin('onSale', TType::BOOL, 5);
      $xfer += $output->writeBool($this->onSale);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->validDays !== null) {
      $xfer += $output->writeFieldBegin('validDays', TType::I32, 6);
      $xfer += $output->writeI32($this->validDays);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->saleType !== null) {
      $xfer += $output->writeFieldBegin('saleType', TType::I32, 7);
      $xfer += $output->writeI32($this->saleType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->copyright !== null) {
      $xfer += $output->writeFieldBegin('copyright', TType::STRING, 8);
      $xfer += $output->writeString($this->copyright);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->title !== null) {
      $xfer += $output->writeFieldBegin('title', TType::STRING, 9);
      $xfer += $output->writeString($this->title);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->descriptionText !== null) {
      $xfer += $output->writeFieldBegin('descriptionText', TType::STRING, 10);
      $xfer += $output->writeString($this->descriptionText);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->shopOrderId !== null) {
      $xfer += $output->writeFieldBegin('shopOrderId', TType::I64, 11);
      $xfer += $output->writeI64($this->shopOrderId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fromMid !== null) {
      $xfer += $output->writeFieldBegin('fromMid', TType::STRING, 12);
      $xfer += $output->writeString($this->fromMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->toMid !== null) {
      $xfer += $output->writeFieldBegin('toMid', TType::STRING, 13);
      $xfer += $output->writeString($this->toMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->validUntil !== null) {
      $xfer += $output->writeFieldBegin('validUntil', TType::I64, 14);
      $xfer += $output->writeI64($this->validUntil);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->priceTier !== null) {
      $xfer += $output->writeFieldBegin('priceTier', TType::I32, 15);
      $xfer += $output->writeI32($this->priceTier);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->price !== null) {
      $xfer += $output->writeFieldBegin('price', TType::STRING, 16);
      $xfer += $output->writeString($this->price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->currency !== null) {
      $xfer += $output->writeFieldBegin('currency', TType::STRING, 17);
      $xfer += $output->writeString($this->currency);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->currencySymbol !== null) {
      $xfer += $output->writeFieldBegin('currencySymbol', TType::STRING, 18);
      $xfer += $output->writeString($this->currencySymbol);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->paymentType !== null) {
      $xfer += $output->writeFieldBegin('paymentType', TType::I32, 19);
      $xfer += $output->writeI32($this->paymentType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createDate !== null) {
      $xfer += $output->writeFieldBegin('createDate', TType::I64, 20);
      $xfer += $output->writeI64($this->createDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ownFlag !== null) {
      $xfer += $output->writeFieldBegin('ownFlag', TType::BOOL, 21);
      $xfer += $output->writeBool($this->ownFlag);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->eventType !== null) {
      $xfer += $output->writeFieldBegin('eventType', TType::I32, 22);
      $xfer += $output->writeI32($this->eventType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->urlSchema !== null) {
      $xfer += $output->writeFieldBegin('urlSchema', TType::STRING, 23);
      $xfer += $output->writeString($this->urlSchema);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->downloadUrl !== null) {
      $xfer += $output->writeFieldBegin('downloadUrl', TType::STRING, 24);
      $xfer += $output->writeString($this->downloadUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->buddyMid !== null) {
      $xfer += $output->writeFieldBegin('buddyMid', TType::STRING, 25);
      $xfer += $output->writeString($this->buddyMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->publishSince !== null) {
      $xfer += $output->writeFieldBegin('publishSince', TType::I64, 26);
      $xfer += $output->writeI64($this->publishSince);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->newFlag !== null) {
      $xfer += $output->writeFieldBegin('newFlag', TType::BOOL, 27);
      $xfer += $output->writeBool($this->newFlag);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->missionFlag !== null) {
      $xfer += $output->writeFieldBegin('missionFlag', TType::BOOL, 28);
      $xfer += $output->writeBool($this->missionFlag);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->categories !== null) {
      if (!is_array($this->categories)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('categories', TType::LST, 29);
      {
        $output->writeListBegin(TType::STRUCT, count($this->categories));
        {
          foreach ($this->categories as $iter507)
          {
            $xfer += $iter507->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->missionButtonText !== null) {
      $xfer += $output->writeFieldBegin('missionButtonText', TType::STRING, 30);
      $xfer += $output->writeString($this->missionButtonText);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->missionShortDescription !== null) {
      $xfer += $output->writeFieldBegin('missionShortDescription', TType::STRING, 31);
      $xfer += $output->writeString($this->missionShortDescription);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authorId !== null) {
      $xfer += $output->writeFieldBegin('authorId', TType::STRING, 32);
      $xfer += $output->writeString($this->authorId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->grantedByDefault !== null) {
      $xfer += $output->writeFieldBegin('grantedByDefault', TType::BOOL, 41);
      $xfer += $output->writeBool($this->grantedByDefault);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->displayOrder !== null) {
      $xfer += $output->writeFieldBegin('displayOrder', TType::I32, 42);
      $xfer += $output->writeI32($this->displayOrder);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->availableForPresent !== null) {
      $xfer += $output->writeFieldBegin('availableForPresent', TType::BOOL, 43);
      $xfer += $output->writeBool($this->availableForPresent);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->availableForMyself !== null) {
      $xfer += $output->writeFieldBegin('availableForMyself', TType::BOOL, 44);
      $xfer += $output->writeBool($this->availableForMyself);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->hasAnimation !== null) {
      $xfer += $output->writeFieldBegin('hasAnimation', TType::BOOL, 51);
      $xfer += $output->writeBool($this->hasAnimation);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->hasSound !== null) {
      $xfer += $output->writeFieldBegin('hasSound', TType::BOOL, 52);
      $xfer += $output->writeBool($this->hasSound);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->recommendationsEnabled !== null) {
      $xfer += $output->writeFieldBegin('recommendationsEnabled', TType::BOOL, 53);
      $xfer += $output->writeBool($this->recommendationsEnabled);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->stickerResourceType !== null) {
      $xfer += $output->writeFieldBegin('stickerResourceType', TType::I32, 54);
      $xfer += $output->writeI32($this->stickerResourceType);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ProductList {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'hasNext',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    4 => array(
      'var' => 'bannerSequence',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    5 => array(
      'var' => 'bannerTargetType',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    6 => array(
      'var' => 'bannerTargetPath',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    7 => array(
      'var' => 'productList',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\Product',
        ),
      ),
    8 => array(
      'var' => 'bannerLang',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var bool
   */
  public $hasNext = null;
  /**
   * @var int
   */
  public $bannerSequence = null;
  /**
   * @var int
   */
  public $bannerTargetType = null;
  /**
   * @var string
   */
  public $bannerTargetPath = null;
  /**
   * @var \Product[]
   */
  public $productList = null;
  /**
   * @var string
   */
  public $bannerLang = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['hasNext'])) {
        $this->hasNext = $vals['hasNext'];
      }
      if (isset($vals['bannerSequence'])) {
        $this->bannerSequence = $vals['bannerSequence'];
      }
      if (isset($vals['bannerTargetType'])) {
        $this->bannerTargetType = $vals['bannerTargetType'];
      }
      if (isset($vals['bannerTargetPath'])) {
        $this->bannerTargetPath = $vals['bannerTargetPath'];
      }
      if (isset($vals['productList'])) {
        $this->productList = $vals['productList'];
      }
      if (isset($vals['bannerLang'])) {
        $this->bannerLang = $vals['bannerLang'];
      }
    }
  }

  public function getName() {
    return 'ProductList';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->hasNext);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->bannerSequence);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->bannerTargetType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->bannerTargetPath);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::LST) {
            $this->productList = array();
            $_size508 = 0;
            $_etype511 = 0;
            $xfer += $input->readListBegin($_etype511, $_size508);
            for ($_i512 = 0; $_i512 < $_size508; ++$_i512)
            {
              $elem513 = null;
              $elem513 = new \Product();
              $xfer += $elem513->read($input);
              $this->productList []= $elem513;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->bannerLang);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ProductList');
    if ($this->hasNext !== null) {
      $xfer += $output->writeFieldBegin('hasNext', TType::BOOL, 1);
      $xfer += $output->writeBool($this->hasNext);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bannerSequence !== null) {
      $xfer += $output->writeFieldBegin('bannerSequence', TType::I64, 4);
      $xfer += $output->writeI64($this->bannerSequence);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bannerTargetType !== null) {
      $xfer += $output->writeFieldBegin('bannerTargetType', TType::I32, 5);
      $xfer += $output->writeI32($this->bannerTargetType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bannerTargetPath !== null) {
      $xfer += $output->writeFieldBegin('bannerTargetPath', TType::STRING, 6);
      $xfer += $output->writeString($this->bannerTargetPath);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->productList !== null) {
      if (!is_array($this->productList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('productList', TType::LST, 7);
      {
        $output->writeListBegin(TType::STRUCT, count($this->productList));
        {
          foreach ($this->productList as $iter514)
          {
            $xfer += $iter514->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bannerLang !== null) {
      $xfer += $output->writeFieldBegin('bannerLang', TType::STRING, 8);
      $xfer += $output->writeString($this->bannerLang);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class StickerIdRange {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'start',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    2 => array(
      'var' => 'size',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $start = null;
  /**
   * @var int
   */
  public $size = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['size'])) {
        $this->size = $vals['size'];
      }
    }
  }

  public function getName() {
    return 'StickerIdRange';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->size);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('StickerIdRange');
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::I64, 1);
      $xfer += $output->writeI64($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->size !== null) {
      $xfer += $output->writeFieldBegin('size', TType::I32, 2);
      $xfer += $output->writeI32($this->size);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ProductSimple {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'productId',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'packageId',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    3 => array(
      'var' => 'version',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    4 => array(
      'var' => 'onSale',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    5 => array(
      'var' => 'validUntil',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    10 => array(
      'var' => 'stickerIdRanges',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\StickerIdRange',
        ),
      ),
    41 => array(
      'var' => 'grantedByDefault',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    42 => array(
      'var' => 'displayOrder',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var string
   */
  public $productId = null;
  /**
   * @var int
   */
  public $packageId = null;
  /**
   * @var int
   */
  public $version = null;
  /**
   * @var bool
   */
  public $onSale = null;
  /**
   * @var int
   */
  public $validUntil = null;
  /**
   * @var \StickerIdRange[]
   */
  public $stickerIdRanges = null;
  /**
   * @var bool
   */
  public $grantedByDefault = null;
  /**
   * @var int
   */
  public $displayOrder = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['productId'])) {
        $this->productId = $vals['productId'];
      }
      if (isset($vals['packageId'])) {
        $this->packageId = $vals['packageId'];
      }
      if (isset($vals['version'])) {
        $this->version = $vals['version'];
      }
      if (isset($vals['onSale'])) {
        $this->onSale = $vals['onSale'];
      }
      if (isset($vals['validUntil'])) {
        $this->validUntil = $vals['validUntil'];
      }
      if (isset($vals['stickerIdRanges'])) {
        $this->stickerIdRanges = $vals['stickerIdRanges'];
      }
      if (isset($vals['grantedByDefault'])) {
        $this->grantedByDefault = $vals['grantedByDefault'];
      }
      if (isset($vals['displayOrder'])) {
        $this->displayOrder = $vals['displayOrder'];
      }
    }
  }

  public function getName() {
    return 'ProductSimple';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->productId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->packageId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->version);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->onSale);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->validUntil);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::LST) {
            $this->stickerIdRanges = array();
            $_size515 = 0;
            $_etype518 = 0;
            $xfer += $input->readListBegin($_etype518, $_size515);
            for ($_i519 = 0; $_i519 < $_size515; ++$_i519)
            {
              $elem520 = null;
              $elem520 = new \StickerIdRange();
              $xfer += $elem520->read($input);
              $this->stickerIdRanges []= $elem520;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 41:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->grantedByDefault);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 42:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->displayOrder);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ProductSimple');
    if ($this->productId !== null) {
      $xfer += $output->writeFieldBegin('productId', TType::STRING, 1);
      $xfer += $output->writeString($this->productId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->packageId !== null) {
      $xfer += $output->writeFieldBegin('packageId', TType::I64, 2);
      $xfer += $output->writeI64($this->packageId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->version !== null) {
      $xfer += $output->writeFieldBegin('version', TType::I32, 3);
      $xfer += $output->writeI32($this->version);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->onSale !== null) {
      $xfer += $output->writeFieldBegin('onSale', TType::BOOL, 4);
      $xfer += $output->writeBool($this->onSale);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->validUntil !== null) {
      $xfer += $output->writeFieldBegin('validUntil', TType::I64, 5);
      $xfer += $output->writeI64($this->validUntil);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->stickerIdRanges !== null) {
      if (!is_array($this->stickerIdRanges)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('stickerIdRanges', TType::LST, 10);
      {
        $output->writeListBegin(TType::STRUCT, count($this->stickerIdRanges));
        {
          foreach ($this->stickerIdRanges as $iter521)
          {
            $xfer += $iter521->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->grantedByDefault !== null) {
      $xfer += $output->writeFieldBegin('grantedByDefault', TType::BOOL, 41);
      $xfer += $output->writeBool($this->grantedByDefault);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->displayOrder !== null) {
      $xfer += $output->writeFieldBegin('displayOrder', TType::I32, 42);
      $xfer += $output->writeI32($this->displayOrder);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ProductSimpleList {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'hasNext',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    2 => array(
      'var' => 'reinvokeHour',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    3 => array(
      'var' => 'lastVersionSeq',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    4 => array(
      'var' => 'productList',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\ProductSimple',
        ),
      ),
    5 => array(
      'var' => 'recentNewReleaseDate',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    6 => array(
      'var' => 'recentEventReleaseDate',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    );

  /**
   * @var bool
   */
  public $hasNext = null;
  /**
   * @var int
   */
  public $reinvokeHour = null;
  /**
   * @var int
   */
  public $lastVersionSeq = null;
  /**
   * @var \ProductSimple[]
   */
  public $productList = null;
  /**
   * @var int
   */
  public $recentNewReleaseDate = null;
  /**
   * @var int
   */
  public $recentEventReleaseDate = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['hasNext'])) {
        $this->hasNext = $vals['hasNext'];
      }
      if (isset($vals['reinvokeHour'])) {
        $this->reinvokeHour = $vals['reinvokeHour'];
      }
      if (isset($vals['lastVersionSeq'])) {
        $this->lastVersionSeq = $vals['lastVersionSeq'];
      }
      if (isset($vals['productList'])) {
        $this->productList = $vals['productList'];
      }
      if (isset($vals['recentNewReleaseDate'])) {
        $this->recentNewReleaseDate = $vals['recentNewReleaseDate'];
      }
      if (isset($vals['recentEventReleaseDate'])) {
        $this->recentEventReleaseDate = $vals['recentEventReleaseDate'];
      }
    }
  }

  public function getName() {
    return 'ProductSimpleList';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->hasNext);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->reinvokeHour);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->lastVersionSeq);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->productList = array();
            $_size522 = 0;
            $_etype525 = 0;
            $xfer += $input->readListBegin($_etype525, $_size522);
            for ($_i526 = 0; $_i526 < $_size522; ++$_i526)
            {
              $elem527 = null;
              $elem527 = new \ProductSimple();
              $xfer += $elem527->read($input);
              $this->productList []= $elem527;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->recentNewReleaseDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->recentEventReleaseDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ProductSimpleList');
    if ($this->hasNext !== null) {
      $xfer += $output->writeFieldBegin('hasNext', TType::BOOL, 1);
      $xfer += $output->writeBool($this->hasNext);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reinvokeHour !== null) {
      $xfer += $output->writeFieldBegin('reinvokeHour', TType::I32, 2);
      $xfer += $output->writeI32($this->reinvokeHour);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lastVersionSeq !== null) {
      $xfer += $output->writeFieldBegin('lastVersionSeq', TType::I64, 3);
      $xfer += $output->writeI64($this->lastVersionSeq);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->productList !== null) {
      if (!is_array($this->productList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('productList', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRUCT, count($this->productList));
        {
          foreach ($this->productList as $iter528)
          {
            $xfer += $iter528->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->recentNewReleaseDate !== null) {
      $xfer += $output->writeFieldBegin('recentNewReleaseDate', TType::I64, 5);
      $xfer += $output->writeI64($this->recentNewReleaseDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->recentEventReleaseDate !== null) {
      $xfer += $output->writeFieldBegin('recentEventReleaseDate', TType::I64, 6);
      $xfer += $output->writeI64($this->recentEventReleaseDate);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Profile {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'mid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'userid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    10 => array(
      'var' => 'phone',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    11 => array(
      'var' => 'email',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    12 => array(
      'var' => 'regionCode',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    20 => array(
      'var' => 'displayName',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    21 => array(
      'var' => 'phoneticName',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    22 => array(
      'var' => 'pictureStatus',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    23 => array(
      'var' => 'thumbnailUrl',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    24 => array(
      'var' => 'statusMessage',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    31 => array(
      'var' => 'allowSearchByUserid',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    32 => array(
      'var' => 'allowSearchByEmail',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    33 => array(
      'var' => 'picturePath',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    34 => array(
      'var' => 'musicProfile',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    35 => array(
      'var' => 'videoProfile',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $mid = null;
  /**
   * @var string
   */
  public $userid = null;
  /**
   * @var string
   */
  public $phone = null;
  /**
   * @var string
   */
  public $email = null;
  /**
   * @var string
   */
  public $regionCode = null;
  /**
   * @var string
   */
  public $displayName = null;
  /**
   * @var string
   */
  public $phoneticName = null;
  /**
   * @var string
   */
  public $pictureStatus = null;
  /**
   * @var string
   */
  public $thumbnailUrl = null;
  /**
   * @var string
   */
  public $statusMessage = null;
  /**
   * @var bool
   */
  public $allowSearchByUserid = null;
  /**
   * @var bool
   */
  public $allowSearchByEmail = null;
  /**
   * @var string
   */
  public $picturePath = null;
  /**
   * @var string
   */
  public $musicProfile = null;
  /**
   * @var string
   */
  public $videoProfile = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['mid'])) {
        $this->mid = $vals['mid'];
      }
      if (isset($vals['userid'])) {
        $this->userid = $vals['userid'];
      }
      if (isset($vals['phone'])) {
        $this->phone = $vals['phone'];
      }
      if (isset($vals['email'])) {
        $this->email = $vals['email'];
      }
      if (isset($vals['regionCode'])) {
        $this->regionCode = $vals['regionCode'];
      }
      if (isset($vals['displayName'])) {
        $this->displayName = $vals['displayName'];
      }
      if (isset($vals['phoneticName'])) {
        $this->phoneticName = $vals['phoneticName'];
      }
      if (isset($vals['pictureStatus'])) {
        $this->pictureStatus = $vals['pictureStatus'];
      }
      if (isset($vals['thumbnailUrl'])) {
        $this->thumbnailUrl = $vals['thumbnailUrl'];
      }
      if (isset($vals['statusMessage'])) {
        $this->statusMessage = $vals['statusMessage'];
      }
      if (isset($vals['allowSearchByUserid'])) {
        $this->allowSearchByUserid = $vals['allowSearchByUserid'];
      }
      if (isset($vals['allowSearchByEmail'])) {
        $this->allowSearchByEmail = $vals['allowSearchByEmail'];
      }
      if (isset($vals['picturePath'])) {
        $this->picturePath = $vals['picturePath'];
      }
      if (isset($vals['musicProfile'])) {
        $this->musicProfile = $vals['musicProfile'];
      }
      if (isset($vals['videoProfile'])) {
        $this->videoProfile = $vals['videoProfile'];
      }
    }
  }

  public function getName() {
    return 'Profile';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->userid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->phone);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->email);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->regionCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->displayName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->phoneticName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pictureStatus);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->thumbnailUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 24:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->statusMessage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 31:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->allowSearchByUserid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 32:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->allowSearchByEmail);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 33:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->picturePath);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 34:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->musicProfile);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 35:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->videoProfile);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Profile');
    if ($this->mid !== null) {
      $xfer += $output->writeFieldBegin('mid', TType::STRING, 1);
      $xfer += $output->writeString($this->mid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userid !== null) {
      $xfer += $output->writeFieldBegin('userid', TType::STRING, 3);
      $xfer += $output->writeString($this->userid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->phone !== null) {
      $xfer += $output->writeFieldBegin('phone', TType::STRING, 10);
      $xfer += $output->writeString($this->phone);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->email !== null) {
      $xfer += $output->writeFieldBegin('email', TType::STRING, 11);
      $xfer += $output->writeString($this->email);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->regionCode !== null) {
      $xfer += $output->writeFieldBegin('regionCode', TType::STRING, 12);
      $xfer += $output->writeString($this->regionCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->displayName !== null) {
      $xfer += $output->writeFieldBegin('displayName', TType::STRING, 20);
      $xfer += $output->writeString($this->displayName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->phoneticName !== null) {
      $xfer += $output->writeFieldBegin('phoneticName', TType::STRING, 21);
      $xfer += $output->writeString($this->phoneticName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pictureStatus !== null) {
      $xfer += $output->writeFieldBegin('pictureStatus', TType::STRING, 22);
      $xfer += $output->writeString($this->pictureStatus);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->thumbnailUrl !== null) {
      $xfer += $output->writeFieldBegin('thumbnailUrl', TType::STRING, 23);
      $xfer += $output->writeString($this->thumbnailUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->statusMessage !== null) {
      $xfer += $output->writeFieldBegin('statusMessage', TType::STRING, 24);
      $xfer += $output->writeString($this->statusMessage);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->allowSearchByUserid !== null) {
      $xfer += $output->writeFieldBegin('allowSearchByUserid', TType::BOOL, 31);
      $xfer += $output->writeBool($this->allowSearchByUserid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->allowSearchByEmail !== null) {
      $xfer += $output->writeFieldBegin('allowSearchByEmail', TType::BOOL, 32);
      $xfer += $output->writeBool($this->allowSearchByEmail);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->picturePath !== null) {
      $xfer += $output->writeFieldBegin('picturePath', TType::STRING, 33);
      $xfer += $output->writeString($this->picturePath);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->musicProfile !== null) {
      $xfer += $output->writeFieldBegin('musicProfile', TType::STRING, 34);
      $xfer += $output->writeString($this->musicProfile);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->videoProfile !== null) {
      $xfer += $output->writeFieldBegin('videoProfile', TType::STRING, 35);
      $xfer += $output->writeString($this->videoProfile);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ProximityMatchCandidateResult {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'users',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\Contact',
        ),
      ),
    2 => array(
      'var' => 'buddies',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\Contact',
        ),
      ),
    );

  /**
   * @var \Contact[]
   */
  public $users = null;
  /**
   * @var \Contact[]
   */
  public $buddies = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['users'])) {
        $this->users = $vals['users'];
      }
      if (isset($vals['buddies'])) {
        $this->buddies = $vals['buddies'];
      }
    }
  }

  public function getName() {
    return 'ProximityMatchCandidateResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->users = array();
            $_size529 = 0;
            $_etype532 = 0;
            $xfer += $input->readListBegin($_etype532, $_size529);
            for ($_i533 = 0; $_i533 < $_size529; ++$_i533)
            {
              $elem534 = null;
              $elem534 = new \Contact();
              $xfer += $elem534->read($input);
              $this->users []= $elem534;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->buddies = array();
            $_size535 = 0;
            $_etype538 = 0;
            $xfer += $input->readListBegin($_etype538, $_size535);
            for ($_i539 = 0; $_i539 < $_size535; ++$_i539)
            {
              $elem540 = null;
              $elem540 = new \Contact();
              $xfer += $elem540->read($input);
              $this->buddies []= $elem540;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ProximityMatchCandidateResult');
    if ($this->users !== null) {
      if (!is_array($this->users)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('users', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->users));
        {
          foreach ($this->users as $iter541)
          {
            $xfer += $iter541->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->buddies !== null) {
      if (!is_array($this->buddies)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('buddies', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->buddies));
        {
          foreach ($this->buddies as $iter542)
          {
            $xfer += $iter542->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class RegisterWithSnsIdResult {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'authToken',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'userCreated',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var string
   */
  public $authToken = null;
  /**
   * @var bool
   */
  public $userCreated = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['authToken'])) {
        $this->authToken = $vals['authToken'];
      }
      if (isset($vals['userCreated'])) {
        $this->userCreated = $vals['userCreated'];
      }
    }
  }

  public function getName() {
    return 'RegisterWithSnsIdResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->authToken);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->userCreated);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RegisterWithSnsIdResult');
    if ($this->authToken !== null) {
      $xfer += $output->writeFieldBegin('authToken', TType::STRING, 1);
      $xfer += $output->writeString($this->authToken);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userCreated !== null) {
      $xfer += $output->writeFieldBegin('userCreated', TType::BOOL, 2);
      $xfer += $output->writeBool($this->userCreated);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class RequestTokenResponse {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'requestToken',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'returnUrl',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $requestToken = null;
  /**
   * @var string
   */
  public $returnUrl = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['requestToken'])) {
        $this->requestToken = $vals['requestToken'];
      }
      if (isset($vals['returnUrl'])) {
        $this->returnUrl = $vals['returnUrl'];
      }
    }
  }

  public function getName() {
    return 'RequestTokenResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->requestToken);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->returnUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RequestTokenResponse');
    if ($this->requestToken !== null) {
      $xfer += $output->writeFieldBegin('requestToken', TType::STRING, 1);
      $xfer += $output->writeString($this->requestToken);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->returnUrl !== null) {
      $xfer += $output->writeFieldBegin('returnUrl', TType::STRING, 2);
      $xfer += $output->writeString($this->returnUrl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Room {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'mid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'createdTime',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    10 => array(
      'var' => 'contacts',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\Contact',
        ),
      ),
    31 => array(
      'var' => 'notificationDisabled',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    40 => array(
      'var' => 'memberMids',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRING,
      'elem' => array(
        'type' => TType::STRING,
        ),
      ),
    );

  /**
   * @var string
   */
  public $mid = null;
  /**
   * @var int
   */
  public $createdTime = null;
  /**
   * @var \Contact[]
   */
  public $contacts = null;
  /**
   * @var bool
   */
  public $notificationDisabled = null;
  /**
   * @var string[]
   */
  public $memberMids = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['mid'])) {
        $this->mid = $vals['mid'];
      }
      if (isset($vals['createdTime'])) {
        $this->createdTime = $vals['createdTime'];
      }
      if (isset($vals['contacts'])) {
        $this->contacts = $vals['contacts'];
      }
      if (isset($vals['notificationDisabled'])) {
        $this->notificationDisabled = $vals['notificationDisabled'];
      }
      if (isset($vals['memberMids'])) {
        $this->memberMids = $vals['memberMids'];
      }
    }
  }

  public function getName() {
    return 'Room';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->createdTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::LST) {
            $this->contacts = array();
            $_size543 = 0;
            $_etype546 = 0;
            $xfer += $input->readListBegin($_etype546, $_size543);
            for ($_i547 = 0; $_i547 < $_size543; ++$_i547)
            {
              $elem548 = null;
              $elem548 = new \Contact();
              $xfer += $elem548->read($input);
              $this->contacts []= $elem548;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 31:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->notificationDisabled);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 40:
          if ($ftype == TType::LST) {
            $this->memberMids = array();
            $_size549 = 0;
            $_etype552 = 0;
            $xfer += $input->readListBegin($_etype552, $_size549);
            for ($_i553 = 0; $_i553 < $_size549; ++$_i553)
            {
              $elem554 = null;
              $xfer += $input->readString($elem554);
              $this->memberMids []= $elem554;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Room');
    if ($this->mid !== null) {
      $xfer += $output->writeFieldBegin('mid', TType::STRING, 1);
      $xfer += $output->writeString($this->mid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createdTime !== null) {
      $xfer += $output->writeFieldBegin('createdTime', TType::I64, 2);
      $xfer += $output->writeI64($this->createdTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contacts !== null) {
      if (!is_array($this->contacts)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('contacts', TType::LST, 10);
      {
        $output->writeListBegin(TType::STRUCT, count($this->contacts));
        {
          foreach ($this->contacts as $iter555)
          {
            $xfer += $iter555->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notificationDisabled !== null) {
      $xfer += $output->writeFieldBegin('notificationDisabled', TType::BOOL, 31);
      $xfer += $output->writeBool($this->notificationDisabled);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->memberMids !== null) {
      if (!is_array($this->memberMids)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('memberMids', TType::LST, 40);
      {
        $output->writeListBegin(TType::STRING, count($this->memberMids));
        {
          foreach ($this->memberMids as $iter556)
          {
            $xfer += $output->writeString($iter556);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SuggestDictionary {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'language',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'name',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $language = null;
  /**
   * @var string
   */
  public $name = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['language'])) {
        $this->language = $vals['language'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
    }
  }

  public function getName() {
    return 'SuggestDictionary';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->language);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SuggestDictionary');
    if ($this->language !== null) {
      $xfer += $output->writeFieldBegin('language', TType::STRING, 1);
      $xfer += $output->writeString($this->language);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SuggestItemDictionaryIncrement {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'status',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'revision',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    3 => array(
      'var' => 'scheme',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'data',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var int
   */
  public $status = null;
  /**
   * @var int
   */
  public $revision = null;
  /**
   * @var string
   */
  public $scheme = null;
  /**
   * @var string
   */
  public $data = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['revision'])) {
        $this->revision = $vals['revision'];
      }
      if (isset($vals['scheme'])) {
        $this->scheme = $vals['scheme'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'SuggestItemDictionaryIncrement';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->revision);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->scheme);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->data);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SuggestItemDictionaryIncrement');
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 1);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->revision !== null) {
      $xfer += $output->writeFieldBegin('revision', TType::I64, 2);
      $xfer += $output->writeI64($this->revision);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->scheme !== null) {
      $xfer += $output->writeFieldBegin('scheme', TType::STRING, 3);
      $xfer += $output->writeString($this->scheme);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      $xfer += $output->writeFieldBegin('data', TType::STRING, 4);
      $xfer += $output->writeString($this->data);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SuggestTagDictionaryIncrement {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'status',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'language',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'revision',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    4 => array(
      'var' => 'scheme',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'data',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var int
   */
  public $status = null;
  /**
   * @var string
   */
  public $language = null;
  /**
   * @var int
   */
  public $revision = null;
  /**
   * @var string
   */
  public $scheme = null;
  /**
   * @var string
   */
  public $data = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['language'])) {
        $this->language = $vals['language'];
      }
      if (isset($vals['revision'])) {
        $this->revision = $vals['revision'];
      }
      if (isset($vals['scheme'])) {
        $this->scheme = $vals['scheme'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'SuggestTagDictionaryIncrement';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->language);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->revision);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->scheme);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->data);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SuggestTagDictionaryIncrement');
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 1);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->language !== null) {
      $xfer += $output->writeFieldBegin('language', TType::STRING, 2);
      $xfer += $output->writeString($this->language);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->revision !== null) {
      $xfer += $output->writeFieldBegin('revision', TType::I64, 3);
      $xfer += $output->writeI64($this->revision);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->scheme !== null) {
      $xfer += $output->writeFieldBegin('scheme', TType::STRING, 4);
      $xfer += $output->writeString($this->scheme);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      $xfer += $output->writeFieldBegin('data', TType::STRING, 5);
      $xfer += $output->writeString($this->data);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SuggestDictionaryIncrements {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'itemIncrement',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SuggestItemDictionaryIncrement',
      ),
    2 => array(
      'var' => 'tagIncrements',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\SuggestTagDictionaryIncrement',
        ),
      ),
    );

  /**
   * @var \SuggestItemDictionaryIncrement
   */
  public $itemIncrement = null;
  /**
   * @var \SuggestTagDictionaryIncrement[]
   */
  public $tagIncrements = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['itemIncrement'])) {
        $this->itemIncrement = $vals['itemIncrement'];
      }
      if (isset($vals['tagIncrements'])) {
        $this->tagIncrements = $vals['tagIncrements'];
      }
    }
  }

  public function getName() {
    return 'SuggestDictionaryIncrements';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->itemIncrement = new \SuggestItemDictionaryIncrement();
            $xfer += $this->itemIncrement->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->tagIncrements = array();
            $_size557 = 0;
            $_etype560 = 0;
            $xfer += $input->readListBegin($_etype560, $_size557);
            for ($_i561 = 0; $_i561 < $_size557; ++$_i561)
            {
              $elem562 = null;
              $elem562 = new \SuggestTagDictionaryIncrement();
              $xfer += $elem562->read($input);
              $this->tagIncrements []= $elem562;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SuggestDictionaryIncrements');
    if ($this->itemIncrement !== null) {
      if (!is_object($this->itemIncrement)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('itemIncrement', TType::STRUCT, 1);
      $xfer += $this->itemIncrement->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tagIncrements !== null) {
      if (!is_array($this->tagIncrements)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('tagIncrements', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->tagIncrements));
        {
          foreach ($this->tagIncrements as $iter563)
          {
            $xfer += $iter563->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SuggestItemDictionaryRevision {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'revision',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    2 => array(
      'var' => 'scheme',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var int
   */
  public $revision = null;
  /**
   * @var string
   */
  public $scheme = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['revision'])) {
        $this->revision = $vals['revision'];
      }
      if (isset($vals['scheme'])) {
        $this->scheme = $vals['scheme'];
      }
    }
  }

  public function getName() {
    return 'SuggestItemDictionaryRevision';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->revision);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->scheme);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SuggestItemDictionaryRevision');
    if ($this->revision !== null) {
      $xfer += $output->writeFieldBegin('revision', TType::I64, 1);
      $xfer += $output->writeI64($this->revision);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->scheme !== null) {
      $xfer += $output->writeFieldBegin('scheme', TType::STRING, 2);
      $xfer += $output->writeString($this->scheme);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SuggestTagDictionaryRevision {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'language',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'revision',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    3 => array(
      'var' => 'scheme',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $language = null;
  /**
   * @var int
   */
  public $revision = null;
  /**
   * @var string
   */
  public $scheme = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['language'])) {
        $this->language = $vals['language'];
      }
      if (isset($vals['revision'])) {
        $this->revision = $vals['revision'];
      }
      if (isset($vals['scheme'])) {
        $this->scheme = $vals['scheme'];
      }
    }
  }

  public function getName() {
    return 'SuggestTagDictionaryRevision';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->language);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->revision);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->scheme);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SuggestTagDictionaryRevision');
    if ($this->language !== null) {
      $xfer += $output->writeFieldBegin('language', TType::STRING, 1);
      $xfer += $output->writeString($this->language);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->revision !== null) {
      $xfer += $output->writeFieldBegin('revision', TType::I64, 2);
      $xfer += $output->writeI64($this->revision);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->scheme !== null) {
      $xfer += $output->writeFieldBegin('scheme', TType::STRING, 3);
      $xfer += $output->writeString($this->scheme);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SuggestDictionaryRevisions {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'itemRevision',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SuggestItemDictionaryRevision',
      ),
    2 => array(
      'var' => 'tagRevisions',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\SuggestTagDictionaryRevision',
        ),
      ),
    );

  /**
   * @var \SuggestItemDictionaryRevision
   */
  public $itemRevision = null;
  /**
   * @var \SuggestTagDictionaryRevision[]
   */
  public $tagRevisions = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['itemRevision'])) {
        $this->itemRevision = $vals['itemRevision'];
      }
      if (isset($vals['tagRevisions'])) {
        $this->tagRevisions = $vals['tagRevisions'];
      }
    }
  }

  public function getName() {
    return 'SuggestDictionaryRevisions';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->itemRevision = new \SuggestItemDictionaryRevision();
            $xfer += $this->itemRevision->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->tagRevisions = array();
            $_size564 = 0;
            $_etype567 = 0;
            $xfer += $input->readListBegin($_etype567, $_size564);
            for ($_i568 = 0; $_i568 < $_size564; ++$_i568)
            {
              $elem569 = null;
              $elem569 = new \SuggestTagDictionaryRevision();
              $xfer += $elem569->read($input);
              $this->tagRevisions []= $elem569;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SuggestDictionaryRevisions');
    if ($this->itemRevision !== null) {
      if (!is_object($this->itemRevision)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('itemRevision', TType::STRUCT, 1);
      $xfer += $this->itemRevision->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tagRevisions !== null) {
      if (!is_array($this->tagRevisions)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('tagRevisions', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->tagRevisions));
        {
          foreach ($this->tagRevisions as $iter570)
          {
            $xfer += $iter570->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SuggestDictionarySettings {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'revision',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    2 => array(
      'var' => 'newRevision',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    3 => array(
      'var' => 'dictionaries',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\SuggestDictionary',
        ),
      ),
    4 => array(
      'var' => 'preloadedDictionaries',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRING,
      'elem' => array(
        'type' => TType::STRING,
        ),
      ),
    );

  /**
   * @var int
   */
  public $revision = null;
  /**
   * @var int
   */
  public $newRevision = null;
  /**
   * @var \SuggestDictionary[]
   */
  public $dictionaries = null;
  /**
   * @var string[]
   */
  public $preloadedDictionaries = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['revision'])) {
        $this->revision = $vals['revision'];
      }
      if (isset($vals['newRevision'])) {
        $this->newRevision = $vals['newRevision'];
      }
      if (isset($vals['dictionaries'])) {
        $this->dictionaries = $vals['dictionaries'];
      }
      if (isset($vals['preloadedDictionaries'])) {
        $this->preloadedDictionaries = $vals['preloadedDictionaries'];
      }
    }
  }

  public function getName() {
    return 'SuggestDictionarySettings';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->revision);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->newRevision);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->dictionaries = array();
            $_size571 = 0;
            $_etype574 = 0;
            $xfer += $input->readListBegin($_etype574, $_size571);
            for ($_i575 = 0; $_i575 < $_size571; ++$_i575)
            {
              $elem576 = null;
              $elem576 = new \SuggestDictionary();
              $xfer += $elem576->read($input);
              $this->dictionaries []= $elem576;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->preloadedDictionaries = array();
            $_size577 = 0;
            $_etype580 = 0;
            $xfer += $input->readListBegin($_etype580, $_size577);
            for ($_i581 = 0; $_i581 < $_size577; ++$_i581)
            {
              $elem582 = null;
              $xfer += $input->readString($elem582);
              $this->preloadedDictionaries []= $elem582;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SuggestDictionarySettings');
    if ($this->revision !== null) {
      $xfer += $output->writeFieldBegin('revision', TType::I64, 1);
      $xfer += $output->writeI64($this->revision);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->newRevision !== null) {
      $xfer += $output->writeFieldBegin('newRevision', TType::I64, 2);
      $xfer += $output->writeI64($this->newRevision);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dictionaries !== null) {
      if (!is_array($this->dictionaries)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('dictionaries', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->dictionaries));
        {
          foreach ($this->dictionaries as $iter583)
          {
            $xfer += $iter583->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->preloadedDictionaries !== null) {
      if (!is_array($this->preloadedDictionaries)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('preloadedDictionaries', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRING, count($this->preloadedDictionaries));
        {
          foreach ($this->preloadedDictionaries as $iter584)
          {
            $xfer += $output->writeString($iter584);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PhoneInfoForChannel {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'mid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'normalizedPhoneNumber',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'allowedToSearchByPhoneNumber',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    4 => array(
      'var' => 'allowedToReceiveMessageFromNonFriend',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    5 => array(
      'var' => 'region',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $mid = null;
  /**
   * @var string
   */
  public $normalizedPhoneNumber = null;
  /**
   * @var bool
   */
  public $allowedToSearchByPhoneNumber = null;
  /**
   * @var bool
   */
  public $allowedToReceiveMessageFromNonFriend = null;
  /**
   * @var string
   */
  public $region = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['mid'])) {
        $this->mid = $vals['mid'];
      }
      if (isset($vals['normalizedPhoneNumber'])) {
        $this->normalizedPhoneNumber = $vals['normalizedPhoneNumber'];
      }
      if (isset($vals['allowedToSearchByPhoneNumber'])) {
        $this->allowedToSearchByPhoneNumber = $vals['allowedToSearchByPhoneNumber'];
      }
      if (isset($vals['allowedToReceiveMessageFromNonFriend'])) {
        $this->allowedToReceiveMessageFromNonFriend = $vals['allowedToReceiveMessageFromNonFriend'];
      }
      if (isset($vals['region'])) {
        $this->region = $vals['region'];
      }
    }
  }

  public function getName() {
    return 'PhoneInfoForChannel';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->normalizedPhoneNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->allowedToSearchByPhoneNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->allowedToReceiveMessageFromNonFriend);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->region);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PhoneInfoForChannel');
    if ($this->mid !== null) {
      $xfer += $output->writeFieldBegin('mid', TType::STRING, 1);
      $xfer += $output->writeString($this->mid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->normalizedPhoneNumber !== null) {
      $xfer += $output->writeFieldBegin('normalizedPhoneNumber', TType::STRING, 2);
      $xfer += $output->writeString($this->normalizedPhoneNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->allowedToSearchByPhoneNumber !== null) {
      $xfer += $output->writeFieldBegin('allowedToSearchByPhoneNumber', TType::BOOL, 3);
      $xfer += $output->writeBool($this->allowedToSearchByPhoneNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->allowedToReceiveMessageFromNonFriend !== null) {
      $xfer += $output->writeFieldBegin('allowedToReceiveMessageFromNonFriend', TType::BOOL, 4);
      $xfer += $output->writeBool($this->allowedToReceiveMessageFromNonFriend);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->region !== null) {
      $xfer += $output->writeFieldBegin('region', TType::STRING, 5);
      $xfer += $output->writeString($this->region);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PhoneVerificationResult {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'verificationResult',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'accountMigrationCheckType',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    3 => array(
      'var' => 'recommendAddFriends',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var int
   */
  public $verificationResult = null;
  /**
   * @var int
   */
  public $accountMigrationCheckType = null;
  /**
   * @var bool
   */
  public $recommendAddFriends = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['verificationResult'])) {
        $this->verificationResult = $vals['verificationResult'];
      }
      if (isset($vals['accountMigrationCheckType'])) {
        $this->accountMigrationCheckType = $vals['accountMigrationCheckType'];
      }
      if (isset($vals['recommendAddFriends'])) {
        $this->recommendAddFriends = $vals['recommendAddFriends'];
      }
    }
  }

  public function getName() {
    return 'PhoneVerificationResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->verificationResult);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->accountMigrationCheckType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->recommendAddFriends);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PhoneVerificationResult');
    if ($this->verificationResult !== null) {
      $xfer += $output->writeFieldBegin('verificationResult', TType::I32, 1);
      $xfer += $output->writeI32($this->verificationResult);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accountMigrationCheckType !== null) {
      $xfer += $output->writeFieldBegin('accountMigrationCheckType', TType::I32, 2);
      $xfer += $output->writeI32($this->accountMigrationCheckType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->recommendAddFriends !== null) {
      $xfer += $output->writeFieldBegin('recommendAddFriends', TType::BOOL, 3);
      $xfer += $output->writeBool($this->recommendAddFriends);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PlaceSearchInfo {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'name',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'address',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'latitude',
      'isRequired' => false,
      'type' => TType::DOUBLE,
      ),
    4 => array(
      'var' => 'longitude',
      'isRequired' => false,
      'type' => TType::DOUBLE,
      ),
    );

  /**
   * @var string
   */
  public $name = null;
  /**
   * @var string
   */
  public $address = null;
  /**
   * @var double
   */
  public $latitude = null;
  /**
   * @var double
   */
  public $longitude = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['address'])) {
        $this->address = $vals['address'];
      }
      if (isset($vals['latitude'])) {
        $this->latitude = $vals['latitude'];
      }
      if (isset($vals['longitude'])) {
        $this->longitude = $vals['longitude'];
      }
    }
  }

  public function getName() {
    return 'PlaceSearchInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->address);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->latitude);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->longitude);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PlaceSearchInfo');
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 1);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->address !== null) {
      $xfer += $output->writeFieldBegin('address', TType::STRING, 2);
      $xfer += $output->writeString($this->address);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->latitude !== null) {
      $xfer += $output->writeFieldBegin('latitude', TType::DOUBLE, 3);
      $xfer += $output->writeDouble($this->latitude);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->longitude !== null) {
      $xfer += $output->writeFieldBegin('longitude', TType::DOUBLE, 4);
      $xfer += $output->writeDouble($this->longitude);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class RSAKey {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'keynm',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'nvalue',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'evalue',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'sessionKey',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $keynm = null;
  /**
   * @var string
   */
  public $nvalue = null;
  /**
   * @var string
   */
  public $evalue = null;
  /**
   * @var string
   */
  public $sessionKey = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['keynm'])) {
        $this->keynm = $vals['keynm'];
      }
      if (isset($vals['nvalue'])) {
        $this->nvalue = $vals['nvalue'];
      }
      if (isset($vals['evalue'])) {
        $this->evalue = $vals['evalue'];
      }
      if (isset($vals['sessionKey'])) {
        $this->sessionKey = $vals['sessionKey'];
      }
    }
  }

  public function getName() {
    return 'RSAKey';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->keynm);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nvalue);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->evalue);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sessionKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RSAKey');
    if ($this->keynm !== null) {
      $xfer += $output->writeFieldBegin('keynm', TType::STRING, 1);
      $xfer += $output->writeString($this->keynm);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nvalue !== null) {
      $xfer += $output->writeFieldBegin('nvalue', TType::STRING, 2);
      $xfer += $output->writeString($this->nvalue);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->evalue !== null) {
      $xfer += $output->writeFieldBegin('evalue', TType::STRING, 3);
      $xfer += $output->writeString($this->evalue);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionKey !== null) {
      $xfer += $output->writeFieldBegin('sessionKey', TType::STRING, 4);
      $xfer += $output->writeString($this->sessionKey);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SecurityCenterResult {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'uri',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'token',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'cookiePath',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'skip',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var string
   */
  public $uri = null;
  /**
   * @var string
   */
  public $token = null;
  /**
   * @var string
   */
  public $cookiePath = null;
  /**
   * @var bool
   */
  public $skip = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['uri'])) {
        $this->uri = $vals['uri'];
      }
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['cookiePath'])) {
        $this->cookiePath = $vals['cookiePath'];
      }
      if (isset($vals['skip'])) {
        $this->skip = $vals['skip'];
      }
    }
  }

  public function getName() {
    return 'SecurityCenterResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uri);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cookiePath);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->skip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SecurityCenterResult');
    if ($this->uri !== null) {
      $xfer += $output->writeFieldBegin('uri', TType::STRING, 1);
      $xfer += $output->writeString($this->uri);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 2);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cookiePath !== null) {
      $xfer += $output->writeFieldBegin('cookiePath', TType::STRING, 3);
      $xfer += $output->writeString($this->cookiePath);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->skip !== null) {
      $xfer += $output->writeFieldBegin('skip', TType::BOOL, 4);
      $xfer += $output->writeBool($this->skip);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SendBuddyMessageResult {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'requestId',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'state',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    3 => array(
      'var' => 'messageId',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'eventNo',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    11 => array(
      'var' => 'receiverCount',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    12 => array(
      'var' => 'successCount',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    13 => array(
      'var' => 'failCount',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    14 => array(
      'var' => 'cancelCount',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    15 => array(
      'var' => 'blockCount',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    16 => array(
      'var' => 'unregisterCount',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    21 => array(
      'var' => 'timestamp',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    22 => array(
      'var' => 'message',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $requestId = null;
  /**
   * @var int
   */
  public $state = null;
  /**
   * @var string
   */
  public $messageId = null;
  /**
   * @var int
   */
  public $eventNo = null;
  /**
   * @var int
   */
  public $receiverCount = null;
  /**
   * @var int
   */
  public $successCount = null;
  /**
   * @var int
   */
  public $failCount = null;
  /**
   * @var int
   */
  public $cancelCount = null;
  /**
   * @var int
   */
  public $blockCount = null;
  /**
   * @var int
   */
  public $unregisterCount = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var string
   */
  public $message = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['requestId'])) {
        $this->requestId = $vals['requestId'];
      }
      if (isset($vals['state'])) {
        $this->state = $vals['state'];
      }
      if (isset($vals['messageId'])) {
        $this->messageId = $vals['messageId'];
      }
      if (isset($vals['eventNo'])) {
        $this->eventNo = $vals['eventNo'];
      }
      if (isset($vals['receiverCount'])) {
        $this->receiverCount = $vals['receiverCount'];
      }
      if (isset($vals['successCount'])) {
        $this->successCount = $vals['successCount'];
      }
      if (isset($vals['failCount'])) {
        $this->failCount = $vals['failCount'];
      }
      if (isset($vals['cancelCount'])) {
        $this->cancelCount = $vals['cancelCount'];
      }
      if (isset($vals['blockCount'])) {
        $this->blockCount = $vals['blockCount'];
      }
      if (isset($vals['unregisterCount'])) {
        $this->unregisterCount = $vals['unregisterCount'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    }
  }

  public function getName() {
    return 'SendBuddyMessageResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->requestId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->state);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->messageId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->eventNo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->receiverCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->successCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->failCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->cancelCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->blockCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->unregisterCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SendBuddyMessageResult');
    if ($this->requestId !== null) {
      $xfer += $output->writeFieldBegin('requestId', TType::STRING, 1);
      $xfer += $output->writeString($this->requestId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->state !== null) {
      $xfer += $output->writeFieldBegin('state', TType::I32, 2);
      $xfer += $output->writeI32($this->state);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->messageId !== null) {
      $xfer += $output->writeFieldBegin('messageId', TType::STRING, 3);
      $xfer += $output->writeString($this->messageId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->eventNo !== null) {
      $xfer += $output->writeFieldBegin('eventNo', TType::I32, 4);
      $xfer += $output->writeI32($this->eventNo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->receiverCount !== null) {
      $xfer += $output->writeFieldBegin('receiverCount', TType::I64, 11);
      $xfer += $output->writeI64($this->receiverCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->successCount !== null) {
      $xfer += $output->writeFieldBegin('successCount', TType::I64, 12);
      $xfer += $output->writeI64($this->successCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->failCount !== null) {
      $xfer += $output->writeFieldBegin('failCount', TType::I64, 13);
      $xfer += $output->writeI64($this->failCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cancelCount !== null) {
      $xfer += $output->writeFieldBegin('cancelCount', TType::I64, 14);
      $xfer += $output->writeI64($this->cancelCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->blockCount !== null) {
      $xfer += $output->writeFieldBegin('blockCount', TType::I64, 15);
      $xfer += $output->writeI64($this->blockCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->unregisterCount !== null) {
      $xfer += $output->writeFieldBegin('unregisterCount', TType::I64, 16);
      $xfer += $output->writeI64($this->unregisterCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 21);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 22);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SetBuddyOnAirResult {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'requestId',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'state',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    3 => array(
      'var' => 'eventNo',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    11 => array(
      'var' => 'receiverCount',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    12 => array(
      'var' => 'successCount',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    13 => array(
      'var' => 'failCount',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    14 => array(
      'var' => 'cancelCount',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    15 => array(
      'var' => 'unregisterCount',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    21 => array(
      'var' => 'timestamp',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    22 => array(
      'var' => 'message',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $requestId = null;
  /**
   * @var int
   */
  public $state = null;
  /**
   * @var int
   */
  public $eventNo = null;
  /**
   * @var int
   */
  public $receiverCount = null;
  /**
   * @var int
   */
  public $successCount = null;
  /**
   * @var int
   */
  public $failCount = null;
  /**
   * @var int
   */
  public $cancelCount = null;
  /**
   * @var int
   */
  public $unregisterCount = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var string
   */
  public $message = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['requestId'])) {
        $this->requestId = $vals['requestId'];
      }
      if (isset($vals['state'])) {
        $this->state = $vals['state'];
      }
      if (isset($vals['eventNo'])) {
        $this->eventNo = $vals['eventNo'];
      }
      if (isset($vals['receiverCount'])) {
        $this->receiverCount = $vals['receiverCount'];
      }
      if (isset($vals['successCount'])) {
        $this->successCount = $vals['successCount'];
      }
      if (isset($vals['failCount'])) {
        $this->failCount = $vals['failCount'];
      }
      if (isset($vals['cancelCount'])) {
        $this->cancelCount = $vals['cancelCount'];
      }
      if (isset($vals['unregisterCount'])) {
        $this->unregisterCount = $vals['unregisterCount'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    }
  }

  public function getName() {
    return 'SetBuddyOnAirResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->requestId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->state);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->eventNo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->receiverCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->successCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->failCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->cancelCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->unregisterCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SetBuddyOnAirResult');
    if ($this->requestId !== null) {
      $xfer += $output->writeFieldBegin('requestId', TType::STRING, 1);
      $xfer += $output->writeString($this->requestId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->state !== null) {
      $xfer += $output->writeFieldBegin('state', TType::I32, 2);
      $xfer += $output->writeI32($this->state);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->eventNo !== null) {
      $xfer += $output->writeFieldBegin('eventNo', TType::I32, 3);
      $xfer += $output->writeI32($this->eventNo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->receiverCount !== null) {
      $xfer += $output->writeFieldBegin('receiverCount', TType::I64, 11);
      $xfer += $output->writeI64($this->receiverCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->successCount !== null) {
      $xfer += $output->writeFieldBegin('successCount', TType::I64, 12);
      $xfer += $output->writeI64($this->successCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->failCount !== null) {
      $xfer += $output->writeFieldBegin('failCount', TType::I64, 13);
      $xfer += $output->writeI64($this->failCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cancelCount !== null) {
      $xfer += $output->writeFieldBegin('cancelCount', TType::I64, 14);
      $xfer += $output->writeI64($this->cancelCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->unregisterCount !== null) {
      $xfer += $output->writeFieldBegin('unregisterCount', TType::I64, 15);
      $xfer += $output->writeI64($this->unregisterCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 21);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 22);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Settings {
  static $isValidate = false;

  static $_TSPEC = array(
    10 => array(
      'var' => 'notificationEnable',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    11 => array(
      'var' => 'notificationMuteExpiration',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    12 => array(
      'var' => 'notificationNewMessage',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    13 => array(
      'var' => 'notificationGroupInvitation',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    14 => array(
      'var' => 'notificationShowMessage',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    15 => array(
      'var' => 'notificationIncomingCall',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    16 => array(
      'var' => 'notificationSoundMessage',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    17 => array(
      'var' => 'notificationSoundGroup',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    18 => array(
      'var' => 'notificationDisabledWithSub',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    20 => array(
      'var' => 'privacySyncContacts',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    21 => array(
      'var' => 'privacySearchByPhoneNumber',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    22 => array(
      'var' => 'privacySearchByUserid',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    23 => array(
      'var' => 'privacySearchByEmail',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    24 => array(
      'var' => 'privacyAllowSecondaryDeviceLogin',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    25 => array(
      'var' => 'privacyProfileImagePostToMyhome',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    26 => array(
      'var' => 'privacyReceiveMessagesFromNotFriend',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    30 => array(
      'var' => 'contactMyTicket',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    40 => array(
      'var' => 'identityProvider',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    41 => array(
      'var' => 'identityIdentifier',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    42 => array(
      'var' => 'snsAccounts',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::I32,
      'vtype' => TType::STRING,
      'key' => array(
        'type' => TType::I32,
      ),
      'val' => array(
        'type' => TType::STRING,
        ),
      ),
    43 => array(
      'var' => 'phoneRegistration',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    44 => array(
      'var' => 'emailConfirmationStatus',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    50 => array(
      'var' => 'preferenceLocale',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    60 => array(
      'var' => 'customModes',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::I32,
      'vtype' => TType::STRING,
      'key' => array(
        'type' => TType::I32,
      ),
      'val' => array(
        'type' => TType::STRING,
        ),
      ),
    61 => array(
      'var' => 'e2eeEnable',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    62 => array(
      'var' => 'hitokotoBackupRequested',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    63 => array(
      'var' => 'privacyProfileMusicPostToMyhome',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    65 => array(
      'var' => 'privacyAllowNearby',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    66 => array(
      'var' => 'agreementNearbyTime',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    67 => array(
      'var' => 'agreementSquareTime',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    68 => array(
      'var' => 'notificationMention',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    69 => array(
      'var' => 'botUseAgreementAcceptedAt',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    );

  /**
   * @var bool
   */
  public $notificationEnable = null;
  /**
   * @var int
   */
  public $notificationMuteExpiration = null;
  /**
   * @var bool
   */
  public $notificationNewMessage = null;
  /**
   * @var bool
   */
  public $notificationGroupInvitation = null;
  /**
   * @var bool
   */
  public $notificationShowMessage = null;
  /**
   * @var bool
   */
  public $notificationIncomingCall = null;
  /**
   * @var string
   */
  public $notificationSoundMessage = null;
  /**
   * @var string
   */
  public $notificationSoundGroup = null;
  /**
   * @var bool
   */
  public $notificationDisabledWithSub = null;
  /**
   * @var bool
   */
  public $privacySyncContacts = null;
  /**
   * @var bool
   */
  public $privacySearchByPhoneNumber = null;
  /**
   * @var bool
   */
  public $privacySearchByUserid = null;
  /**
   * @var bool
   */
  public $privacySearchByEmail = null;
  /**
   * @var bool
   */
  public $privacyAllowSecondaryDeviceLogin = null;
  /**
   * @var bool
   */
  public $privacyProfileImagePostToMyhome = null;
  /**
   * @var bool
   */
  public $privacyReceiveMessagesFromNotFriend = null;
  /**
   * @var string
   */
  public $contactMyTicket = null;
  /**
   * @var int
   */
  public $identityProvider = null;
  /**
   * @var string
   */
  public $identityIdentifier = null;
  /**
   * @var array
   */
  public $snsAccounts = null;
  /**
   * @var bool
   */
  public $phoneRegistration = null;
  /**
   * @var int
   */
  public $emailConfirmationStatus = null;
  /**
   * @var string
   */
  public $preferenceLocale = null;
  /**
   * @var array
   */
  public $customModes = null;
  /**
   * @var bool
   */
  public $e2eeEnable = null;
  /**
   * @var bool
   */
  public $hitokotoBackupRequested = null;
  /**
   * @var bool
   */
  public $privacyProfileMusicPostToMyhome = null;
  /**
   * @var bool
   */
  public $privacyAllowNearby = null;
  /**
   * @var int
   */
  public $agreementNearbyTime = null;
  /**
   * @var int
   */
  public $agreementSquareTime = null;
  /**
   * @var bool
   */
  public $notificationMention = null;
  /**
   * @var int
   */
  public $botUseAgreementAcceptedAt = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['notificationEnable'])) {
        $this->notificationEnable = $vals['notificationEnable'];
      }
      if (isset($vals['notificationMuteExpiration'])) {
        $this->notificationMuteExpiration = $vals['notificationMuteExpiration'];
      }
      if (isset($vals['notificationNewMessage'])) {
        $this->notificationNewMessage = $vals['notificationNewMessage'];
      }
      if (isset($vals['notificationGroupInvitation'])) {
        $this->notificationGroupInvitation = $vals['notificationGroupInvitation'];
      }
      if (isset($vals['notificationShowMessage'])) {
        $this->notificationShowMessage = $vals['notificationShowMessage'];
      }
      if (isset($vals['notificationIncomingCall'])) {
        $this->notificationIncomingCall = $vals['notificationIncomingCall'];
      }
      if (isset($vals['notificationSoundMessage'])) {
        $this->notificationSoundMessage = $vals['notificationSoundMessage'];
      }
      if (isset($vals['notificationSoundGroup'])) {
        $this->notificationSoundGroup = $vals['notificationSoundGroup'];
      }
      if (isset($vals['notificationDisabledWithSub'])) {
        $this->notificationDisabledWithSub = $vals['notificationDisabledWithSub'];
      }
      if (isset($vals['privacySyncContacts'])) {
        $this->privacySyncContacts = $vals['privacySyncContacts'];
      }
      if (isset($vals['privacySearchByPhoneNumber'])) {
        $this->privacySearchByPhoneNumber = $vals['privacySearchByPhoneNumber'];
      }
      if (isset($vals['privacySearchByUserid'])) {
        $this->privacySearchByUserid = $vals['privacySearchByUserid'];
      }
      if (isset($vals['privacySearchByEmail'])) {
        $this->privacySearchByEmail = $vals['privacySearchByEmail'];
      }
      if (isset($vals['privacyAllowSecondaryDeviceLogin'])) {
        $this->privacyAllowSecondaryDeviceLogin = $vals['privacyAllowSecondaryDeviceLogin'];
      }
      if (isset($vals['privacyProfileImagePostToMyhome'])) {
        $this->privacyProfileImagePostToMyhome = $vals['privacyProfileImagePostToMyhome'];
      }
      if (isset($vals['privacyReceiveMessagesFromNotFriend'])) {
        $this->privacyReceiveMessagesFromNotFriend = $vals['privacyReceiveMessagesFromNotFriend'];
      }
      if (isset($vals['contactMyTicket'])) {
        $this->contactMyTicket = $vals['contactMyTicket'];
      }
      if (isset($vals['identityProvider'])) {
        $this->identityProvider = $vals['identityProvider'];
      }
      if (isset($vals['identityIdentifier'])) {
        $this->identityIdentifier = $vals['identityIdentifier'];
      }
      if (isset($vals['snsAccounts'])) {
        $this->snsAccounts = $vals['snsAccounts'];
      }
      if (isset($vals['phoneRegistration'])) {
        $this->phoneRegistration = $vals['phoneRegistration'];
      }
      if (isset($vals['emailConfirmationStatus'])) {
        $this->emailConfirmationStatus = $vals['emailConfirmationStatus'];
      }
      if (isset($vals['preferenceLocale'])) {
        $this->preferenceLocale = $vals['preferenceLocale'];
      }
      if (isset($vals['customModes'])) {
        $this->customModes = $vals['customModes'];
      }
      if (isset($vals['e2eeEnable'])) {
        $this->e2eeEnable = $vals['e2eeEnable'];
      }
      if (isset($vals['hitokotoBackupRequested'])) {
        $this->hitokotoBackupRequested = $vals['hitokotoBackupRequested'];
      }
      if (isset($vals['privacyProfileMusicPostToMyhome'])) {
        $this->privacyProfileMusicPostToMyhome = $vals['privacyProfileMusicPostToMyhome'];
      }
      if (isset($vals['privacyAllowNearby'])) {
        $this->privacyAllowNearby = $vals['privacyAllowNearby'];
      }
      if (isset($vals['agreementNearbyTime'])) {
        $this->agreementNearbyTime = $vals['agreementNearbyTime'];
      }
      if (isset($vals['agreementSquareTime'])) {
        $this->agreementSquareTime = $vals['agreementSquareTime'];
      }
      if (isset($vals['notificationMention'])) {
        $this->notificationMention = $vals['notificationMention'];
      }
      if (isset($vals['botUseAgreementAcceptedAt'])) {
        $this->botUseAgreementAcceptedAt = $vals['botUseAgreementAcceptedAt'];
      }
    }
  }

  public function getName() {
    return 'Settings';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 10:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->notificationEnable);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->notificationMuteExpiration);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->notificationNewMessage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->notificationGroupInvitation);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->notificationShowMessage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->notificationIncomingCall);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->notificationSoundMessage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->notificationSoundGroup);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->notificationDisabledWithSub);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->privacySyncContacts);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->privacySearchByPhoneNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->privacySearchByUserid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->privacySearchByEmail);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 24:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->privacyAllowSecondaryDeviceLogin);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 25:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->privacyProfileImagePostToMyhome);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 26:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->privacyReceiveMessagesFromNotFriend);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 30:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->contactMyTicket);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 40:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->identityProvider);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 41:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->identityIdentifier);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 42:
          if ($ftype == TType::MAP) {
            $this->snsAccounts = array();
            $_size585 = 0;
            $_ktype586 = 0;
            $_vtype587 = 0;
            $xfer += $input->readMapBegin($_ktype586, $_vtype587, $_size585);
            for ($_i589 = 0; $_i589 < $_size585; ++$_i589)
            {
              $key590 = 0;
              $val591 = '';
              $xfer += $input->readI32($key590);
              $xfer += $input->readString($val591);
              $this->snsAccounts[$key590] = $val591;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 43:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->phoneRegistration);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 44:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->emailConfirmationStatus);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 50:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->preferenceLocale);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 60:
          if ($ftype == TType::MAP) {
            $this->customModes = array();
            $_size592 = 0;
            $_ktype593 = 0;
            $_vtype594 = 0;
            $xfer += $input->readMapBegin($_ktype593, $_vtype594, $_size592);
            for ($_i596 = 0; $_i596 < $_size592; ++$_i596)
            {
              $key597 = 0;
              $val598 = '';
              $xfer += $input->readI32($key597);
              $xfer += $input->readString($val598);
              $this->customModes[$key597] = $val598;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 61:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->e2eeEnable);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 62:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->hitokotoBackupRequested);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 63:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->privacyProfileMusicPostToMyhome);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 65:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->privacyAllowNearby);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 66:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->agreementNearbyTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 67:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->agreementSquareTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 68:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->notificationMention);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 69:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->botUseAgreementAcceptedAt);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Settings');
    if ($this->notificationEnable !== null) {
      $xfer += $output->writeFieldBegin('notificationEnable', TType::BOOL, 10);
      $xfer += $output->writeBool($this->notificationEnable);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notificationMuteExpiration !== null) {
      $xfer += $output->writeFieldBegin('notificationMuteExpiration', TType::I64, 11);
      $xfer += $output->writeI64($this->notificationMuteExpiration);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notificationNewMessage !== null) {
      $xfer += $output->writeFieldBegin('notificationNewMessage', TType::BOOL, 12);
      $xfer += $output->writeBool($this->notificationNewMessage);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notificationGroupInvitation !== null) {
      $xfer += $output->writeFieldBegin('notificationGroupInvitation', TType::BOOL, 13);
      $xfer += $output->writeBool($this->notificationGroupInvitation);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notificationShowMessage !== null) {
      $xfer += $output->writeFieldBegin('notificationShowMessage', TType::BOOL, 14);
      $xfer += $output->writeBool($this->notificationShowMessage);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notificationIncomingCall !== null) {
      $xfer += $output->writeFieldBegin('notificationIncomingCall', TType::BOOL, 15);
      $xfer += $output->writeBool($this->notificationIncomingCall);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notificationSoundMessage !== null) {
      $xfer += $output->writeFieldBegin('notificationSoundMessage', TType::STRING, 16);
      $xfer += $output->writeString($this->notificationSoundMessage);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notificationSoundGroup !== null) {
      $xfer += $output->writeFieldBegin('notificationSoundGroup', TType::STRING, 17);
      $xfer += $output->writeString($this->notificationSoundGroup);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notificationDisabledWithSub !== null) {
      $xfer += $output->writeFieldBegin('notificationDisabledWithSub', TType::BOOL, 18);
      $xfer += $output->writeBool($this->notificationDisabledWithSub);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->privacySyncContacts !== null) {
      $xfer += $output->writeFieldBegin('privacySyncContacts', TType::BOOL, 20);
      $xfer += $output->writeBool($this->privacySyncContacts);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->privacySearchByPhoneNumber !== null) {
      $xfer += $output->writeFieldBegin('privacySearchByPhoneNumber', TType::BOOL, 21);
      $xfer += $output->writeBool($this->privacySearchByPhoneNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->privacySearchByUserid !== null) {
      $xfer += $output->writeFieldBegin('privacySearchByUserid', TType::BOOL, 22);
      $xfer += $output->writeBool($this->privacySearchByUserid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->privacySearchByEmail !== null) {
      $xfer += $output->writeFieldBegin('privacySearchByEmail', TType::BOOL, 23);
      $xfer += $output->writeBool($this->privacySearchByEmail);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->privacyAllowSecondaryDeviceLogin !== null) {
      $xfer += $output->writeFieldBegin('privacyAllowSecondaryDeviceLogin', TType::BOOL, 24);
      $xfer += $output->writeBool($this->privacyAllowSecondaryDeviceLogin);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->privacyProfileImagePostToMyhome !== null) {
      $xfer += $output->writeFieldBegin('privacyProfileImagePostToMyhome', TType::BOOL, 25);
      $xfer += $output->writeBool($this->privacyProfileImagePostToMyhome);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->privacyReceiveMessagesFromNotFriend !== null) {
      $xfer += $output->writeFieldBegin('privacyReceiveMessagesFromNotFriend', TType::BOOL, 26);
      $xfer += $output->writeBool($this->privacyReceiveMessagesFromNotFriend);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contactMyTicket !== null) {
      $xfer += $output->writeFieldBegin('contactMyTicket', TType::STRING, 30);
      $xfer += $output->writeString($this->contactMyTicket);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->identityProvider !== null) {
      $xfer += $output->writeFieldBegin('identityProvider', TType::I32, 40);
      $xfer += $output->writeI32($this->identityProvider);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->identityIdentifier !== null) {
      $xfer += $output->writeFieldBegin('identityIdentifier', TType::STRING, 41);
      $xfer += $output->writeString($this->identityIdentifier);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->snsAccounts !== null) {
      if (!is_array($this->snsAccounts)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('snsAccounts', TType::MAP, 42);
      {
        $output->writeMapBegin(TType::I32, TType::STRING, count($this->snsAccounts));
        {
          foreach ($this->snsAccounts as $kiter599 => $viter600)
          {
            $xfer += $output->writeI32($kiter599);
            $xfer += $output->writeString($viter600);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->phoneRegistration !== null) {
      $xfer += $output->writeFieldBegin('phoneRegistration', TType::BOOL, 43);
      $xfer += $output->writeBool($this->phoneRegistration);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->emailConfirmationStatus !== null) {
      $xfer += $output->writeFieldBegin('emailConfirmationStatus', TType::I32, 44);
      $xfer += $output->writeI32($this->emailConfirmationStatus);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->preferenceLocale !== null) {
      $xfer += $output->writeFieldBegin('preferenceLocale', TType::STRING, 50);
      $xfer += $output->writeString($this->preferenceLocale);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->customModes !== null) {
      if (!is_array($this->customModes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('customModes', TType::MAP, 60);
      {
        $output->writeMapBegin(TType::I32, TType::STRING, count($this->customModes));
        {
          foreach ($this->customModes as $kiter601 => $viter602)
          {
            $xfer += $output->writeI32($kiter601);
            $xfer += $output->writeString($viter602);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->e2eeEnable !== null) {
      $xfer += $output->writeFieldBegin('e2eeEnable', TType::BOOL, 61);
      $xfer += $output->writeBool($this->e2eeEnable);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->hitokotoBackupRequested !== null) {
      $xfer += $output->writeFieldBegin('hitokotoBackupRequested', TType::BOOL, 62);
      $xfer += $output->writeBool($this->hitokotoBackupRequested);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->privacyProfileMusicPostToMyhome !== null) {
      $xfer += $output->writeFieldBegin('privacyProfileMusicPostToMyhome', TType::BOOL, 63);
      $xfer += $output->writeBool($this->privacyProfileMusicPostToMyhome);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->privacyAllowNearby !== null) {
      $xfer += $output->writeFieldBegin('privacyAllowNearby', TType::BOOL, 65);
      $xfer += $output->writeBool($this->privacyAllowNearby);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->agreementNearbyTime !== null) {
      $xfer += $output->writeFieldBegin('agreementNearbyTime', TType::I64, 66);
      $xfer += $output->writeI64($this->agreementNearbyTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->agreementSquareTime !== null) {
      $xfer += $output->writeFieldBegin('agreementSquareTime', TType::I64, 67);
      $xfer += $output->writeI64($this->agreementSquareTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notificationMention !== null) {
      $xfer += $output->writeFieldBegin('notificationMention', TType::BOOL, 68);
      $xfer += $output->writeBool($this->notificationMention);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->botUseAgreementAcceptedAt !== null) {
      $xfer += $output->writeFieldBegin('botUseAgreementAcceptedAt', TType::I64, 69);
      $xfer += $output->writeI64($this->botUseAgreementAcceptedAt);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SimpleChannelClient {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'applicationType',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'applicationVersion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'locale',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $applicationType = null;
  /**
   * @var string
   */
  public $applicationVersion = null;
  /**
   * @var string
   */
  public $locale = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['applicationType'])) {
        $this->applicationType = $vals['applicationType'];
      }
      if (isset($vals['applicationVersion'])) {
        $this->applicationVersion = $vals['applicationVersion'];
      }
      if (isset($vals['locale'])) {
        $this->locale = $vals['locale'];
      }
    }
  }

  public function getName() {
    return 'SimpleChannelClient';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->applicationType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->applicationVersion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->locale);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SimpleChannelClient');
    if ($this->applicationType !== null) {
      $xfer += $output->writeFieldBegin('applicationType', TType::STRING, 1);
      $xfer += $output->writeString($this->applicationType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->applicationVersion !== null) {
      $xfer += $output->writeFieldBegin('applicationVersion', TType::STRING, 2);
      $xfer += $output->writeString($this->applicationVersion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->locale !== null) {
      $xfer += $output->writeFieldBegin('locale', TType::STRING, 3);
      $xfer += $output->writeString($this->locale);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SimpleChannelContact {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'mid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'displayName',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'pictureStatus',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'picturePath',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'statusMessage',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $mid = null;
  /**
   * @var string
   */
  public $displayName = null;
  /**
   * @var string
   */
  public $pictureStatus = null;
  /**
   * @var string
   */
  public $picturePath = null;
  /**
   * @var string
   */
  public $statusMessage = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['mid'])) {
        $this->mid = $vals['mid'];
      }
      if (isset($vals['displayName'])) {
        $this->displayName = $vals['displayName'];
      }
      if (isset($vals['pictureStatus'])) {
        $this->pictureStatus = $vals['pictureStatus'];
      }
      if (isset($vals['picturePath'])) {
        $this->picturePath = $vals['picturePath'];
      }
      if (isset($vals['statusMessage'])) {
        $this->statusMessage = $vals['statusMessage'];
      }
    }
  }

  public function getName() {
    return 'SimpleChannelContact';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->displayName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pictureStatus);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->picturePath);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->statusMessage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SimpleChannelContact');
    if ($this->mid !== null) {
      $xfer += $output->writeFieldBegin('mid', TType::STRING, 1);
      $xfer += $output->writeString($this->mid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->displayName !== null) {
      $xfer += $output->writeFieldBegin('displayName', TType::STRING, 2);
      $xfer += $output->writeString($this->displayName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pictureStatus !== null) {
      $xfer += $output->writeFieldBegin('pictureStatus', TType::STRING, 3);
      $xfer += $output->writeString($this->pictureStatus);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->picturePath !== null) {
      $xfer += $output->writeFieldBegin('picturePath', TType::STRING, 4);
      $xfer += $output->writeString($this->picturePath);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->statusMessage !== null) {
      $xfer += $output->writeFieldBegin('statusMessage', TType::STRING, 5);
      $xfer += $output->writeString($this->statusMessage);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SnsFriend {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'snsUserId',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'snsUserName',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'snsIdType',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var string
   */
  public $snsUserId = null;
  /**
   * @var string
   */
  public $snsUserName = null;
  /**
   * @var int
   */
  public $snsIdType = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['snsUserId'])) {
        $this->snsUserId = $vals['snsUserId'];
      }
      if (isset($vals['snsUserName'])) {
        $this->snsUserName = $vals['snsUserName'];
      }
      if (isset($vals['snsIdType'])) {
        $this->snsIdType = $vals['snsIdType'];
      }
    }
  }

  public function getName() {
    return 'SnsFriend';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->snsUserId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->snsUserName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->snsIdType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SnsFriend');
    if ($this->snsUserId !== null) {
      $xfer += $output->writeFieldBegin('snsUserId', TType::STRING, 1);
      $xfer += $output->writeString($this->snsUserId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->snsUserName !== null) {
      $xfer += $output->writeFieldBegin('snsUserName', TType::STRING, 2);
      $xfer += $output->writeString($this->snsUserName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->snsIdType !== null) {
      $xfer += $output->writeFieldBegin('snsIdType', TType::I32, 3);
      $xfer += $output->writeI32($this->snsIdType);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SnsFriendContactRegistration {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'contact',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Contact',
      ),
    2 => array(
      'var' => 'snsIdType',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    3 => array(
      'var' => 'snsUserId',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var \Contact
   */
  public $contact = null;
  /**
   * @var int
   */
  public $snsIdType = null;
  /**
   * @var string
   */
  public $snsUserId = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['contact'])) {
        $this->contact = $vals['contact'];
      }
      if (isset($vals['snsIdType'])) {
        $this->snsIdType = $vals['snsIdType'];
      }
      if (isset($vals['snsUserId'])) {
        $this->snsUserId = $vals['snsUserId'];
      }
    }
  }

  public function getName() {
    return 'SnsFriendContactRegistration';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->contact = new \Contact();
            $xfer += $this->contact->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->snsIdType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->snsUserId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SnsFriendContactRegistration');
    if ($this->contact !== null) {
      if (!is_object($this->contact)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('contact', TType::STRUCT, 1);
      $xfer += $this->contact->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->snsIdType !== null) {
      $xfer += $output->writeFieldBegin('snsIdType', TType::I32, 2);
      $xfer += $output->writeI32($this->snsIdType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->snsUserId !== null) {
      $xfer += $output->writeFieldBegin('snsUserId', TType::STRING, 3);
      $xfer += $output->writeString($this->snsUserId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SnsFriendModification {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'type',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'snsFriend',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SnsFriend',
      ),
    );

  /**
   * @var int
   */
  public $type = null;
  /**
   * @var \SnsFriend
   */
  public $snsFriend = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['snsFriend'])) {
        $this->snsFriend = $vals['snsFriend'];
      }
    }
  }

  public function getName() {
    return 'SnsFriendModification';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->snsFriend = new \SnsFriend();
            $xfer += $this->snsFriend->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SnsFriendModification');
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 1);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->snsFriend !== null) {
      if (!is_object($this->snsFriend)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('snsFriend', TType::STRUCT, 2);
      $xfer += $this->snsFriend->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SnsFriends {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'snsFriends',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\SnsFriend',
        ),
      ),
    2 => array(
      'var' => 'hasMore',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var \SnsFriend[]
   */
  public $snsFriends = null;
  /**
   * @var bool
   */
  public $hasMore = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['snsFriends'])) {
        $this->snsFriends = $vals['snsFriends'];
      }
      if (isset($vals['hasMore'])) {
        $this->hasMore = $vals['hasMore'];
      }
    }
  }

  public function getName() {
    return 'SnsFriends';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->snsFriends = array();
            $_size603 = 0;
            $_etype606 = 0;
            $xfer += $input->readListBegin($_etype606, $_size603);
            for ($_i607 = 0; $_i607 < $_size603; ++$_i607)
            {
              $elem608 = null;
              $elem608 = new \SnsFriend();
              $xfer += $elem608->read($input);
              $this->snsFriends []= $elem608;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->hasMore);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SnsFriends');
    if ($this->snsFriends !== null) {
      if (!is_array($this->snsFriends)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('snsFriends', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->snsFriends));
        {
          foreach ($this->snsFriends as $iter609)
          {
            $xfer += $iter609->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->hasMore !== null) {
      $xfer += $output->writeFieldBegin('hasMore', TType::BOOL, 2);
      $xfer += $output->writeBool($this->hasMore);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SnsIdUserStatus {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'userExisting',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    2 => array(
      'var' => 'phoneNumberRegistered',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    3 => array(
      'var' => 'sameDevice',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var bool
   */
  public $userExisting = null;
  /**
   * @var bool
   */
  public $phoneNumberRegistered = null;
  /**
   * @var bool
   */
  public $sameDevice = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['userExisting'])) {
        $this->userExisting = $vals['userExisting'];
      }
      if (isset($vals['phoneNumberRegistered'])) {
        $this->phoneNumberRegistered = $vals['phoneNumberRegistered'];
      }
      if (isset($vals['sameDevice'])) {
        $this->sameDevice = $vals['sameDevice'];
      }
    }
  }

  public function getName() {
    return 'SnsIdUserStatus';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->userExisting);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->phoneNumberRegistered);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->sameDevice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SnsIdUserStatus');
    if ($this->userExisting !== null) {
      $xfer += $output->writeFieldBegin('userExisting', TType::BOOL, 1);
      $xfer += $output->writeBool($this->userExisting);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->phoneNumberRegistered !== null) {
      $xfer += $output->writeFieldBegin('phoneNumberRegistered', TType::BOOL, 2);
      $xfer += $output->writeBool($this->phoneNumberRegistered);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sameDevice !== null) {
      $xfer += $output->writeFieldBegin('sameDevice', TType::BOOL, 3);
      $xfer += $output->writeBool($this->sameDevice);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SnsProfile {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'snsUserId',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'snsUserName',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'email',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'thumbnailUrl',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $snsUserId = null;
  /**
   * @var string
   */
  public $snsUserName = null;
  /**
   * @var string
   */
  public $email = null;
  /**
   * @var string
   */
  public $thumbnailUrl = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['snsUserId'])) {
        $this->snsUserId = $vals['snsUserId'];
      }
      if (isset($vals['snsUserName'])) {
        $this->snsUserName = $vals['snsUserName'];
      }
      if (isset($vals['email'])) {
        $this->email = $vals['email'];
      }
      if (isset($vals['thumbnailUrl'])) {
        $this->thumbnailUrl = $vals['thumbnailUrl'];
      }
    }
  }

  public function getName() {
    return 'SnsProfile';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->snsUserId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->snsUserName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->email);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->thumbnailUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SnsProfile');
    if ($this->snsUserId !== null) {
      $xfer += $output->writeFieldBegin('snsUserId', TType::STRING, 1);
      $xfer += $output->writeString($this->snsUserId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->snsUserName !== null) {
      $xfer += $output->writeFieldBegin('snsUserName', TType::STRING, 2);
      $xfer += $output->writeString($this->snsUserName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->email !== null) {
      $xfer += $output->writeFieldBegin('email', TType::STRING, 3);
      $xfer += $output->writeString($this->email);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->thumbnailUrl !== null) {
      $xfer += $output->writeFieldBegin('thumbnailUrl', TType::STRING, 4);
      $xfer += $output->writeString($this->thumbnailUrl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SystemConfiguration {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'endpoint',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'endpointSsl',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'updateUrl',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    11 => array(
      'var' => 'c2dmAccount',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    12 => array(
      'var' => 'nniServer',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $endpoint = null;
  /**
   * @var string
   */
  public $endpointSsl = null;
  /**
   * @var string
   */
  public $updateUrl = null;
  /**
   * @var string
   */
  public $c2dmAccount = null;
  /**
   * @var string
   */
  public $nniServer = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['endpoint'])) {
        $this->endpoint = $vals['endpoint'];
      }
      if (isset($vals['endpointSsl'])) {
        $this->endpointSsl = $vals['endpointSsl'];
      }
      if (isset($vals['updateUrl'])) {
        $this->updateUrl = $vals['updateUrl'];
      }
      if (isset($vals['c2dmAccount'])) {
        $this->c2dmAccount = $vals['c2dmAccount'];
      }
      if (isset($vals['nniServer'])) {
        $this->nniServer = $vals['nniServer'];
      }
    }
  }

  public function getName() {
    return 'SystemConfiguration';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->endpoint);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->endpointSsl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->updateUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->c2dmAccount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nniServer);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SystemConfiguration');
    if ($this->endpoint !== null) {
      $xfer += $output->writeFieldBegin('endpoint', TType::STRING, 1);
      $xfer += $output->writeString($this->endpoint);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->endpointSsl !== null) {
      $xfer += $output->writeFieldBegin('endpointSsl', TType::STRING, 2);
      $xfer += $output->writeString($this->endpointSsl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->updateUrl !== null) {
      $xfer += $output->writeFieldBegin('updateUrl', TType::STRING, 3);
      $xfer += $output->writeString($this->updateUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->c2dmAccount !== null) {
      $xfer += $output->writeFieldBegin('c2dmAccount', TType::STRING, 11);
      $xfer += $output->writeString($this->c2dmAccount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nniServer !== null) {
      $xfer += $output->writeFieldBegin('nniServer', TType::STRING, 12);
      $xfer += $output->writeString($this->nniServer);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Ticket {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    10 => array(
      'var' => 'expirationTime',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    21 => array(
      'var' => 'maxUseCount',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var string
   */
  public $id = null;
  /**
   * @var int
   */
  public $expirationTime = null;
  /**
   * @var int
   */
  public $maxUseCount = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['expirationTime'])) {
        $this->expirationTime = $vals['expirationTime'];
      }
      if (isset($vals['maxUseCount'])) {
        $this->maxUseCount = $vals['maxUseCount'];
      }
    }
  }

  public function getName() {
    return 'Ticket';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->expirationTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->maxUseCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Ticket');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expirationTime !== null) {
      $xfer += $output->writeFieldBegin('expirationTime', TType::I64, 10);
      $xfer += $output->writeI64($this->expirationTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->maxUseCount !== null) {
      $xfer += $output->writeFieldBegin('maxUseCount', TType::I32, 21);
      $xfer += $output->writeI32($this->maxUseCount);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TMessageBox {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'channelId',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'lastSeq',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    6 => array(
      'var' => 'unreadCount',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    7 => array(
      'var' => 'lastModifiedTime',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    8 => array(
      'var' => 'status',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    9 => array(
      'var' => 'midType',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    10 => array(
      'var' => 'lastMessages',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\Message',
        ),
      ),
    );

  /**
   * @var string
   */
  public $id = null;
  /**
   * @var string
   */
  public $channelId = null;
  /**
   * @var int
   */
  public $lastSeq = null;
  /**
   * @var int
   */
  public $unreadCount = null;
  /**
   * @var int
   */
  public $lastModifiedTime = null;
  /**
   * @var int
   */
  public $status = null;
  /**
   * @var int
   */
  public $midType = null;
  /**
   * @var \Message[]
   */
  public $lastMessages = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['channelId'])) {
        $this->channelId = $vals['channelId'];
      }
      if (isset($vals['lastSeq'])) {
        $this->lastSeq = $vals['lastSeq'];
      }
      if (isset($vals['unreadCount'])) {
        $this->unreadCount = $vals['unreadCount'];
      }
      if (isset($vals['lastModifiedTime'])) {
        $this->lastModifiedTime = $vals['lastModifiedTime'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['midType'])) {
        $this->midType = $vals['midType'];
      }
      if (isset($vals['lastMessages'])) {
        $this->lastMessages = $vals['lastMessages'];
      }
    }
  }

  public function getName() {
    return 'TMessageBox';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->channelId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->lastSeq);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->unreadCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->lastModifiedTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->midType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::LST) {
            $this->lastMessages = array();
            $_size610 = 0;
            $_etype613 = 0;
            $xfer += $input->readListBegin($_etype613, $_size610);
            for ($_i614 = 0; $_i614 < $_size610; ++$_i614)
            {
              $elem615 = null;
              $elem615 = new \Message();
              $xfer += $elem615->read($input);
              $this->lastMessages []= $elem615;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TMessageBox');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->channelId !== null) {
      $xfer += $output->writeFieldBegin('channelId', TType::STRING, 2);
      $xfer += $output->writeString($this->channelId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lastSeq !== null) {
      $xfer += $output->writeFieldBegin('lastSeq', TType::I64, 5);
      $xfer += $output->writeI64($this->lastSeq);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->unreadCount !== null) {
      $xfer += $output->writeFieldBegin('unreadCount', TType::I64, 6);
      $xfer += $output->writeI64($this->unreadCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lastModifiedTime !== null) {
      $xfer += $output->writeFieldBegin('lastModifiedTime', TType::I64, 7);
      $xfer += $output->writeI64($this->lastModifiedTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 8);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->midType !== null) {
      $xfer += $output->writeFieldBegin('midType', TType::I32, 9);
      $xfer += $output->writeI32($this->midType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lastMessages !== null) {
      if (!is_array($this->lastMessages)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('lastMessages', TType::LST, 10);
      {
        $output->writeListBegin(TType::STRUCT, count($this->lastMessages));
        {
          foreach ($this->lastMessages as $iter616)
          {
            $xfer += $iter616->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TMessageBoxWrapUp {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'messageBox',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\TMessageBox',
      ),
    2 => array(
      'var' => 'name',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'contacts',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\Contact',
        ),
      ),
    4 => array(
      'var' => 'pictureRevision',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var \TMessageBox
   */
  public $messageBox = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var \Contact[]
   */
  public $contacts = null;
  /**
   * @var string
   */
  public $pictureRevision = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['messageBox'])) {
        $this->messageBox = $vals['messageBox'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['contacts'])) {
        $this->contacts = $vals['contacts'];
      }
      if (isset($vals['pictureRevision'])) {
        $this->pictureRevision = $vals['pictureRevision'];
      }
    }
  }

  public function getName() {
    return 'TMessageBoxWrapUp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->messageBox = new \TMessageBox();
            $xfer += $this->messageBox->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->contacts = array();
            $_size617 = 0;
            $_etype620 = 0;
            $xfer += $input->readListBegin($_etype620, $_size617);
            for ($_i621 = 0; $_i621 < $_size617; ++$_i621)
            {
              $elem622 = null;
              $elem622 = new \Contact();
              $xfer += $elem622->read($input);
              $this->contacts []= $elem622;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pictureRevision);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TMessageBoxWrapUp');
    if ($this->messageBox !== null) {
      if (!is_object($this->messageBox)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('messageBox', TType::STRUCT, 1);
      $xfer += $this->messageBox->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contacts !== null) {
      if (!is_array($this->contacts)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('contacts', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->contacts));
        {
          foreach ($this->contacts as $iter623)
          {
            $xfer += $iter623->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pictureRevision !== null) {
      $xfer += $output->writeFieldBegin('pictureRevision', TType::STRING, 4);
      $xfer += $output->writeString($this->pictureRevision);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TMessageBoxWrapUpResponse {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'messageBoxWrapUpList',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\TMessageBoxWrapUp',
        ),
      ),
    2 => array(
      'var' => 'totalSize',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var \TMessageBoxWrapUp[]
   */
  public $messageBoxWrapUpList = null;
  /**
   * @var int
   */
  public $totalSize = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['messageBoxWrapUpList'])) {
        $this->messageBoxWrapUpList = $vals['messageBoxWrapUpList'];
      }
      if (isset($vals['totalSize'])) {
        $this->totalSize = $vals['totalSize'];
      }
    }
  }

  public function getName() {
    return 'TMessageBoxWrapUpResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->messageBoxWrapUpList = array();
            $_size624 = 0;
            $_etype627 = 0;
            $xfer += $input->readListBegin($_etype627, $_size624);
            for ($_i628 = 0; $_i628 < $_size624; ++$_i628)
            {
              $elem629 = null;
              $elem629 = new \TMessageBoxWrapUp();
              $xfer += $elem629->read($input);
              $this->messageBoxWrapUpList []= $elem629;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->totalSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TMessageBoxWrapUpResponse');
    if ($this->messageBoxWrapUpList !== null) {
      if (!is_array($this->messageBoxWrapUpList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('messageBoxWrapUpList', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->messageBoxWrapUpList));
        {
          foreach ($this->messageBoxWrapUpList as $iter630)
          {
            $xfer += $iter630->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->totalSize !== null) {
      $xfer += $output->writeFieldBegin('totalSize', TType::I32, 2);
      $xfer += $output->writeI32($this->totalSize);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TMessageReadRangeEntry {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'startMessageId',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    2 => array(
      'var' => 'endMessageId',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    3 => array(
      'var' => 'startTime',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    4 => array(
      'var' => 'endTime',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    );

  /**
   * @var int
   */
  public $startMessageId = null;
  /**
   * @var int
   */
  public $endMessageId = null;
  /**
   * @var int
   */
  public $startTime = null;
  /**
   * @var int
   */
  public $endTime = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['startMessageId'])) {
        $this->startMessageId = $vals['startMessageId'];
      }
      if (isset($vals['endMessageId'])) {
        $this->endMessageId = $vals['endMessageId'];
      }
      if (isset($vals['startTime'])) {
        $this->startTime = $vals['startTime'];
      }
      if (isset($vals['endTime'])) {
        $this->endTime = $vals['endTime'];
      }
    }
  }

  public function getName() {
    return 'TMessageReadRangeEntry';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->startMessageId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->endMessageId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->startTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->endTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TMessageReadRangeEntry');
    if ($this->startMessageId !== null) {
      $xfer += $output->writeFieldBegin('startMessageId', TType::I64, 1);
      $xfer += $output->writeI64($this->startMessageId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->endMessageId !== null) {
      $xfer += $output->writeFieldBegin('endMessageId', TType::I64, 2);
      $xfer += $output->writeI64($this->endMessageId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->startTime !== null) {
      $xfer += $output->writeFieldBegin('startTime', TType::I64, 3);
      $xfer += $output->writeI64($this->startTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->endTime !== null) {
      $xfer += $output->writeFieldBegin('endTime', TType::I64, 4);
      $xfer += $output->writeI64($this->endTime);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TMessageReadRange {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'chatId',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'ranges',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::LST,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::LST,
        'etype' => TType::STRUCT,
        'elem' => array(
          'type' => TType::STRUCT,
          'class' => '\TMessageReadRangeEntry',
          ),
        ),
      ),
    );

  /**
   * @var string
   */
  public $chatId = null;
  /**
   * @var array
   */
  public $ranges = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['chatId'])) {
        $this->chatId = $vals['chatId'];
      }
      if (isset($vals['ranges'])) {
        $this->ranges = $vals['ranges'];
      }
    }
  }

  public function getName() {
    return 'TMessageReadRange';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->chatId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::MAP) {
            $this->ranges = array();
            $_size631 = 0;
            $_ktype632 = 0;
            $_vtype633 = 0;
            $xfer += $input->readMapBegin($_ktype632, $_vtype633, $_size631);
            for ($_i635 = 0; $_i635 < $_size631; ++$_i635)
            {
              $key636 = '';
              $val637 = array();
              $xfer += $input->readString($key636);
              $val637 = array();
              $_size638 = 0;
              $_etype641 = 0;
              $xfer += $input->readListBegin($_etype641, $_size638);
              for ($_i642 = 0; $_i642 < $_size638; ++$_i642)
              {
                $elem643 = null;
                $elem643 = new \TMessageReadRangeEntry();
                $xfer += $elem643->read($input);
                $val637 []= $elem643;
              }
              $xfer += $input->readListEnd();
              $this->ranges[$key636] = $val637;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TMessageReadRange');
    if ($this->chatId !== null) {
      $xfer += $output->writeFieldBegin('chatId', TType::STRING, 1);
      $xfer += $output->writeString($this->chatId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ranges !== null) {
      if (!is_array($this->ranges)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ranges', TType::MAP, 2);
      {
        $output->writeMapBegin(TType::STRING, TType::LST, count($this->ranges));
        {
          foreach ($this->ranges as $kiter644 => $viter645)
          {
            $xfer += $output->writeString($kiter644);
            {
              $output->writeListBegin(TType::STRUCT, count($viter645));
              {
                foreach ($viter645 as $iter646)
                {
                  $xfer += $iter646->write($output);
                }
              }
              $output->writeListEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ChatRoomAnnouncementContents {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'displayFields',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'text',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'link',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'thumbnail',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var int
   */
  public $displayFields = null;
  /**
   * @var string
   */
  public $text = null;
  /**
   * @var string
   */
  public $link = null;
  /**
   * @var string
   */
  public $thumbnail = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['displayFields'])) {
        $this->displayFields = $vals['displayFields'];
      }
      if (isset($vals['text'])) {
        $this->text = $vals['text'];
      }
      if (isset($vals['link'])) {
        $this->link = $vals['link'];
      }
      if (isset($vals['thumbnail'])) {
        $this->thumbnail = $vals['thumbnail'];
      }
    }
  }

  public function getName() {
    return 'ChatRoomAnnouncementContents';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->displayFields);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->text);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->link);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->thumbnail);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ChatRoomAnnouncementContents');
    if ($this->displayFields !== null) {
      $xfer += $output->writeFieldBegin('displayFields', TType::I32, 1);
      $xfer += $output->writeI32($this->displayFields);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->text !== null) {
      $xfer += $output->writeFieldBegin('text', TType::STRING, 2);
      $xfer += $output->writeString($this->text);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->link !== null) {
      $xfer += $output->writeFieldBegin('link', TType::STRING, 3);
      $xfer += $output->writeString($this->link);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->thumbnail !== null) {
      $xfer += $output->writeFieldBegin('thumbnail', TType::STRING, 4);
      $xfer += $output->writeString($this->thumbnail);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ChatRoomAnnouncement {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'announcementSeq',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    2 => array(
      'var' => 'type',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    3 => array(
      'var' => 'contents',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\ChatRoomAnnouncementContents',
      ),
    4 => array(
      'var' => 'creatorMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'createdTime',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    );

  /**
   * @var int
   */
  public $announcementSeq = null;
  /**
   * @var int
   */
  public $type = null;
  /**
   * @var \ChatRoomAnnouncementContents
   */
  public $contents = null;
  /**
   * @var string
   */
  public $creatorMid = null;
  /**
   * @var int
   */
  public $createdTime = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['announcementSeq'])) {
        $this->announcementSeq = $vals['announcementSeq'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['contents'])) {
        $this->contents = $vals['contents'];
      }
      if (isset($vals['creatorMid'])) {
        $this->creatorMid = $vals['creatorMid'];
      }
      if (isset($vals['createdTime'])) {
        $this->createdTime = $vals['createdTime'];
      }
    }
  }

  public function getName() {
    return 'ChatRoomAnnouncement';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->announcementSeq);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->contents = new \ChatRoomAnnouncementContents();
            $xfer += $this->contents->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->creatorMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->createdTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ChatRoomAnnouncement');
    if ($this->announcementSeq !== null) {
      $xfer += $output->writeFieldBegin('announcementSeq', TType::I64, 1);
      $xfer += $output->writeI64($this->announcementSeq);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 2);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contents !== null) {
      if (!is_object($this->contents)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('contents', TType::STRUCT, 3);
      $xfer += $this->contents->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creatorMid !== null) {
      $xfer += $output->writeFieldBegin('creatorMid', TType::STRING, 4);
      $xfer += $output->writeString($this->creatorMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createdTime !== null) {
      $xfer += $output->writeFieldBegin('createdTime', TType::I64, 5);
      $xfer += $output->writeI64($this->createdTime);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ErrorExtraInfo {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'preconditionFailedExtraInfo',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $preconditionFailedExtraInfo = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['preconditionFailedExtraInfo'])) {
        $this->preconditionFailedExtraInfo = $vals['preconditionFailedExtraInfo'];
      }
    }
  }

  public function getName() {
    return 'ErrorExtraInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->preconditionFailedExtraInfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ErrorExtraInfo');
    if ($this->preconditionFailedExtraInfo !== null) {
      $xfer += $output->writeFieldBegin('preconditionFailedExtraInfo', TType::I32, 1);
      $xfer += $output->writeI32($this->preconditionFailedExtraInfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SyncRelations {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'syncAll',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    2 => array(
      'var' => 'syncParamContact',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\SyncParamContact',
        ),
      ),
    3 => array(
      'var' => 'syncParamMid',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\SyncParamMid',
        ),
      ),
    );

  /**
   * @var bool
   */
  public $syncAll = null;
  /**
   * @var \SyncParamContact[]
   */
  public $syncParamContact = null;
  /**
   * @var \SyncParamMid[]
   */
  public $syncParamMid = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['syncAll'])) {
        $this->syncAll = $vals['syncAll'];
      }
      if (isset($vals['syncParamContact'])) {
        $this->syncParamContact = $vals['syncParamContact'];
      }
      if (isset($vals['syncParamMid'])) {
        $this->syncParamMid = $vals['syncParamMid'];
      }
    }
  }

  public function getName() {
    return 'SyncRelations';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->syncAll);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->syncParamContact = array();
            $_size647 = 0;
            $_etype650 = 0;
            $xfer += $input->readListBegin($_etype650, $_size647);
            for ($_i651 = 0; $_i651 < $_size647; ++$_i651)
            {
              $elem652 = null;
              $elem652 = new \SyncParamContact();
              $xfer += $elem652->read($input);
              $this->syncParamContact []= $elem652;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->syncParamMid = array();
            $_size653 = 0;
            $_etype656 = 0;
            $xfer += $input->readListBegin($_etype656, $_size653);
            for ($_i657 = 0; $_i657 < $_size653; ++$_i657)
            {
              $elem658 = null;
              $elem658 = new \SyncParamMid();
              $xfer += $elem658->read($input);
              $this->syncParamMid []= $elem658;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SyncRelations');
    if ($this->syncAll !== null) {
      $xfer += $output->writeFieldBegin('syncAll', TType::BOOL, 1);
      $xfer += $output->writeBool($this->syncAll);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->syncParamContact !== null) {
      if (!is_array($this->syncParamContact)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('syncParamContact', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->syncParamContact));
        {
          foreach ($this->syncParamContact as $iter659)
          {
            $xfer += $iter659->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->syncParamMid !== null) {
      if (!is_array($this->syncParamMid)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('syncParamMid', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->syncParamMid));
        {
          foreach ($this->syncParamMid as $iter660)
          {
            $xfer += $iter660->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SyncScope {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'syncProfile',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    2 => array(
      'var' => 'syncSettings',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    3 => array(
      'var' => 'syncSticker',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    4 => array(
      'var' => 'syncThemeShop',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    10 => array(
      'var' => 'contact',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SyncRelations',
      ),
    11 => array(
      'var' => 'group',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SyncRelations',
      ),
    12 => array(
      'var' => 'room',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SyncRelations',
      ),
    13 => array(
      'var' => 'chat',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SyncRelations',
      ),
    );

  /**
   * @var bool
   */
  public $syncProfile = null;
  /**
   * @var bool
   */
  public $syncSettings = null;
  /**
   * @var bool
   */
  public $syncSticker = null;
  /**
   * @var bool
   */
  public $syncThemeShop = null;
  /**
   * @var \SyncRelations
   */
  public $contact = null;
  /**
   * @var \SyncRelations
   */
  public $group = null;
  /**
   * @var \SyncRelations
   */
  public $room = null;
  /**
   * @var \SyncRelations
   */
  public $chat = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['syncProfile'])) {
        $this->syncProfile = $vals['syncProfile'];
      }
      if (isset($vals['syncSettings'])) {
        $this->syncSettings = $vals['syncSettings'];
      }
      if (isset($vals['syncSticker'])) {
        $this->syncSticker = $vals['syncSticker'];
      }
      if (isset($vals['syncThemeShop'])) {
        $this->syncThemeShop = $vals['syncThemeShop'];
      }
      if (isset($vals['contact'])) {
        $this->contact = $vals['contact'];
      }
      if (isset($vals['group'])) {
        $this->group = $vals['group'];
      }
      if (isset($vals['room'])) {
        $this->room = $vals['room'];
      }
      if (isset($vals['chat'])) {
        $this->chat = $vals['chat'];
      }
    }
  }

  public function getName() {
    return 'SyncScope';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->syncProfile);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->syncSettings);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->syncSticker);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->syncThemeShop);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRUCT) {
            $this->contact = new \SyncRelations();
            $xfer += $this->contact->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRUCT) {
            $this->group = new \SyncRelations();
            $xfer += $this->group->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRUCT) {
            $this->room = new \SyncRelations();
            $xfer += $this->room->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRUCT) {
            $this->chat = new \SyncRelations();
            $xfer += $this->chat->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SyncScope');
    if ($this->syncProfile !== null) {
      $xfer += $output->writeFieldBegin('syncProfile', TType::BOOL, 1);
      $xfer += $output->writeBool($this->syncProfile);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->syncSettings !== null) {
      $xfer += $output->writeFieldBegin('syncSettings', TType::BOOL, 2);
      $xfer += $output->writeBool($this->syncSettings);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->syncSticker !== null) {
      $xfer += $output->writeFieldBegin('syncSticker', TType::BOOL, 3);
      $xfer += $output->writeBool($this->syncSticker);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->syncThemeShop !== null) {
      $xfer += $output->writeFieldBegin('syncThemeShop', TType::BOOL, 4);
      $xfer += $output->writeBool($this->syncThemeShop);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contact !== null) {
      if (!is_object($this->contact)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('contact', TType::STRUCT, 10);
      $xfer += $this->contact->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->group !== null) {
      if (!is_object($this->group)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('group', TType::STRUCT, 11);
      $xfer += $this->group->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->room !== null) {
      if (!is_object($this->room)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('room', TType::STRUCT, 12);
      $xfer += $this->room->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->chat !== null) {
      if (!is_object($this->chat)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('chat', TType::STRUCT, 13);
      $xfer += $this->chat->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class JoinSquareResponse {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'square',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Square',
      ),
    2 => array(
      'var' => 'squareAuthority',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareAuthority',
      ),
    3 => array(
      'var' => 'squareStatus',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareStatus',
      ),
    4 => array(
      'var' => 'squareMember',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareMember',
      ),
    5 => array(
      'var' => 'squareFeatureSet',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareFeatureSet',
      ),
    6 => array(
      'var' => 'noteStatus',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\NoteStatus',
      ),
    );

  /**
   * @var \Square
   */
  public $square = null;
  /**
   * @var \SquareAuthority
   */
  public $squareAuthority = null;
  /**
   * @var \SquareStatus
   */
  public $squareStatus = null;
  /**
   * @var \SquareMember
   */
  public $squareMember = null;
  /**
   * @var \SquareFeatureSet
   */
  public $squareFeatureSet = null;
  /**
   * @var \NoteStatus
   */
  public $noteStatus = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['square'])) {
        $this->square = $vals['square'];
      }
      if (isset($vals['squareAuthority'])) {
        $this->squareAuthority = $vals['squareAuthority'];
      }
      if (isset($vals['squareStatus'])) {
        $this->squareStatus = $vals['squareStatus'];
      }
      if (isset($vals['squareMember'])) {
        $this->squareMember = $vals['squareMember'];
      }
      if (isset($vals['squareFeatureSet'])) {
        $this->squareFeatureSet = $vals['squareFeatureSet'];
      }
      if (isset($vals['noteStatus'])) {
        $this->noteStatus = $vals['noteStatus'];
      }
    }
  }

  public function getName() {
    return 'JoinSquareResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->square = new \Square();
            $xfer += $this->square->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->squareAuthority = new \SquareAuthority();
            $xfer += $this->squareAuthority->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->squareStatus = new \SquareStatus();
            $xfer += $this->squareStatus->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->squareMember = new \SquareMember();
            $xfer += $this->squareMember->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->squareFeatureSet = new \SquareFeatureSet();
            $xfer += $this->squareFeatureSet->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->noteStatus = new \NoteStatus();
            $xfer += $this->noteStatus->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('JoinSquareResponse');
    if ($this->square !== null) {
      if (!is_object($this->square)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('square', TType::STRUCT, 1);
      $xfer += $this->square->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareAuthority !== null) {
      if (!is_object($this->squareAuthority)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squareAuthority', TType::STRUCT, 2);
      $xfer += $this->squareAuthority->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareStatus !== null) {
      if (!is_object($this->squareStatus)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squareStatus', TType::STRUCT, 3);
      $xfer += $this->squareStatus->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareMember !== null) {
      if (!is_object($this->squareMember)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squareMember', TType::STRUCT, 4);
      $xfer += $this->squareMember->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareFeatureSet !== null) {
      if (!is_object($this->squareFeatureSet)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squareFeatureSet', TType::STRUCT, 5);
      $xfer += $this->squareFeatureSet->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->noteStatus !== null) {
      if (!is_object($this->noteStatus)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('noteStatus', TType::STRUCT, 6);
      $xfer += $this->noteStatus->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class JoinSquareRequest {
  static $isValidate = false;

  static $_TSPEC = array(
    2 => array(
      'var' => 'squareMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'member',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareMember',
      ),
    );

  /**
   * @var string
   */
  public $squareMid = null;
  /**
   * @var \SquareMember
   */
  public $member = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['squareMid'])) {
        $this->squareMid = $vals['squareMid'];
      }
      if (isset($vals['member'])) {
        $this->member = $vals['member'];
      }
    }
  }

  public function getName() {
    return 'JoinSquareRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->member = new \SquareMember();
            $xfer += $this->member->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('JoinSquareRequest');
    if ($this->squareMid !== null) {
      $xfer += $output->writeFieldBegin('squareMid', TType::STRING, 2);
      $xfer += $output->writeString($this->squareMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->member !== null) {
      if (!is_object($this->member)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('member', TType::STRUCT, 3);
      $xfer += $this->member->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class JoinSquareChatResponse {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'squareChat',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareChat',
      ),
    2 => array(
      'var' => 'squareChatStatus',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareChatStatus',
      ),
    3 => array(
      'var' => 'squareChatMember',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareChatMember',
      ),
    );

  /**
   * @var \SquareChat
   */
  public $squareChat = null;
  /**
   * @var \SquareChatStatus
   */
  public $squareChatStatus = null;
  /**
   * @var \SquareChatMember
   */
  public $squareChatMember = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['squareChat'])) {
        $this->squareChat = $vals['squareChat'];
      }
      if (isset($vals['squareChatStatus'])) {
        $this->squareChatStatus = $vals['squareChatStatus'];
      }
      if (isset($vals['squareChatMember'])) {
        $this->squareChatMember = $vals['squareChatMember'];
      }
    }
  }

  public function getName() {
    return 'JoinSquareChatResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->squareChat = new \SquareChat();
            $xfer += $this->squareChat->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->squareChatStatus = new \SquareChatStatus();
            $xfer += $this->squareChatStatus->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->squareChatMember = new \SquareChatMember();
            $xfer += $this->squareChatMember->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('JoinSquareChatResponse');
    if ($this->squareChat !== null) {
      if (!is_object($this->squareChat)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squareChat', TType::STRUCT, 1);
      $xfer += $this->squareChat->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareChatStatus !== null) {
      if (!is_object($this->squareChatStatus)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squareChatStatus', TType::STRUCT, 2);
      $xfer += $this->squareChatStatus->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareChatMember !== null) {
      if (!is_object($this->squareChatMember)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squareChatMember', TType::STRUCT, 3);
      $xfer += $this->squareChatMember->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class JoinSquareChatRequest {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'squareChatMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $squareChatMid = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['squareChatMid'])) {
        $this->squareChatMid = $vals['squareChatMid'];
      }
    }
  }

  public function getName() {
    return 'JoinSquareChatRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareChatMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('JoinSquareChatRequest');
    if ($this->squareChatMid !== null) {
      $xfer += $output->writeFieldBegin('squareChatMid', TType::STRING, 1);
      $xfer += $output->writeString($this->squareChatMid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SendMessageResponse {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'createdSquareMessage',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareMessage',
      ),
    );

  /**
   * @var \SquareMessage
   */
  public $createdSquareMessage = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['createdSquareMessage'])) {
        $this->createdSquareMessage = $vals['createdSquareMessage'];
      }
    }
  }

  public function getName() {
    return 'SendMessageResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->createdSquareMessage = new \SquareMessage();
            $xfer += $this->createdSquareMessage->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SendMessageResponse');
    if ($this->createdSquareMessage !== null) {
      if (!is_object($this->createdSquareMessage)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('createdSquareMessage', TType::STRUCT, 1);
      $xfer += $this->createdSquareMessage->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SendMessageRequest {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'reqSeq',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'squareChatMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'squareMessage',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareMessage',
      ),
    );

  /**
   * @var int
   */
  public $reqSeq = null;
  /**
   * @var string
   */
  public $squareChatMid = null;
  /**
   * @var \SquareMessage
   */
  public $squareMessage = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['reqSeq'])) {
        $this->reqSeq = $vals['reqSeq'];
      }
      if (isset($vals['squareChatMid'])) {
        $this->squareChatMid = $vals['squareChatMid'];
      }
      if (isset($vals['squareMessage'])) {
        $this->squareMessage = $vals['squareMessage'];
      }
    }
  }

  public function getName() {
    return 'SendMessageRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->reqSeq);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareChatMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->squareMessage = new \SquareMessage();
            $xfer += $this->squareMessage->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SendMessageRequest');
    if ($this->reqSeq !== null) {
      $xfer += $output->writeFieldBegin('reqSeq', TType::I32, 1);
      $xfer += $output->writeI32($this->reqSeq);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareChatMid !== null) {
      $xfer += $output->writeFieldBegin('squareChatMid', TType::STRING, 2);
      $xfer += $output->writeString($this->squareChatMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareMessage !== null) {
      if (!is_object($this->squareMessage)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squareMessage', TType::STRUCT, 3);
      $xfer += $this->squareMessage->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MarkAsReadRequest {
  static $isValidate = false;

  static $_TSPEC = array(
    2 => array(
      'var' => 'squareChatMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'messageId',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $squareChatMid = null;
  /**
   * @var string
   */
  public $messageId = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['squareChatMid'])) {
        $this->squareChatMid = $vals['squareChatMid'];
      }
      if (isset($vals['messageId'])) {
        $this->messageId = $vals['messageId'];
      }
    }
  }

  public function getName() {
    return 'MarkAsReadRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareChatMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->messageId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MarkAsReadRequest');
    if ($this->squareChatMid !== null) {
      $xfer += $output->writeFieldBegin('squareChatMid', TType::STRING, 2);
      $xfer += $output->writeString($this->squareChatMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->messageId !== null) {
      $xfer += $output->writeFieldBegin('messageId', TType::STRING, 4);
      $xfer += $output->writeString($this->messageId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MarkAsReadResponse {
  static $isValidate = false;

  static $_TSPEC = array(
    );


  public function __construct() {
  }

  public function getName() {
    return 'MarkAsReadResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MarkAsReadResponse');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SubscriptionState {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'subscriptionId',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    2 => array(
      'var' => 'ttlMillis',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    );

  /**
   * @var int
   */
  public $subscriptionId = null;
  /**
   * @var int
   */
  public $ttlMillis = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['subscriptionId'])) {
        $this->subscriptionId = $vals['subscriptionId'];
      }
      if (isset($vals['ttlMillis'])) {
        $this->ttlMillis = $vals['ttlMillis'];
      }
    }
  }

  public function getName() {
    return 'SubscriptionState';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->subscriptionId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->ttlMillis);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SubscriptionState');
    if ($this->subscriptionId !== null) {
      $xfer += $output->writeFieldBegin('subscriptionId', TType::I64, 1);
      $xfer += $output->writeI64($this->subscriptionId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ttlMillis !== null) {
      $xfer += $output->writeFieldBegin('ttlMillis', TType::I64, 2);
      $xfer += $output->writeI64($this->ttlMillis);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ApproveSquareMembersResponse {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'approvedMembers',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\SquareMember',
        ),
      ),
    2 => array(
      'var' => 'status',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareStatus',
      ),
    );

  /**
   * @var \SquareMember[]
   */
  public $approvedMembers = null;
  /**
   * @var \SquareStatus
   */
  public $status = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['approvedMembers'])) {
        $this->approvedMembers = $vals['approvedMembers'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
    }
  }

  public function getName() {
    return 'ApproveSquareMembersResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->approvedMembers = array();
            $_size661 = 0;
            $_etype664 = 0;
            $xfer += $input->readListBegin($_etype664, $_size661);
            for ($_i665 = 0; $_i665 < $_size661; ++$_i665)
            {
              $elem666 = null;
              $elem666 = new \SquareMember();
              $xfer += $elem666->read($input);
              $this->approvedMembers []= $elem666;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->status = new \SquareStatus();
            $xfer += $this->status->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ApproveSquareMembersResponse');
    if ($this->approvedMembers !== null) {
      if (!is_array($this->approvedMembers)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('approvedMembers', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->approvedMembers));
        {
          foreach ($this->approvedMembers as $iter667)
          {
            $xfer += $iter667->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      if (!is_object($this->status)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('status', TType::STRUCT, 2);
      $xfer += $this->status->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ApproveSquareMembersRequest {
  static $isValidate = false;

  static $_TSPEC = array(
    2 => array(
      'var' => 'squareMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'requestedMemberMids',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRING,
      'elem' => array(
        'type' => TType::STRING,
        ),
      ),
    );

  /**
   * @var string
   */
  public $squareMid = null;
  /**
   * @var string[]
   */
  public $requestedMemberMids = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['squareMid'])) {
        $this->squareMid = $vals['squareMid'];
      }
      if (isset($vals['requestedMemberMids'])) {
        $this->requestedMemberMids = $vals['requestedMemberMids'];
      }
    }
  }

  public function getName() {
    return 'ApproveSquareMembersRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->requestedMemberMids = array();
            $_size668 = 0;
            $_etype671 = 0;
            $xfer += $input->readListBegin($_etype671, $_size668);
            for ($_i672 = 0; $_i672 < $_size668; ++$_i672)
            {
              $elem673 = null;
              $xfer += $input->readString($elem673);
              $this->requestedMemberMids []= $elem673;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ApproveSquareMembersRequest');
    if ($this->squareMid !== null) {
      $xfer += $output->writeFieldBegin('squareMid', TType::STRING, 2);
      $xfer += $output->writeString($this->squareMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->requestedMemberMids !== null) {
      if (!is_array($this->requestedMemberMids)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('requestedMemberMids', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRING, count($this->requestedMemberMids));
        {
          foreach ($this->requestedMemberMids as $iter674)
          {
            $xfer += $output->writeString($iter674);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CreateSquareChatResponse {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'squareChat',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareChat',
      ),
    2 => array(
      'var' => 'squareChatStatus',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareChatStatus',
      ),
    3 => array(
      'var' => 'squareChatMember',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareChatMember',
      ),
    );

  /**
   * @var \SquareChat
   */
  public $squareChat = null;
  /**
   * @var \SquareChatStatus
   */
  public $squareChatStatus = null;
  /**
   * @var \SquareChatMember
   */
  public $squareChatMember = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['squareChat'])) {
        $this->squareChat = $vals['squareChat'];
      }
      if (isset($vals['squareChatStatus'])) {
        $this->squareChatStatus = $vals['squareChatStatus'];
      }
      if (isset($vals['squareChatMember'])) {
        $this->squareChatMember = $vals['squareChatMember'];
      }
    }
  }

  public function getName() {
    return 'CreateSquareChatResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->squareChat = new \SquareChat();
            $xfer += $this->squareChat->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->squareChatStatus = new \SquareChatStatus();
            $xfer += $this->squareChatStatus->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->squareChatMember = new \SquareChatMember();
            $xfer += $this->squareChatMember->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CreateSquareChatResponse');
    if ($this->squareChat !== null) {
      if (!is_object($this->squareChat)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squareChat', TType::STRUCT, 1);
      $xfer += $this->squareChat->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareChatStatus !== null) {
      if (!is_object($this->squareChatStatus)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squareChatStatus', TType::STRUCT, 2);
      $xfer += $this->squareChatStatus->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareChatMember !== null) {
      if (!is_object($this->squareChatMember)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squareChatMember', TType::STRUCT, 3);
      $xfer += $this->squareChatMember->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CreateSquareChatRequest {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'reqSeq',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'squareChat',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareChat',
      ),
    3 => array(
      'var' => 'squareMemberMids',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRING,
      'elem' => array(
        'type' => TType::STRING,
        ),
      ),
    );

  /**
   * @var int
   */
  public $reqSeq = null;
  /**
   * @var \SquareChat
   */
  public $squareChat = null;
  /**
   * @var string[]
   */
  public $squareMemberMids = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['reqSeq'])) {
        $this->reqSeq = $vals['reqSeq'];
      }
      if (isset($vals['squareChat'])) {
        $this->squareChat = $vals['squareChat'];
      }
      if (isset($vals['squareMemberMids'])) {
        $this->squareMemberMids = $vals['squareMemberMids'];
      }
    }
  }

  public function getName() {
    return 'CreateSquareChatRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->reqSeq);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->squareChat = new \SquareChat();
            $xfer += $this->squareChat->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->squareMemberMids = array();
            $_size675 = 0;
            $_etype678 = 0;
            $xfer += $input->readListBegin($_etype678, $_size675);
            for ($_i679 = 0; $_i679 < $_size675; ++$_i679)
            {
              $elem680 = null;
              $xfer += $input->readString($elem680);
              $this->squareMemberMids []= $elem680;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CreateSquareChatRequest');
    if ($this->reqSeq !== null) {
      $xfer += $output->writeFieldBegin('reqSeq', TType::I32, 1);
      $xfer += $output->writeI32($this->reqSeq);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareChat !== null) {
      if (!is_object($this->squareChat)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squareChat', TType::STRUCT, 2);
      $xfer += $this->squareChat->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareMemberMids !== null) {
      if (!is_array($this->squareMemberMids)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squareMemberMids', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRING, count($this->squareMemberMids));
        {
          foreach ($this->squareMemberMids as $iter681)
          {
            $xfer += $output->writeString($iter681);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CreateSquareResponse {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'square',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Square',
      ),
    2 => array(
      'var' => 'creator',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareMember',
      ),
    3 => array(
      'var' => 'authority',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareAuthority',
      ),
    4 => array(
      'var' => 'status',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareStatus',
      ),
    );

  /**
   * @var \Square
   */
  public $square = null;
  /**
   * @var \SquareMember
   */
  public $creator = null;
  /**
   * @var \SquareAuthority
   */
  public $authority = null;
  /**
   * @var \SquareStatus
   */
  public $status = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['square'])) {
        $this->square = $vals['square'];
      }
      if (isset($vals['creator'])) {
        $this->creator = $vals['creator'];
      }
      if (isset($vals['authority'])) {
        $this->authority = $vals['authority'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
    }
  }

  public function getName() {
    return 'CreateSquareResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->square = new \Square();
            $xfer += $this->square->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->creator = new \SquareMember();
            $xfer += $this->creator->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->authority = new \SquareAuthority();
            $xfer += $this->authority->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->status = new \SquareStatus();
            $xfer += $this->status->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CreateSquareResponse');
    if ($this->square !== null) {
      if (!is_object($this->square)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('square', TType::STRUCT, 1);
      $xfer += $this->square->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creator !== null) {
      if (!is_object($this->creator)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creator', TType::STRUCT, 2);
      $xfer += $this->creator->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authority !== null) {
      if (!is_object($this->authority)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authority', TType::STRUCT, 3);
      $xfer += $this->authority->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      if (!is_object($this->status)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('status', TType::STRUCT, 4);
      $xfer += $this->status->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CreateSquareRequest {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'reqSeq',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'square',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Square',
      ),
    3 => array(
      'var' => 'creator',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareMember',
      ),
    );

  /**
   * @var int
   */
  public $reqSeq = null;
  /**
   * @var \Square
   */
  public $square = null;
  /**
   * @var \SquareMember
   */
  public $creator = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['reqSeq'])) {
        $this->reqSeq = $vals['reqSeq'];
      }
      if (isset($vals['square'])) {
        $this->square = $vals['square'];
      }
      if (isset($vals['creator'])) {
        $this->creator = $vals['creator'];
      }
    }
  }

  public function getName() {
    return 'CreateSquareRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->reqSeq);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->square = new \Square();
            $xfer += $this->square->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creator = new \SquareMember();
            $xfer += $this->creator->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CreateSquareRequest');
    if ($this->reqSeq !== null) {
      $xfer += $output->writeFieldBegin('reqSeq', TType::I32, 1);
      $xfer += $output->writeI32($this->reqSeq);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->square !== null) {
      if (!is_object($this->square)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('square', TType::STRUCT, 2);
      $xfer += $this->square->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creator !== null) {
      if (!is_object($this->creator)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creator', TType::STRUCT, 3);
      $xfer += $this->creator->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DeleteSquareResponse {
  static $isValidate = false;

  static $_TSPEC = array(
    );


  public function __construct() {
  }

  public function getName() {
    return 'DeleteSquareResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DeleteSquareResponse');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DeleteSquareRequest {
  static $isValidate = false;

  static $_TSPEC = array(
    2 => array(
      'var' => 'mid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'revision',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    );

  /**
   * @var string
   */
  public $mid = null;
  /**
   * @var int
   */
  public $revision = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['mid'])) {
        $this->mid = $vals['mid'];
      }
      if (isset($vals['revision'])) {
        $this->revision = $vals['revision'];
      }
    }
  }

  public function getName() {
    return 'DeleteSquareRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->revision);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DeleteSquareRequest');
    if ($this->mid !== null) {
      $xfer += $output->writeFieldBegin('mid', TType::STRING, 2);
      $xfer += $output->writeString($this->mid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->revision !== null) {
      $xfer += $output->writeFieldBegin('revision', TType::I64, 3);
      $xfer += $output->writeI64($this->revision);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DestroyMessageResponse {
  static $isValidate = false;

  static $_TSPEC = array(
    );


  public function __construct() {
  }

  public function getName() {
    return 'DestroyMessageResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DestroyMessageResponse');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DestroyMessageRequest {
  static $isValidate = false;

  static $_TSPEC = array(
    2 => array(
      'var' => 'squareChatMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'messageId',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $squareChatMid = null;
  /**
   * @var string
   */
  public $messageId = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['squareChatMid'])) {
        $this->squareChatMid = $vals['squareChatMid'];
      }
      if (isset($vals['messageId'])) {
        $this->messageId = $vals['messageId'];
      }
    }
  }

  public function getName() {
    return 'DestroyMessageRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareChatMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->messageId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DestroyMessageRequest');
    if ($this->squareChatMid !== null) {
      $xfer += $output->writeFieldBegin('squareChatMid', TType::STRING, 2);
      $xfer += $output->writeString($this->squareChatMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->messageId !== null) {
      $xfer += $output->writeFieldBegin('messageId', TType::STRING, 4);
      $xfer += $output->writeString($this->messageId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetSquareChatMembersRequest {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'squareChatMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'continuationToken',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'limit',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var string
   */
  public $squareChatMid = null;
  /**
   * @var string
   */
  public $continuationToken = null;
  /**
   * @var int
   */
  public $limit = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['squareChatMid'])) {
        $this->squareChatMid = $vals['squareChatMid'];
      }
      if (isset($vals['continuationToken'])) {
        $this->continuationToken = $vals['continuationToken'];
      }
      if (isset($vals['limit'])) {
        $this->limit = $vals['limit'];
      }
    }
  }

  public function getName() {
    return 'GetSquareChatMembersRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareChatMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->continuationToken);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->limit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetSquareChatMembersRequest');
    if ($this->squareChatMid !== null) {
      $xfer += $output->writeFieldBegin('squareChatMid', TType::STRING, 1);
      $xfer += $output->writeString($this->squareChatMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->continuationToken !== null) {
      $xfer += $output->writeFieldBegin('continuationToken', TType::STRING, 2);
      $xfer += $output->writeString($this->continuationToken);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->limit !== null) {
      $xfer += $output->writeFieldBegin('limit', TType::I32, 3);
      $xfer += $output->writeI32($this->limit);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetSquareChatMembersResponse {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'squareChatMembers',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareMember',
      ),
    2 => array(
      'var' => 'continuationToken',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var \SquareMember
   */
  public $squareChatMembers = null;
  /**
   * @var string
   */
  public $continuationToken = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['squareChatMembers'])) {
        $this->squareChatMembers = $vals['squareChatMembers'];
      }
      if (isset($vals['continuationToken'])) {
        $this->continuationToken = $vals['continuationToken'];
      }
    }
  }

  public function getName() {
    return 'GetSquareChatMembersResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->squareChatMembers = new \SquareMember();
            $xfer += $this->squareChatMembers->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->continuationToken);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetSquareChatMembersResponse');
    if ($this->squareChatMembers !== null) {
      if (!is_object($this->squareChatMembers)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squareChatMembers', TType::STRUCT, 1);
      $xfer += $this->squareChatMembers->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->continuationToken !== null) {
      $xfer += $output->writeFieldBegin('continuationToken', TType::STRING, 2);
      $xfer += $output->writeString($this->continuationToken);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetSquareChatStatusRequest {
  static $isValidate = false;

  static $_TSPEC = array(
    2 => array(
      'var' => 'squareChatMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $squareChatMid = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['squareChatMid'])) {
        $this->squareChatMid = $vals['squareChatMid'];
      }
    }
  }

  public function getName() {
    return 'GetSquareChatStatusRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareChatMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetSquareChatStatusRequest');
    if ($this->squareChatMid !== null) {
      $xfer += $output->writeFieldBegin('squareChatMid', TType::STRING, 2);
      $xfer += $output->writeString($this->squareChatMid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetSquareChatStatusResponse {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'chatStatus',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareChatStatus',
      ),
    );

  /**
   * @var \SquareChatStatus
   */
  public $chatStatus = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['chatStatus'])) {
        $this->chatStatus = $vals['chatStatus'];
      }
    }
  }

  public function getName() {
    return 'GetSquareChatStatusResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->chatStatus = new \SquareChatStatus();
            $xfer += $this->chatStatus->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetSquareChatStatusResponse');
    if ($this->chatStatus !== null) {
      if (!is_object($this->chatStatus)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('chatStatus', TType::STRUCT, 1);
      $xfer += $this->chatStatus->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetSquareChatRequest {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'squareChatMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $squareChatMid = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['squareChatMid'])) {
        $this->squareChatMid = $vals['squareChatMid'];
      }
    }
  }

  public function getName() {
    return 'GetSquareChatRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareChatMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetSquareChatRequest');
    if ($this->squareChatMid !== null) {
      $xfer += $output->writeFieldBegin('squareChatMid', TType::STRING, 1);
      $xfer += $output->writeString($this->squareChatMid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetSquareChatResponse {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'squareChat',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareChat',
      ),
    2 => array(
      'var' => 'squareChatMember',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareChatMember',
      ),
    3 => array(
      'var' => 'squareChatStatus',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareChatStatus',
      ),
    );

  /**
   * @var \SquareChat
   */
  public $squareChat = null;
  /**
   * @var \SquareChatMember
   */
  public $squareChatMember = null;
  /**
   * @var \SquareChatStatus
   */
  public $squareChatStatus = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['squareChat'])) {
        $this->squareChat = $vals['squareChat'];
      }
      if (isset($vals['squareChatMember'])) {
        $this->squareChatMember = $vals['squareChatMember'];
      }
      if (isset($vals['squareChatStatus'])) {
        $this->squareChatStatus = $vals['squareChatStatus'];
      }
    }
  }

  public function getName() {
    return 'GetSquareChatResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->squareChat = new \SquareChat();
            $xfer += $this->squareChat->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->squareChatMember = new \SquareChatMember();
            $xfer += $this->squareChatMember->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->squareChatStatus = new \SquareChatStatus();
            $xfer += $this->squareChatStatus->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetSquareChatResponse');
    if ($this->squareChat !== null) {
      if (!is_object($this->squareChat)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squareChat', TType::STRUCT, 1);
      $xfer += $this->squareChat->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareChatMember !== null) {
      if (!is_object($this->squareChatMember)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squareChatMember', TType::STRUCT, 2);
      $xfer += $this->squareChatMember->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareChatStatus !== null) {
      if (!is_object($this->squareChatStatus)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squareChatStatus', TType::STRUCT, 3);
      $xfer += $this->squareChatStatus->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetSquareAuthorityRequest {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'squareMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $squareMid = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['squareMid'])) {
        $this->squareMid = $vals['squareMid'];
      }
    }
  }

  public function getName() {
    return 'GetSquareAuthorityRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetSquareAuthorityRequest');
    if ($this->squareMid !== null) {
      $xfer += $output->writeFieldBegin('squareMid', TType::STRING, 1);
      $xfer += $output->writeString($this->squareMid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetSquareAuthorityResponse {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'authority',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareAuthority',
      ),
    );

  /**
   * @var \SquareAuthority
   */
  public $authority = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['authority'])) {
        $this->authority = $vals['authority'];
      }
    }
  }

  public function getName() {
    return 'GetSquareAuthorityResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->authority = new \SquareAuthority();
            $xfer += $this->authority->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetSquareAuthorityResponse');
    if ($this->authority !== null) {
      if (!is_object($this->authority)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authority', TType::STRUCT, 1);
      $xfer += $this->authority->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetJoinedSquaresRequest {
  static $isValidate = false;

  static $_TSPEC = array(
    2 => array(
      'var' => 'continuationToken',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'limit',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var string
   */
  public $continuationToken = null;
  /**
   * @var int
   */
  public $limit = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['continuationToken'])) {
        $this->continuationToken = $vals['continuationToken'];
      }
      if (isset($vals['limit'])) {
        $this->limit = $vals['limit'];
      }
    }
  }

  public function getName() {
    return 'GetJoinedSquaresRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->continuationToken);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->limit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetJoinedSquaresRequest');
    if ($this->continuationToken !== null) {
      $xfer += $output->writeFieldBegin('continuationToken', TType::STRING, 2);
      $xfer += $output->writeString($this->continuationToken);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->limit !== null) {
      $xfer += $output->writeFieldBegin('limit', TType::I32, 3);
      $xfer += $output->writeI32($this->limit);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetJoinedSquaresResponse {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'squares',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\Square',
        ),
      ),
    2 => array(
      'var' => 'members',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRUCT,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRUCT,
        'class' => '\SquareMember',
        ),
      ),
    3 => array(
      'var' => 'authorities',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRUCT,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRUCT,
        'class' => '\SquareAuthority',
        ),
      ),
    4 => array(
      'var' => 'statuses',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRUCT,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRUCT,
        'class' => '\SquareStatus',
        ),
      ),
    5 => array(
      'var' => 'continuationToken',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'noteStatuses',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRUCT,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRUCT,
        'class' => '\NoteStatus',
        ),
      ),
    );

  /**
   * @var \Square[]
   */
  public $squares = null;
  /**
   * @var array
   */
  public $members = null;
  /**
   * @var array
   */
  public $authorities = null;
  /**
   * @var array
   */
  public $statuses = null;
  /**
   * @var string
   */
  public $continuationToken = null;
  /**
   * @var array
   */
  public $noteStatuses = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['squares'])) {
        $this->squares = $vals['squares'];
      }
      if (isset($vals['members'])) {
        $this->members = $vals['members'];
      }
      if (isset($vals['authorities'])) {
        $this->authorities = $vals['authorities'];
      }
      if (isset($vals['statuses'])) {
        $this->statuses = $vals['statuses'];
      }
      if (isset($vals['continuationToken'])) {
        $this->continuationToken = $vals['continuationToken'];
      }
      if (isset($vals['noteStatuses'])) {
        $this->noteStatuses = $vals['noteStatuses'];
      }
    }
  }

  public function getName() {
    return 'GetJoinedSquaresResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->squares = array();
            $_size682 = 0;
            $_etype685 = 0;
            $xfer += $input->readListBegin($_etype685, $_size682);
            for ($_i686 = 0; $_i686 < $_size682; ++$_i686)
            {
              $elem687 = null;
              $elem687 = new \Square();
              $xfer += $elem687->read($input);
              $this->squares []= $elem687;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::MAP) {
            $this->members = array();
            $_size688 = 0;
            $_ktype689 = 0;
            $_vtype690 = 0;
            $xfer += $input->readMapBegin($_ktype689, $_vtype690, $_size688);
            for ($_i692 = 0; $_i692 < $_size688; ++$_i692)
            {
              $key693 = '';
              $val694 = new \SquareMember();
              $xfer += $input->readString($key693);
              $val694 = new \SquareMember();
              $xfer += $val694->read($input);
              $this->members[$key693] = $val694;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::MAP) {
            $this->authorities = array();
            $_size695 = 0;
            $_ktype696 = 0;
            $_vtype697 = 0;
            $xfer += $input->readMapBegin($_ktype696, $_vtype697, $_size695);
            for ($_i699 = 0; $_i699 < $_size695; ++$_i699)
            {
              $key700 = '';
              $val701 = new \SquareAuthority();
              $xfer += $input->readString($key700);
              $val701 = new \SquareAuthority();
              $xfer += $val701->read($input);
              $this->authorities[$key700] = $val701;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::MAP) {
            $this->statuses = array();
            $_size702 = 0;
            $_ktype703 = 0;
            $_vtype704 = 0;
            $xfer += $input->readMapBegin($_ktype703, $_vtype704, $_size702);
            for ($_i706 = 0; $_i706 < $_size702; ++$_i706)
            {
              $key707 = '';
              $val708 = new \SquareStatus();
              $xfer += $input->readString($key707);
              $val708 = new \SquareStatus();
              $xfer += $val708->read($input);
              $this->statuses[$key707] = $val708;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->continuationToken);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::MAP) {
            $this->noteStatuses = array();
            $_size709 = 0;
            $_ktype710 = 0;
            $_vtype711 = 0;
            $xfer += $input->readMapBegin($_ktype710, $_vtype711, $_size709);
            for ($_i713 = 0; $_i713 < $_size709; ++$_i713)
            {
              $key714 = '';
              $val715 = new \NoteStatus();
              $xfer += $input->readString($key714);
              $val715 = new \NoteStatus();
              $xfer += $val715->read($input);
              $this->noteStatuses[$key714] = $val715;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetJoinedSquaresResponse');
    if ($this->squares !== null) {
      if (!is_array($this->squares)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squares', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->squares));
        {
          foreach ($this->squares as $iter716)
          {
            $xfer += $iter716->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->members !== null) {
      if (!is_array($this->members)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('members', TType::MAP, 2);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->members));
        {
          foreach ($this->members as $kiter717 => $viter718)
          {
            $xfer += $output->writeString($kiter717);
            $xfer += $viter718->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authorities !== null) {
      if (!is_array($this->authorities)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authorities', TType::MAP, 3);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->authorities));
        {
          foreach ($this->authorities as $kiter719 => $viter720)
          {
            $xfer += $output->writeString($kiter719);
            $xfer += $viter720->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->statuses !== null) {
      if (!is_array($this->statuses)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('statuses', TType::MAP, 4);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->statuses));
        {
          foreach ($this->statuses as $kiter721 => $viter722)
          {
            $xfer += $output->writeString($kiter721);
            $xfer += $viter722->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->continuationToken !== null) {
      $xfer += $output->writeFieldBegin('continuationToken', TType::STRING, 5);
      $xfer += $output->writeString($this->continuationToken);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->noteStatuses !== null) {
      if (!is_array($this->noteStatuses)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('noteStatuses', TType::MAP, 6);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->noteStatuses));
        {
          foreach ($this->noteStatuses as $kiter723 => $viter724)
          {
            $xfer += $output->writeString($kiter723);
            $xfer += $viter724->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetJoinableSquareChatsRequest {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'squareMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    10 => array(
      'var' => 'continuationToken',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    11 => array(
      'var' => 'limit',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var string
   */
  public $squareMid = null;
  /**
   * @var string
   */
  public $continuationToken = null;
  /**
   * @var int
   */
  public $limit = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['squareMid'])) {
        $this->squareMid = $vals['squareMid'];
      }
      if (isset($vals['continuationToken'])) {
        $this->continuationToken = $vals['continuationToken'];
      }
      if (isset($vals['limit'])) {
        $this->limit = $vals['limit'];
      }
    }
  }

  public function getName() {
    return 'GetJoinableSquareChatsRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->continuationToken);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->limit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetJoinableSquareChatsRequest');
    if ($this->squareMid !== null) {
      $xfer += $output->writeFieldBegin('squareMid', TType::STRING, 1);
      $xfer += $output->writeString($this->squareMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->continuationToken !== null) {
      $xfer += $output->writeFieldBegin('continuationToken', TType::STRING, 10);
      $xfer += $output->writeString($this->continuationToken);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->limit !== null) {
      $xfer += $output->writeFieldBegin('limit', TType::I32, 11);
      $xfer += $output->writeI32($this->limit);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetJoinableSquareChatsResponse {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'squareChats',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\SquareChat',
        ),
      ),
    2 => array(
      'var' => 'continuationToken',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'totalSquareChatCount',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    4 => array(
      'var' => 'squareChatStatuses',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRUCT,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRUCT,
        'class' => '\SquareChatStatus',
        ),
      ),
    );

  /**
   * @var \SquareChat[]
   */
  public $squareChats = null;
  /**
   * @var string
   */
  public $continuationToken = null;
  /**
   * @var int
   */
  public $totalSquareChatCount = null;
  /**
   * @var array
   */
  public $squareChatStatuses = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['squareChats'])) {
        $this->squareChats = $vals['squareChats'];
      }
      if (isset($vals['continuationToken'])) {
        $this->continuationToken = $vals['continuationToken'];
      }
      if (isset($vals['totalSquareChatCount'])) {
        $this->totalSquareChatCount = $vals['totalSquareChatCount'];
      }
      if (isset($vals['squareChatStatuses'])) {
        $this->squareChatStatuses = $vals['squareChatStatuses'];
      }
    }
  }

  public function getName() {
    return 'GetJoinableSquareChatsResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->squareChats = array();
            $_size725 = 0;
            $_etype728 = 0;
            $xfer += $input->readListBegin($_etype728, $_size725);
            for ($_i729 = 0; $_i729 < $_size725; ++$_i729)
            {
              $elem730 = null;
              $elem730 = new \SquareChat();
              $xfer += $elem730->read($input);
              $this->squareChats []= $elem730;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->continuationToken);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->totalSquareChatCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::MAP) {
            $this->squareChatStatuses = array();
            $_size731 = 0;
            $_ktype732 = 0;
            $_vtype733 = 0;
            $xfer += $input->readMapBegin($_ktype732, $_vtype733, $_size731);
            for ($_i735 = 0; $_i735 < $_size731; ++$_i735)
            {
              $key736 = '';
              $val737 = new \SquareChatStatus();
              $xfer += $input->readString($key736);
              $val737 = new \SquareChatStatus();
              $xfer += $val737->read($input);
              $this->squareChatStatuses[$key736] = $val737;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetJoinableSquareChatsResponse');
    if ($this->squareChats !== null) {
      if (!is_array($this->squareChats)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squareChats', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->squareChats));
        {
          foreach ($this->squareChats as $iter738)
          {
            $xfer += $iter738->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->continuationToken !== null) {
      $xfer += $output->writeFieldBegin('continuationToken', TType::STRING, 2);
      $xfer += $output->writeString($this->continuationToken);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->totalSquareChatCount !== null) {
      $xfer += $output->writeFieldBegin('totalSquareChatCount', TType::I32, 3);
      $xfer += $output->writeI32($this->totalSquareChatCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareChatStatuses !== null) {
      if (!is_array($this->squareChatStatuses)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squareChatStatuses', TType::MAP, 4);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->squareChatStatuses));
        {
          foreach ($this->squareChatStatuses as $kiter739 => $viter740)
          {
            $xfer += $output->writeString($kiter739);
            $xfer += $viter740->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetInvitationTicketUrlRequest {
  static $isValidate = false;

  static $_TSPEC = array(
    2 => array(
      'var' => 'mid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $mid = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['mid'])) {
        $this->mid = $vals['mid'];
      }
    }
  }

  public function getName() {
    return 'GetInvitationTicketUrlRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetInvitationTicketUrlRequest');
    if ($this->mid !== null) {
      $xfer += $output->writeFieldBegin('mid', TType::STRING, 2);
      $xfer += $output->writeString($this->mid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetInvitationTicketUrlResponse {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'invitationURL',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $invitationURL = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['invitationURL'])) {
        $this->invitationURL = $vals['invitationURL'];
      }
    }
  }

  public function getName() {
    return 'GetInvitationTicketUrlResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->invitationURL);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetInvitationTicketUrlResponse');
    if ($this->invitationURL !== null) {
      $xfer += $output->writeFieldBegin('invitationURL', TType::STRING, 1);
      $xfer += $output->writeString($this->invitationURL);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class LeaveSquareRequest {
  static $isValidate = false;

  static $_TSPEC = array(
    2 => array(
      'var' => 'squareMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $squareMid = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['squareMid'])) {
        $this->squareMid = $vals['squareMid'];
      }
    }
  }

  public function getName() {
    return 'LeaveSquareRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('LeaveSquareRequest');
    if ($this->squareMid !== null) {
      $xfer += $output->writeFieldBegin('squareMid', TType::STRING, 2);
      $xfer += $output->writeString($this->squareMid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class LeaveSquareResponse {
  static $isValidate = false;

  static $_TSPEC = array(
    );


  public function __construct() {
  }

  public function getName() {
    return 'LeaveSquareResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('LeaveSquareResponse');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class LeaveSquareChatRequest {
  static $isValidate = false;

  static $_TSPEC = array(
    2 => array(
      'var' => 'squareChatMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'sayGoodbye',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    4 => array(
      'var' => 'squareChatMemberRevision',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    );

  /**
   * @var string
   */
  public $squareChatMid = null;
  /**
   * @var bool
   */
  public $sayGoodbye = null;
  /**
   * @var int
   */
  public $squareChatMemberRevision = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['squareChatMid'])) {
        $this->squareChatMid = $vals['squareChatMid'];
      }
      if (isset($vals['sayGoodbye'])) {
        $this->sayGoodbye = $vals['sayGoodbye'];
      }
      if (isset($vals['squareChatMemberRevision'])) {
        $this->squareChatMemberRevision = $vals['squareChatMemberRevision'];
      }
    }
  }

  public function getName() {
    return 'LeaveSquareChatRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareChatMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->sayGoodbye);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->squareChatMemberRevision);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('LeaveSquareChatRequest');
    if ($this->squareChatMid !== null) {
      $xfer += $output->writeFieldBegin('squareChatMid', TType::STRING, 2);
      $xfer += $output->writeString($this->squareChatMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sayGoodbye !== null) {
      $xfer += $output->writeFieldBegin('sayGoodbye', TType::BOOL, 3);
      $xfer += $output->writeBool($this->sayGoodbye);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareChatMemberRevision !== null) {
      $xfer += $output->writeFieldBegin('squareChatMemberRevision', TType::I64, 4);
      $xfer += $output->writeI64($this->squareChatMemberRevision);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class LeaveSquareChatResponse {
  static $isValidate = false;

  static $_TSPEC = array(
    );


  public function __construct() {
  }

  public function getName() {
    return 'LeaveSquareChatResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('LeaveSquareChatResponse');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareMemberSearchOption {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'membershipState',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'memberRoles',
      'isRequired' => false,
      'type' => TType::SET,
      'etype' => TType::I32,
      'elem' => array(
        'type' => TType::I32,
        ),
      ),
    3 => array(
      'var' => 'displayName',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'ableToReceiveMessage',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    5 => array(
      'var' => 'ableToReceiveFriendRequest',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    6 => array(
      'var' => 'chatMidToExcludeMembers',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    7 => array(
      'var' => 'includingMe',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var int
   */
  public $membershipState = null;
  /**
   * @var int[]
   */
  public $memberRoles = null;
  /**
   * @var string
   */
  public $displayName = null;
  /**
   * @var int
   */
  public $ableToReceiveMessage = null;
  /**
   * @var int
   */
  public $ableToReceiveFriendRequest = null;
  /**
   * @var string
   */
  public $chatMidToExcludeMembers = null;
  /**
   * @var bool
   */
  public $includingMe = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['membershipState'])) {
        $this->membershipState = $vals['membershipState'];
      }
      if (isset($vals['memberRoles'])) {
        $this->memberRoles = $vals['memberRoles'];
      }
      if (isset($vals['displayName'])) {
        $this->displayName = $vals['displayName'];
      }
      if (isset($vals['ableToReceiveMessage'])) {
        $this->ableToReceiveMessage = $vals['ableToReceiveMessage'];
      }
      if (isset($vals['ableToReceiveFriendRequest'])) {
        $this->ableToReceiveFriendRequest = $vals['ableToReceiveFriendRequest'];
      }
      if (isset($vals['chatMidToExcludeMembers'])) {
        $this->chatMidToExcludeMembers = $vals['chatMidToExcludeMembers'];
      }
      if (isset($vals['includingMe'])) {
        $this->includingMe = $vals['includingMe'];
      }
    }
  }

  public function getName() {
    return 'SquareMemberSearchOption';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->membershipState);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::SET) {
            $this->memberRoles = array();
            $_size741 = 0;
            $_etype744 = 0;
            $xfer += $input->readSetBegin($_etype744, $_size741);
            for ($_i745 = 0; $_i745 < $_size741; ++$_i745)
            {
              $elem746 = null;
              $xfer += $input->readI32($elem746);
              $this->memberRoles[$elem746] = true;
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->displayName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ableToReceiveMessage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ableToReceiveFriendRequest);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->chatMidToExcludeMembers);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->includingMe);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareMemberSearchOption');
    if ($this->membershipState !== null) {
      $xfer += $output->writeFieldBegin('membershipState', TType::I32, 1);
      $xfer += $output->writeI32($this->membershipState);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->memberRoles !== null) {
      if (!is_array($this->memberRoles)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('memberRoles', TType::SET, 2);
      {
        $output->writeSetBegin(TType::I32, count($this->memberRoles));
        {
          foreach ($this->memberRoles as $iter747 => $iter748)
          {
            $xfer += $output->writeI32($iter747);
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->displayName !== null) {
      $xfer += $output->writeFieldBegin('displayName', TType::STRING, 3);
      $xfer += $output->writeString($this->displayName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ableToReceiveMessage !== null) {
      $xfer += $output->writeFieldBegin('ableToReceiveMessage', TType::I32, 4);
      $xfer += $output->writeI32($this->ableToReceiveMessage);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ableToReceiveFriendRequest !== null) {
      $xfer += $output->writeFieldBegin('ableToReceiveFriendRequest', TType::I32, 5);
      $xfer += $output->writeI32($this->ableToReceiveFriendRequest);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->chatMidToExcludeMembers !== null) {
      $xfer += $output->writeFieldBegin('chatMidToExcludeMembers', TType::STRING, 6);
      $xfer += $output->writeString($this->chatMidToExcludeMembers);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->includingMe !== null) {
      $xfer += $output->writeFieldBegin('includingMe', TType::BOOL, 7);
      $xfer += $output->writeBool($this->includingMe);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SearchSquareMembersRequest {
  static $isValidate = false;

  static $_TSPEC = array(
    2 => array(
      'var' => 'squareMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'searchOption',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareMemberSearchOption',
      ),
    4 => array(
      'var' => 'continuationToken',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'limit',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var string
   */
  public $squareMid = null;
  /**
   * @var \SquareMemberSearchOption
   */
  public $searchOption = null;
  /**
   * @var string
   */
  public $continuationToken = null;
  /**
   * @var int
   */
  public $limit = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['squareMid'])) {
        $this->squareMid = $vals['squareMid'];
      }
      if (isset($vals['searchOption'])) {
        $this->searchOption = $vals['searchOption'];
      }
      if (isset($vals['continuationToken'])) {
        $this->continuationToken = $vals['continuationToken'];
      }
      if (isset($vals['limit'])) {
        $this->limit = $vals['limit'];
      }
    }
  }

  public function getName() {
    return 'SearchSquareMembersRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->searchOption = new \SquareMemberSearchOption();
            $xfer += $this->searchOption->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->continuationToken);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->limit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SearchSquareMembersRequest');
    if ($this->squareMid !== null) {
      $xfer += $output->writeFieldBegin('squareMid', TType::STRING, 2);
      $xfer += $output->writeString($this->squareMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->searchOption !== null) {
      if (!is_object($this->searchOption)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('searchOption', TType::STRUCT, 3);
      $xfer += $this->searchOption->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->continuationToken !== null) {
      $xfer += $output->writeFieldBegin('continuationToken', TType::STRING, 4);
      $xfer += $output->writeString($this->continuationToken);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->limit !== null) {
      $xfer += $output->writeFieldBegin('limit', TType::I32, 5);
      $xfer += $output->writeI32($this->limit);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SearchSquareMembersResponse {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'members',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\SquareMember',
        ),
      ),
    2 => array(
      'var' => 'revision',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    3 => array(
      'var' => 'continuationToken',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'totalCount',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var \SquareMember[]
   */
  public $members = null;
  /**
   * @var int
   */
  public $revision = null;
  /**
   * @var string
   */
  public $continuationToken = null;
  /**
   * @var int
   */
  public $totalCount = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['members'])) {
        $this->members = $vals['members'];
      }
      if (isset($vals['revision'])) {
        $this->revision = $vals['revision'];
      }
      if (isset($vals['continuationToken'])) {
        $this->continuationToken = $vals['continuationToken'];
      }
      if (isset($vals['totalCount'])) {
        $this->totalCount = $vals['totalCount'];
      }
    }
  }

  public function getName() {
    return 'SearchSquareMembersResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->members = array();
            $_size749 = 0;
            $_etype752 = 0;
            $xfer += $input->readListBegin($_etype752, $_size749);
            for ($_i753 = 0; $_i753 < $_size749; ++$_i753)
            {
              $elem754 = null;
              $elem754 = new \SquareMember();
              $xfer += $elem754->read($input);
              $this->members []= $elem754;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->revision);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->continuationToken);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->totalCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SearchSquareMembersResponse');
    if ($this->members !== null) {
      if (!is_array($this->members)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('members', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->members));
        {
          foreach ($this->members as $iter755)
          {
            $xfer += $iter755->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->revision !== null) {
      $xfer += $output->writeFieldBegin('revision', TType::I64, 2);
      $xfer += $output->writeI64($this->revision);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->continuationToken !== null) {
      $xfer += $output->writeFieldBegin('continuationToken', TType::STRING, 3);
      $xfer += $output->writeString($this->continuationToken);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->totalCount !== null) {
      $xfer += $output->writeFieldBegin('totalCount', TType::I32, 4);
      $xfer += $output->writeI32($this->totalCount);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class FindSquareByInvitationTicketRequest {
  static $isValidate = false;

  static $_TSPEC = array(
    2 => array(
      'var' => 'invitationTicket',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $invitationTicket = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['invitationTicket'])) {
        $this->invitationTicket = $vals['invitationTicket'];
      }
    }
  }

  public function getName() {
    return 'FindSquareByInvitationTicketRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->invitationTicket);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FindSquareByInvitationTicketRequest');
    if ($this->invitationTicket !== null) {
      $xfer += $output->writeFieldBegin('invitationTicket', TType::STRING, 2);
      $xfer += $output->writeString($this->invitationTicket);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class FindSquareByInvitationTicketResponse {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'square',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Square',
      ),
    2 => array(
      'var' => 'myMembership',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareMember',
      ),
    3 => array(
      'var' => 'squareAuthority',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareAuthority',
      ),
    4 => array(
      'var' => 'squareStatus',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareStatus',
      ),
    );

  /**
   * @var \Square
   */
  public $square = null;
  /**
   * @var \SquareMember
   */
  public $myMembership = null;
  /**
   * @var \SquareAuthority
   */
  public $squareAuthority = null;
  /**
   * @var \SquareStatus
   */
  public $squareStatus = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['square'])) {
        $this->square = $vals['square'];
      }
      if (isset($vals['myMembership'])) {
        $this->myMembership = $vals['myMembership'];
      }
      if (isset($vals['squareAuthority'])) {
        $this->squareAuthority = $vals['squareAuthority'];
      }
      if (isset($vals['squareStatus'])) {
        $this->squareStatus = $vals['squareStatus'];
      }
    }
  }

  public function getName() {
    return 'FindSquareByInvitationTicketResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->square = new \Square();
            $xfer += $this->square->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->myMembership = new \SquareMember();
            $xfer += $this->myMembership->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->squareAuthority = new \SquareAuthority();
            $xfer += $this->squareAuthority->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->squareStatus = new \SquareStatus();
            $xfer += $this->squareStatus->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FindSquareByInvitationTicketResponse');
    if ($this->square !== null) {
      if (!is_object($this->square)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('square', TType::STRUCT, 1);
      $xfer += $this->square->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->myMembership !== null) {
      if (!is_object($this->myMembership)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('myMembership', TType::STRUCT, 2);
      $xfer += $this->myMembership->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareAuthority !== null) {
      if (!is_object($this->squareAuthority)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squareAuthority', TType::STRUCT, 3);
      $xfer += $this->squareAuthority->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareStatus !== null) {
      if (!is_object($this->squareStatus)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squareStatus', TType::STRUCT, 4);
      $xfer += $this->squareStatus->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareEventReceiveMessage {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'squareChatMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'squareMessage',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareMessage',
      ),
    );

  /**
   * @var string
   */
  public $squareChatMid = null;
  /**
   * @var \SquareMessage
   */
  public $squareMessage = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['squareChatMid'])) {
        $this->squareChatMid = $vals['squareChatMid'];
      }
      if (isset($vals['squareMessage'])) {
        $this->squareMessage = $vals['squareMessage'];
      }
    }
  }

  public function getName() {
    return 'SquareEventReceiveMessage';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareChatMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->squareMessage = new \SquareMessage();
            $xfer += $this->squareMessage->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareEventReceiveMessage');
    if ($this->squareChatMid !== null) {
      $xfer += $output->writeFieldBegin('squareChatMid', TType::STRING, 1);
      $xfer += $output->writeString($this->squareChatMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareMessage !== null) {
      if (!is_object($this->squareMessage)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squareMessage', TType::STRUCT, 2);
      $xfer += $this->squareMessage->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareEventSendMessage {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'squareChatMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'squareMessage',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareMessage',
      ),
    3 => array(
      'var' => 'reqSeq',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var string
   */
  public $squareChatMid = null;
  /**
   * @var \SquareMessage
   */
  public $squareMessage = null;
  /**
   * @var int
   */
  public $reqSeq = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['squareChatMid'])) {
        $this->squareChatMid = $vals['squareChatMid'];
      }
      if (isset($vals['squareMessage'])) {
        $this->squareMessage = $vals['squareMessage'];
      }
      if (isset($vals['reqSeq'])) {
        $this->reqSeq = $vals['reqSeq'];
      }
    }
  }

  public function getName() {
    return 'SquareEventSendMessage';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareChatMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->squareMessage = new \SquareMessage();
            $xfer += $this->squareMessage->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->reqSeq);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareEventSendMessage');
    if ($this->squareChatMid !== null) {
      $xfer += $output->writeFieldBegin('squareChatMid', TType::STRING, 1);
      $xfer += $output->writeString($this->squareChatMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareMessage !== null) {
      if (!is_object($this->squareMessage)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squareMessage', TType::STRUCT, 2);
      $xfer += $this->squareMessage->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reqSeq !== null) {
      $xfer += $output->writeFieldBegin('reqSeq', TType::I32, 3);
      $xfer += $output->writeI32($this->reqSeq);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareEventNotifiedJoinSquareChat {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'squareChatMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'joinedMember',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareMember',
      ),
    );

  /**
   * @var string
   */
  public $squareChatMid = null;
  /**
   * @var \SquareMember
   */
  public $joinedMember = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['squareChatMid'])) {
        $this->squareChatMid = $vals['squareChatMid'];
      }
      if (isset($vals['joinedMember'])) {
        $this->joinedMember = $vals['joinedMember'];
      }
    }
  }

  public function getName() {
    return 'SquareEventNotifiedJoinSquareChat';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareChatMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->joinedMember = new \SquareMember();
            $xfer += $this->joinedMember->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareEventNotifiedJoinSquareChat');
    if ($this->squareChatMid !== null) {
      $xfer += $output->writeFieldBegin('squareChatMid', TType::STRING, 1);
      $xfer += $output->writeString($this->squareChatMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->joinedMember !== null) {
      if (!is_object($this->joinedMember)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('joinedMember', TType::STRUCT, 2);
      $xfer += $this->joinedMember->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareEventNotifiedInviteIntoSquareChat {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'squareChatMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'invitees',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\SquareMember',
        ),
      ),
    3 => array(
      'var' => 'invitor',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareMember',
      ),
    4 => array(
      'var' => 'invitorRelation',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareMemberRelation',
      ),
    );

  /**
   * @var string
   */
  public $squareChatMid = null;
  /**
   * @var \SquareMember[]
   */
  public $invitees = null;
  /**
   * @var \SquareMember
   */
  public $invitor = null;
  /**
   * @var \SquareMemberRelation
   */
  public $invitorRelation = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['squareChatMid'])) {
        $this->squareChatMid = $vals['squareChatMid'];
      }
      if (isset($vals['invitees'])) {
        $this->invitees = $vals['invitees'];
      }
      if (isset($vals['invitor'])) {
        $this->invitor = $vals['invitor'];
      }
      if (isset($vals['invitorRelation'])) {
        $this->invitorRelation = $vals['invitorRelation'];
      }
    }
  }

  public function getName() {
    return 'SquareEventNotifiedInviteIntoSquareChat';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareChatMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->invitees = array();
            $_size756 = 0;
            $_etype759 = 0;
            $xfer += $input->readListBegin($_etype759, $_size756);
            for ($_i760 = 0; $_i760 < $_size756; ++$_i760)
            {
              $elem761 = null;
              $elem761 = new \SquareMember();
              $xfer += $elem761->read($input);
              $this->invitees []= $elem761;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->invitor = new \SquareMember();
            $xfer += $this->invitor->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->invitorRelation = new \SquareMemberRelation();
            $xfer += $this->invitorRelation->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareEventNotifiedInviteIntoSquareChat');
    if ($this->squareChatMid !== null) {
      $xfer += $output->writeFieldBegin('squareChatMid', TType::STRING, 1);
      $xfer += $output->writeString($this->squareChatMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->invitees !== null) {
      if (!is_array($this->invitees)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('invitees', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->invitees));
        {
          foreach ($this->invitees as $iter762)
          {
            $xfer += $iter762->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->invitor !== null) {
      if (!is_object($this->invitor)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('invitor', TType::STRUCT, 3);
      $xfer += $this->invitor->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->invitorRelation !== null) {
      if (!is_object($this->invitorRelation)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('invitorRelation', TType::STRUCT, 4);
      $xfer += $this->invitorRelation->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareEventNotifiedLeaveSquareChat {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'squareChatMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'squareMemberMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'sayGoodbye',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    4 => array(
      'var' => 'squareMember',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareMember',
      ),
    );

  /**
   * @var string
   */
  public $squareChatMid = null;
  /**
   * @var string
   */
  public $squareMemberMid = null;
  /**
   * @var bool
   */
  public $sayGoodbye = null;
  /**
   * @var \SquareMember
   */
  public $squareMember = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['squareChatMid'])) {
        $this->squareChatMid = $vals['squareChatMid'];
      }
      if (isset($vals['squareMemberMid'])) {
        $this->squareMemberMid = $vals['squareMemberMid'];
      }
      if (isset($vals['sayGoodbye'])) {
        $this->sayGoodbye = $vals['sayGoodbye'];
      }
      if (isset($vals['squareMember'])) {
        $this->squareMember = $vals['squareMember'];
      }
    }
  }

  public function getName() {
    return 'SquareEventNotifiedLeaveSquareChat';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareChatMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareMemberMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->sayGoodbye);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->squareMember = new \SquareMember();
            $xfer += $this->squareMember->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareEventNotifiedLeaveSquareChat');
    if ($this->squareChatMid !== null) {
      $xfer += $output->writeFieldBegin('squareChatMid', TType::STRING, 1);
      $xfer += $output->writeString($this->squareChatMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareMemberMid !== null) {
      $xfer += $output->writeFieldBegin('squareMemberMid', TType::STRING, 2);
      $xfer += $output->writeString($this->squareMemberMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sayGoodbye !== null) {
      $xfer += $output->writeFieldBegin('sayGoodbye', TType::BOOL, 3);
      $xfer += $output->writeBool($this->sayGoodbye);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareMember !== null) {
      if (!is_object($this->squareMember)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squareMember', TType::STRUCT, 4);
      $xfer += $this->squareMember->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareEventNotifiedDestroyMessage {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'squareChatMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'messageId',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $squareChatMid = null;
  /**
   * @var string
   */
  public $messageId = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['squareChatMid'])) {
        $this->squareChatMid = $vals['squareChatMid'];
      }
      if (isset($vals['messageId'])) {
        $this->messageId = $vals['messageId'];
      }
    }
  }

  public function getName() {
    return 'SquareEventNotifiedDestroyMessage';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareChatMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->messageId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareEventNotifiedDestroyMessage');
    if ($this->squareChatMid !== null) {
      $xfer += $output->writeFieldBegin('squareChatMid', TType::STRING, 1);
      $xfer += $output->writeString($this->squareChatMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->messageId !== null) {
      $xfer += $output->writeFieldBegin('messageId', TType::STRING, 3);
      $xfer += $output->writeString($this->messageId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareEventNotifiedMarkAsRead {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'squareChatMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'sMemberMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'messageId',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $squareChatMid = null;
  /**
   * @var string
   */
  public $sMemberMid = null;
  /**
   * @var string
   */
  public $messageId = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['squareChatMid'])) {
        $this->squareChatMid = $vals['squareChatMid'];
      }
      if (isset($vals['sMemberMid'])) {
        $this->sMemberMid = $vals['sMemberMid'];
      }
      if (isset($vals['messageId'])) {
        $this->messageId = $vals['messageId'];
      }
    }
  }

  public function getName() {
    return 'SquareEventNotifiedMarkAsRead';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareChatMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sMemberMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->messageId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareEventNotifiedMarkAsRead');
    if ($this->squareChatMid !== null) {
      $xfer += $output->writeFieldBegin('squareChatMid', TType::STRING, 1);
      $xfer += $output->writeString($this->squareChatMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sMemberMid !== null) {
      $xfer += $output->writeFieldBegin('sMemberMid', TType::STRING, 2);
      $xfer += $output->writeString($this->sMemberMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->messageId !== null) {
      $xfer += $output->writeFieldBegin('messageId', TType::STRING, 4);
      $xfer += $output->writeString($this->messageId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareEventNotifiedUpdateSquareMemberProfile {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'squareChatMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'squareMember',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareMember',
      ),
    );

  /**
   * @var string
   */
  public $squareChatMid = null;
  /**
   * @var \SquareMember
   */
  public $squareMember = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['squareChatMid'])) {
        $this->squareChatMid = $vals['squareChatMid'];
      }
      if (isset($vals['squareMember'])) {
        $this->squareMember = $vals['squareMember'];
      }
    }
  }

  public function getName() {
    return 'SquareEventNotifiedUpdateSquareMemberProfile';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareChatMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->squareMember = new \SquareMember();
            $xfer += $this->squareMember->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareEventNotifiedUpdateSquareMemberProfile');
    if ($this->squareChatMid !== null) {
      $xfer += $output->writeFieldBegin('squareChatMid', TType::STRING, 1);
      $xfer += $output->writeString($this->squareChatMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareMember !== null) {
      if (!is_object($this->squareMember)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squareMember', TType::STRUCT, 2);
      $xfer += $this->squareMember->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareEventNotifiedKickoutFromSquare {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'squareChatMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'kickees',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\SquareMember',
        ),
      ),
    );

  /**
   * @var string
   */
  public $squareChatMid = null;
  /**
   * @var \SquareMember[]
   */
  public $kickees = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['squareChatMid'])) {
        $this->squareChatMid = $vals['squareChatMid'];
      }
      if (isset($vals['kickees'])) {
        $this->kickees = $vals['kickees'];
      }
    }
  }

  public function getName() {
    return 'SquareEventNotifiedKickoutFromSquare';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareChatMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->kickees = array();
            $_size763 = 0;
            $_etype766 = 0;
            $xfer += $input->readListBegin($_etype766, $_size763);
            for ($_i767 = 0; $_i767 < $_size763; ++$_i767)
            {
              $elem768 = null;
              $elem768 = new \SquareMember();
              $xfer += $elem768->read($input);
              $this->kickees []= $elem768;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareEventNotifiedKickoutFromSquare');
    if ($this->squareChatMid !== null) {
      $xfer += $output->writeFieldBegin('squareChatMid', TType::STRING, 1);
      $xfer += $output->writeString($this->squareChatMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->kickees !== null) {
      if (!is_array($this->kickees)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('kickees', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->kickees));
        {
          foreach ($this->kickees as $iter769)
          {
            $xfer += $iter769->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareEventNotifiedShutdownSquare {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'squareChatMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'square',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Square',
      ),
    );

  /**
   * @var string
   */
  public $squareChatMid = null;
  /**
   * @var \Square
   */
  public $square = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['squareChatMid'])) {
        $this->squareChatMid = $vals['squareChatMid'];
      }
      if (isset($vals['square'])) {
        $this->square = $vals['square'];
      }
    }
  }

  public function getName() {
    return 'SquareEventNotifiedShutdownSquare';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareChatMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->square = new \Square();
            $xfer += $this->square->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareEventNotifiedShutdownSquare');
    if ($this->squareChatMid !== null) {
      $xfer += $output->writeFieldBegin('squareChatMid', TType::STRING, 1);
      $xfer += $output->writeString($this->squareChatMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->square !== null) {
      if (!is_object($this->square)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('square', TType::STRUCT, 2);
      $xfer += $this->square->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareEventNotifiedDeleteSquareChat {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'squareChat',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareChat',
      ),
    );

  /**
   * @var \SquareChat
   */
  public $squareChat = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['squareChat'])) {
        $this->squareChat = $vals['squareChat'];
      }
    }
  }

  public function getName() {
    return 'SquareEventNotifiedDeleteSquareChat';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->squareChat = new \SquareChat();
            $xfer += $this->squareChat->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareEventNotifiedDeleteSquareChat');
    if ($this->squareChat !== null) {
      if (!is_object($this->squareChat)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squareChat', TType::STRUCT, 1);
      $xfer += $this->squareChat->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareEventNotifiedUpdateSquareChatProfileName {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'squareChatMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'editor',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareMember',
      ),
    3 => array(
      'var' => 'updatedChatName',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $squareChatMid = null;
  /**
   * @var \SquareMember
   */
  public $editor = null;
  /**
   * @var string
   */
  public $updatedChatName = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['squareChatMid'])) {
        $this->squareChatMid = $vals['squareChatMid'];
      }
      if (isset($vals['editor'])) {
        $this->editor = $vals['editor'];
      }
      if (isset($vals['updatedChatName'])) {
        $this->updatedChatName = $vals['updatedChatName'];
      }
    }
  }

  public function getName() {
    return 'SquareEventNotifiedUpdateSquareChatProfileName';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareChatMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->editor = new \SquareMember();
            $xfer += $this->editor->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->updatedChatName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareEventNotifiedUpdateSquareChatProfileName');
    if ($this->squareChatMid !== null) {
      $xfer += $output->writeFieldBegin('squareChatMid', TType::STRING, 1);
      $xfer += $output->writeString($this->squareChatMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->editor !== null) {
      if (!is_object($this->editor)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('editor', TType::STRUCT, 2);
      $xfer += $this->editor->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->updatedChatName !== null) {
      $xfer += $output->writeFieldBegin('updatedChatName', TType::STRING, 3);
      $xfer += $output->writeString($this->updatedChatName);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareEventNotifiedUpdateSquareChatProfileImage {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'squareChatMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'editor',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareMember',
      ),
    );

  /**
   * @var string
   */
  public $squareChatMid = null;
  /**
   * @var \SquareMember
   */
  public $editor = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['squareChatMid'])) {
        $this->squareChatMid = $vals['squareChatMid'];
      }
      if (isset($vals['editor'])) {
        $this->editor = $vals['editor'];
      }
    }
  }

  public function getName() {
    return 'SquareEventNotifiedUpdateSquareChatProfileImage';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareChatMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->editor = new \SquareMember();
            $xfer += $this->editor->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareEventNotifiedUpdateSquareChatProfileImage');
    if ($this->squareChatMid !== null) {
      $xfer += $output->writeFieldBegin('squareChatMid', TType::STRING, 1);
      $xfer += $output->writeString($this->squareChatMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->editor !== null) {
      if (!is_object($this->editor)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('editor', TType::STRUCT, 2);
      $xfer += $this->editor->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareEventNotifiedUpdateSquareChatStatus {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'squareChatMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'statusWithoutMessage',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareChatStatusWithoutMessage',
      ),
    );

  /**
   * @var string
   */
  public $squareChatMid = null;
  /**
   * @var \SquareChatStatusWithoutMessage
   */
  public $statusWithoutMessage = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['squareChatMid'])) {
        $this->squareChatMid = $vals['squareChatMid'];
      }
      if (isset($vals['statusWithoutMessage'])) {
        $this->statusWithoutMessage = $vals['statusWithoutMessage'];
      }
    }
  }

  public function getName() {
    return 'SquareEventNotifiedUpdateSquareChatStatus';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareChatMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->statusWithoutMessage = new \SquareChatStatusWithoutMessage();
            $xfer += $this->statusWithoutMessage->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareEventNotifiedUpdateSquareChatStatus');
    if ($this->squareChatMid !== null) {
      $xfer += $output->writeFieldBegin('squareChatMid', TType::STRING, 1);
      $xfer += $output->writeString($this->squareChatMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->statusWithoutMessage !== null) {
      if (!is_object($this->statusWithoutMessage)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('statusWithoutMessage', TType::STRUCT, 2);
      $xfer += $this->statusWithoutMessage->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareEventNotifiedUpdateSquareStatus {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'squareMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'squareStatus',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareStatus',
      ),
    );

  /**
   * @var string
   */
  public $squareMid = null;
  /**
   * @var \SquareStatus
   */
  public $squareStatus = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['squareMid'])) {
        $this->squareMid = $vals['squareMid'];
      }
      if (isset($vals['squareStatus'])) {
        $this->squareStatus = $vals['squareStatus'];
      }
    }
  }

  public function getName() {
    return 'SquareEventNotifiedUpdateSquareStatus';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->squareStatus = new \SquareStatus();
            $xfer += $this->squareStatus->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareEventNotifiedUpdateSquareStatus');
    if ($this->squareMid !== null) {
      $xfer += $output->writeFieldBegin('squareMid', TType::STRING, 1);
      $xfer += $output->writeString($this->squareMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareStatus !== null) {
      if (!is_object($this->squareStatus)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squareStatus', TType::STRUCT, 2);
      $xfer += $this->squareStatus->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareEventNotifiedCreateSquareMember {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'square',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Square',
      ),
    2 => array(
      'var' => 'squareAuthority',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareAuthority',
      ),
    3 => array(
      'var' => 'squareStatus',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareStatus',
      ),
    4 => array(
      'var' => 'squareMember',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareMember',
      ),
    5 => array(
      'var' => 'squareFeatureSet',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareFeatureSet',
      ),
    );

  /**
   * @var \Square
   */
  public $square = null;
  /**
   * @var \SquareAuthority
   */
  public $squareAuthority = null;
  /**
   * @var \SquareStatus
   */
  public $squareStatus = null;
  /**
   * @var \SquareMember
   */
  public $squareMember = null;
  /**
   * @var \SquareFeatureSet
   */
  public $squareFeatureSet = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['square'])) {
        $this->square = $vals['square'];
      }
      if (isset($vals['squareAuthority'])) {
        $this->squareAuthority = $vals['squareAuthority'];
      }
      if (isset($vals['squareStatus'])) {
        $this->squareStatus = $vals['squareStatus'];
      }
      if (isset($vals['squareMember'])) {
        $this->squareMember = $vals['squareMember'];
      }
      if (isset($vals['squareFeatureSet'])) {
        $this->squareFeatureSet = $vals['squareFeatureSet'];
      }
    }
  }

  public function getName() {
    return 'SquareEventNotifiedCreateSquareMember';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->square = new \Square();
            $xfer += $this->square->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->squareAuthority = new \SquareAuthority();
            $xfer += $this->squareAuthority->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->squareStatus = new \SquareStatus();
            $xfer += $this->squareStatus->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->squareMember = new \SquareMember();
            $xfer += $this->squareMember->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->squareFeatureSet = new \SquareFeatureSet();
            $xfer += $this->squareFeatureSet->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareEventNotifiedCreateSquareMember');
    if ($this->square !== null) {
      if (!is_object($this->square)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('square', TType::STRUCT, 1);
      $xfer += $this->square->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareAuthority !== null) {
      if (!is_object($this->squareAuthority)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squareAuthority', TType::STRUCT, 2);
      $xfer += $this->squareAuthority->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareStatus !== null) {
      if (!is_object($this->squareStatus)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squareStatus', TType::STRUCT, 3);
      $xfer += $this->squareStatus->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareMember !== null) {
      if (!is_object($this->squareMember)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squareMember', TType::STRUCT, 4);
      $xfer += $this->squareMember->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareFeatureSet !== null) {
      if (!is_object($this->squareFeatureSet)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squareFeatureSet', TType::STRUCT, 5);
      $xfer += $this->squareFeatureSet->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareEventNotifiedCreateSquareChatMember {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'squareChatMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'squareMemberMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'squareChatMember',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareChatMember',
      ),
    );

  /**
   * @var string
   */
  public $squareChatMid = null;
  /**
   * @var string
   */
  public $squareMemberMid = null;
  /**
   * @var \SquareChatMember
   */
  public $squareChatMember = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['squareChatMid'])) {
        $this->squareChatMid = $vals['squareChatMid'];
      }
      if (isset($vals['squareMemberMid'])) {
        $this->squareMemberMid = $vals['squareMemberMid'];
      }
      if (isset($vals['squareChatMember'])) {
        $this->squareChatMember = $vals['squareChatMember'];
      }
    }
  }

  public function getName() {
    return 'SquareEventNotifiedCreateSquareChatMember';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareChatMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareMemberMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->squareChatMember = new \SquareChatMember();
            $xfer += $this->squareChatMember->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareEventNotifiedCreateSquareChatMember');
    if ($this->squareChatMid !== null) {
      $xfer += $output->writeFieldBegin('squareChatMid', TType::STRING, 1);
      $xfer += $output->writeString($this->squareChatMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareMemberMid !== null) {
      $xfer += $output->writeFieldBegin('squareMemberMid', TType::STRING, 2);
      $xfer += $output->writeString($this->squareMemberMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareChatMember !== null) {
      if (!is_object($this->squareChatMember)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squareChatMember', TType::STRUCT, 3);
      $xfer += $this->squareChatMember->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareEventNotifiedUpdateSquareMemberRelation {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'squareMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'myMemberMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'targetSquareMemberMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'squareMemberRelation',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareMemberRelation',
      ),
    );

  /**
   * @var string
   */
  public $squareMid = null;
  /**
   * @var string
   */
  public $myMemberMid = null;
  /**
   * @var string
   */
  public $targetSquareMemberMid = null;
  /**
   * @var \SquareMemberRelation
   */
  public $squareMemberRelation = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['squareMid'])) {
        $this->squareMid = $vals['squareMid'];
      }
      if (isset($vals['myMemberMid'])) {
        $this->myMemberMid = $vals['myMemberMid'];
      }
      if (isset($vals['targetSquareMemberMid'])) {
        $this->targetSquareMemberMid = $vals['targetSquareMemberMid'];
      }
      if (isset($vals['squareMemberRelation'])) {
        $this->squareMemberRelation = $vals['squareMemberRelation'];
      }
    }
  }

  public function getName() {
    return 'SquareEventNotifiedUpdateSquareMemberRelation';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->myMemberMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->targetSquareMemberMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->squareMemberRelation = new \SquareMemberRelation();
            $xfer += $this->squareMemberRelation->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareEventNotifiedUpdateSquareMemberRelation');
    if ($this->squareMid !== null) {
      $xfer += $output->writeFieldBegin('squareMid', TType::STRING, 1);
      $xfer += $output->writeString($this->squareMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->myMemberMid !== null) {
      $xfer += $output->writeFieldBegin('myMemberMid', TType::STRING, 2);
      $xfer += $output->writeString($this->myMemberMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->targetSquareMemberMid !== null) {
      $xfer += $output->writeFieldBegin('targetSquareMemberMid', TType::STRING, 3);
      $xfer += $output->writeString($this->targetSquareMemberMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareMemberRelation !== null) {
      if (!is_object($this->squareMemberRelation)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squareMemberRelation', TType::STRUCT, 4);
      $xfer += $this->squareMemberRelation->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareEventNotifiedUpdateSquare {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'squareMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'square',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Square',
      ),
    );

  /**
   * @var string
   */
  public $squareMid = null;
  /**
   * @var \Square
   */
  public $square = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['squareMid'])) {
        $this->squareMid = $vals['squareMid'];
      }
      if (isset($vals['square'])) {
        $this->square = $vals['square'];
      }
    }
  }

  public function getName() {
    return 'SquareEventNotifiedUpdateSquare';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->square = new \Square();
            $xfer += $this->square->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareEventNotifiedUpdateSquare');
    if ($this->squareMid !== null) {
      $xfer += $output->writeFieldBegin('squareMid', TType::STRING, 1);
      $xfer += $output->writeString($this->squareMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->square !== null) {
      if (!is_object($this->square)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('square', TType::STRUCT, 2);
      $xfer += $this->square->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareEventNotifiedUpdateSquareMember {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'squareMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'squareMemberMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'squareMember',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareMember',
      ),
    );

  /**
   * @var string
   */
  public $squareMid = null;
  /**
   * @var string
   */
  public $squareMemberMid = null;
  /**
   * @var \SquareMember
   */
  public $squareMember = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['squareMid'])) {
        $this->squareMid = $vals['squareMid'];
      }
      if (isset($vals['squareMemberMid'])) {
        $this->squareMemberMid = $vals['squareMemberMid'];
      }
      if (isset($vals['squareMember'])) {
        $this->squareMember = $vals['squareMember'];
      }
    }
  }

  public function getName() {
    return 'SquareEventNotifiedUpdateSquareMember';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareMemberMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->squareMember = new \SquareMember();
            $xfer += $this->squareMember->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareEventNotifiedUpdateSquareMember');
    if ($this->squareMid !== null) {
      $xfer += $output->writeFieldBegin('squareMid', TType::STRING, 1);
      $xfer += $output->writeString($this->squareMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareMemberMid !== null) {
      $xfer += $output->writeFieldBegin('squareMemberMid', TType::STRING, 2);
      $xfer += $output->writeString($this->squareMemberMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareMember !== null) {
      if (!is_object($this->squareMember)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squareMember', TType::STRUCT, 3);
      $xfer += $this->squareMember->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareEventNotifiedUpdateSquareChat {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'squareMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'squareChatMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'squareChat',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareChat',
      ),
    );

  /**
   * @var string
   */
  public $squareMid = null;
  /**
   * @var string
   */
  public $squareChatMid = null;
  /**
   * @var \SquareChat
   */
  public $squareChat = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['squareMid'])) {
        $this->squareMid = $vals['squareMid'];
      }
      if (isset($vals['squareChatMid'])) {
        $this->squareChatMid = $vals['squareChatMid'];
      }
      if (isset($vals['squareChat'])) {
        $this->squareChat = $vals['squareChat'];
      }
    }
  }

  public function getName() {
    return 'SquareEventNotifiedUpdateSquareChat';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareChatMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->squareChat = new \SquareChat();
            $xfer += $this->squareChat->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareEventNotifiedUpdateSquareChat');
    if ($this->squareMid !== null) {
      $xfer += $output->writeFieldBegin('squareMid', TType::STRING, 1);
      $xfer += $output->writeString($this->squareMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareChatMid !== null) {
      $xfer += $output->writeFieldBegin('squareChatMid', TType::STRING, 2);
      $xfer += $output->writeString($this->squareChatMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareChat !== null) {
      if (!is_object($this->squareChat)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squareChat', TType::STRUCT, 3);
      $xfer += $this->squareChat->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareEventNotificationJoinRequest {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'squareMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'squareName',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'requestMemberName',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'profileImageObsHash',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $squareMid = null;
  /**
   * @var string
   */
  public $squareName = null;
  /**
   * @var string
   */
  public $requestMemberName = null;
  /**
   * @var string
   */
  public $profileImageObsHash = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['squareMid'])) {
        $this->squareMid = $vals['squareMid'];
      }
      if (isset($vals['squareName'])) {
        $this->squareName = $vals['squareName'];
      }
      if (isset($vals['requestMemberName'])) {
        $this->requestMemberName = $vals['requestMemberName'];
      }
      if (isset($vals['profileImageObsHash'])) {
        $this->profileImageObsHash = $vals['profileImageObsHash'];
      }
    }
  }

  public function getName() {
    return 'SquareEventNotificationJoinRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->requestMemberName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->profileImageObsHash);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareEventNotificationJoinRequest');
    if ($this->squareMid !== null) {
      $xfer += $output->writeFieldBegin('squareMid', TType::STRING, 1);
      $xfer += $output->writeString($this->squareMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareName !== null) {
      $xfer += $output->writeFieldBegin('squareName', TType::STRING, 2);
      $xfer += $output->writeString($this->squareName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->requestMemberName !== null) {
      $xfer += $output->writeFieldBegin('requestMemberName', TType::STRING, 3);
      $xfer += $output->writeString($this->requestMemberName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->profileImageObsHash !== null) {
      $xfer += $output->writeFieldBegin('profileImageObsHash', TType::STRING, 4);
      $xfer += $output->writeString($this->profileImageObsHash);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareEventNotificationMemberUpdate {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'squareMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'squareName',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'profileImageObsHash',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $squareMid = null;
  /**
   * @var string
   */
  public $squareName = null;
  /**
   * @var string
   */
  public $profileImageObsHash = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['squareMid'])) {
        $this->squareMid = $vals['squareMid'];
      }
      if (isset($vals['squareName'])) {
        $this->squareName = $vals['squareName'];
      }
      if (isset($vals['profileImageObsHash'])) {
        $this->profileImageObsHash = $vals['profileImageObsHash'];
      }
    }
  }

  public function getName() {
    return 'SquareEventNotificationMemberUpdate';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->profileImageObsHash);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareEventNotificationMemberUpdate');
    if ($this->squareMid !== null) {
      $xfer += $output->writeFieldBegin('squareMid', TType::STRING, 1);
      $xfer += $output->writeString($this->squareMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareName !== null) {
      $xfer += $output->writeFieldBegin('squareName', TType::STRING, 2);
      $xfer += $output->writeString($this->squareName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->profileImageObsHash !== null) {
      $xfer += $output->writeFieldBegin('profileImageObsHash', TType::STRING, 3);
      $xfer += $output->writeString($this->profileImageObsHash);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareEventNotificationSquareDelete {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'squareMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'squareName',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'profileImageObsHash',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $squareMid = null;
  /**
   * @var string
   */
  public $squareName = null;
  /**
   * @var string
   */
  public $profileImageObsHash = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['squareMid'])) {
        $this->squareMid = $vals['squareMid'];
      }
      if (isset($vals['squareName'])) {
        $this->squareName = $vals['squareName'];
      }
      if (isset($vals['profileImageObsHash'])) {
        $this->profileImageObsHash = $vals['profileImageObsHash'];
      }
    }
  }

  public function getName() {
    return 'SquareEventNotificationSquareDelete';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->profileImageObsHash);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareEventNotificationSquareDelete');
    if ($this->squareMid !== null) {
      $xfer += $output->writeFieldBegin('squareMid', TType::STRING, 1);
      $xfer += $output->writeString($this->squareMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareName !== null) {
      $xfer += $output->writeFieldBegin('squareName', TType::STRING, 2);
      $xfer += $output->writeString($this->squareName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->profileImageObsHash !== null) {
      $xfer += $output->writeFieldBegin('profileImageObsHash', TType::STRING, 3);
      $xfer += $output->writeString($this->profileImageObsHash);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareEventNotificationSquareChatDelete {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'squareChatMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'squareChatName',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'profileImageObsHash',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $squareChatMid = null;
  /**
   * @var string
   */
  public $squareChatName = null;
  /**
   * @var string
   */
  public $profileImageObsHash = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['squareChatMid'])) {
        $this->squareChatMid = $vals['squareChatMid'];
      }
      if (isset($vals['squareChatName'])) {
        $this->squareChatName = $vals['squareChatName'];
      }
      if (isset($vals['profileImageObsHash'])) {
        $this->profileImageObsHash = $vals['profileImageObsHash'];
      }
    }
  }

  public function getName() {
    return 'SquareEventNotificationSquareChatDelete';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareChatMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareChatName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->profileImageObsHash);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareEventNotificationSquareChatDelete');
    if ($this->squareChatMid !== null) {
      $xfer += $output->writeFieldBegin('squareChatMid', TType::STRING, 1);
      $xfer += $output->writeString($this->squareChatMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareChatName !== null) {
      $xfer += $output->writeFieldBegin('squareChatName', TType::STRING, 2);
      $xfer += $output->writeString($this->squareChatName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->profileImageObsHash !== null) {
      $xfer += $output->writeFieldBegin('profileImageObsHash', TType::STRING, 3);
      $xfer += $output->writeString($this->profileImageObsHash);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareEventNotificationMessage {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'squareChatMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'squareMessage',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareMessage',
      ),
    3 => array(
      'var' => 'senderDisplayName',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'unreadCount',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    5 => array(
      'var' => 'requiredToFetchChatEvents',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var string
   */
  public $squareChatMid = null;
  /**
   * @var \SquareMessage
   */
  public $squareMessage = null;
  /**
   * @var string
   */
  public $senderDisplayName = null;
  /**
   * @var int
   */
  public $unreadCount = null;
  /**
   * @var bool
   */
  public $requiredToFetchChatEvents = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['squareChatMid'])) {
        $this->squareChatMid = $vals['squareChatMid'];
      }
      if (isset($vals['squareMessage'])) {
        $this->squareMessage = $vals['squareMessage'];
      }
      if (isset($vals['senderDisplayName'])) {
        $this->senderDisplayName = $vals['senderDisplayName'];
      }
      if (isset($vals['unreadCount'])) {
        $this->unreadCount = $vals['unreadCount'];
      }
      if (isset($vals['requiredToFetchChatEvents'])) {
        $this->requiredToFetchChatEvents = $vals['requiredToFetchChatEvents'];
      }
    }
  }

  public function getName() {
    return 'SquareEventNotificationMessage';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareChatMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->squareMessage = new \SquareMessage();
            $xfer += $this->squareMessage->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->senderDisplayName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->unreadCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->requiredToFetchChatEvents);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareEventNotificationMessage');
    if ($this->squareChatMid !== null) {
      $xfer += $output->writeFieldBegin('squareChatMid', TType::STRING, 1);
      $xfer += $output->writeString($this->squareChatMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareMessage !== null) {
      if (!is_object($this->squareMessage)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squareMessage', TType::STRUCT, 2);
      $xfer += $this->squareMessage->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->senderDisplayName !== null) {
      $xfer += $output->writeFieldBegin('senderDisplayName', TType::STRING, 3);
      $xfer += $output->writeString($this->senderDisplayName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->unreadCount !== null) {
      $xfer += $output->writeFieldBegin('unreadCount', TType::I32, 4);
      $xfer += $output->writeI32($this->unreadCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->requiredToFetchChatEvents !== null) {
      $xfer += $output->writeFieldBegin('requiredToFetchChatEvents', TType::BOOL, 5);
      $xfer += $output->writeBool($this->requiredToFetchChatEvents);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareEventNotifiedUpdateSquareChatMember {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'squareChatMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'squareMemberMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'squareChatMember',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareChatMember',
      ),
    );

  /**
   * @var string
   */
  public $squareChatMid = null;
  /**
   * @var string
   */
  public $squareMemberMid = null;
  /**
   * @var \SquareChatMember
   */
  public $squareChatMember = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['squareChatMid'])) {
        $this->squareChatMid = $vals['squareChatMid'];
      }
      if (isset($vals['squareMemberMid'])) {
        $this->squareMemberMid = $vals['squareMemberMid'];
      }
      if (isset($vals['squareChatMember'])) {
        $this->squareChatMember = $vals['squareChatMember'];
      }
    }
  }

  public function getName() {
    return 'SquareEventNotifiedUpdateSquareChatMember';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareChatMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareMemberMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->squareChatMember = new \SquareChatMember();
            $xfer += $this->squareChatMember->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareEventNotifiedUpdateSquareChatMember');
    if ($this->squareChatMid !== null) {
      $xfer += $output->writeFieldBegin('squareChatMid', TType::STRING, 1);
      $xfer += $output->writeString($this->squareChatMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareMemberMid !== null) {
      $xfer += $output->writeFieldBegin('squareMemberMid', TType::STRING, 2);
      $xfer += $output->writeString($this->squareMemberMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareChatMember !== null) {
      if (!is_object($this->squareChatMember)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squareChatMember', TType::STRUCT, 3);
      $xfer += $this->squareChatMember->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareEventNotifiedUpdateSquareAuthority {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'squareMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'squareAuthority',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareAuthority',
      ),
    );

  /**
   * @var string
   */
  public $squareMid = null;
  /**
   * @var \SquareAuthority
   */
  public $squareAuthority = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['squareMid'])) {
        $this->squareMid = $vals['squareMid'];
      }
      if (isset($vals['squareAuthority'])) {
        $this->squareAuthority = $vals['squareAuthority'];
      }
    }
  }

  public function getName() {
    return 'SquareEventNotifiedUpdateSquareAuthority';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->squareAuthority = new \SquareAuthority();
            $xfer += $this->squareAuthority->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareEventNotifiedUpdateSquareAuthority');
    if ($this->squareMid !== null) {
      $xfer += $output->writeFieldBegin('squareMid', TType::STRING, 1);
      $xfer += $output->writeString($this->squareMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareAuthority !== null) {
      if (!is_object($this->squareAuthority)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squareAuthority', TType::STRUCT, 2);
      $xfer += $this->squareAuthority->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareEventNotifiedUpdateSquareFeatureSet {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'squareFeatureSet',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareFeatureSet',
      ),
    );

  /**
   * @var \SquareFeatureSet
   */
  public $squareFeatureSet = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['squareFeatureSet'])) {
        $this->squareFeatureSet = $vals['squareFeatureSet'];
      }
    }
  }

  public function getName() {
    return 'SquareEventNotifiedUpdateSquareFeatureSet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->squareFeatureSet = new \SquareFeatureSet();
            $xfer += $this->squareFeatureSet->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareEventNotifiedUpdateSquareFeatureSet');
    if ($this->squareFeatureSet !== null) {
      if (!is_object($this->squareFeatureSet)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squareFeatureSet', TType::STRUCT, 1);
      $xfer += $this->squareFeatureSet->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareEventPayload {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'receiveMessage',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareEventReceiveMessage',
      ),
    2 => array(
      'var' => 'sendMessage',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareEventSendMessage',
      ),
    3 => array(
      'var' => 'notifiedJoinSquareChat',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareEventNotifiedJoinSquareChat',
      ),
    4 => array(
      'var' => 'notifiedInviteIntoSquareChat',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareEventNotifiedInviteIntoSquareChat',
      ),
    5 => array(
      'var' => 'notifiedLeaveSquareChat',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareEventNotifiedLeaveSquareChat',
      ),
    6 => array(
      'var' => 'notifiedDestroyMessage',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareEventNotifiedDestroyMessage',
      ),
    7 => array(
      'var' => 'notifiedMarkAsRead',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareEventNotifiedMarkAsRead',
      ),
    8 => array(
      'var' => 'notifiedUpdateSquareMemberProfile',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareEventNotifiedUpdateSquareMemberProfile',
      ),
    20 => array(
      'var' => 'notifiedKickoutFromSquare',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareEventNotifiedKickoutFromSquare',
      ),
    19 => array(
      'var' => 'notifiedShutdownSquare',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareEventNotifiedShutdownSquare',
      ),
    21 => array(
      'var' => 'notifiedDeleteSquareChat',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareEventNotifiedDeleteSquareChat',
      ),
    31 => array(
      'var' => 'notifiedUpdateSquareChatProfileName',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareEventNotifiedUpdateSquareChatProfileName',
      ),
    32 => array(
      'var' => 'notifiedUpdateSquareChatProfileImage',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareEventNotifiedUpdateSquareChatProfileImage',
      ),
    14 => array(
      'var' => 'notifiedUpdateSquareStatus',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareEventNotifiedUpdateSquareStatus',
      ),
    15 => array(
      'var' => 'notifiedUpdateSquareChatStatus',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareEventNotifiedUpdateSquareChatStatus',
      ),
    16 => array(
      'var' => 'notifiedCreateSquareMember',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareEventNotifiedCreateSquareMember',
      ),
    17 => array(
      'var' => 'notifiedCreateSquareChatMember',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareEventNotifiedCreateSquareChatMember',
      ),
    18 => array(
      'var' => 'notifiedUpdateSquareMemberRelation',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareEventNotifiedUpdateSquareMemberRelation',
      ),
    9 => array(
      'var' => 'notifiedUpdateSquare',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareEventNotifiedUpdateSquare',
      ),
    10 => array(
      'var' => 'notifiedUpdateSquareMember',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareEventNotifiedUpdateSquareMember',
      ),
    11 => array(
      'var' => 'notifiedUpdateSquareChat',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareEventNotifiedUpdateSquareChat',
      ),
    22 => array(
      'var' => 'notificationJoinRequest',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareEventNotificationJoinRequest',
      ),
    23 => array(
      'var' => 'notificationJoined',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareEventNotificationMemberUpdate',
      ),
    24 => array(
      'var' => 'notificationPromoteCoadmin',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareEventNotificationMemberUpdate',
      ),
    25 => array(
      'var' => 'notificationPromoteAdmin',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareEventNotificationMemberUpdate',
      ),
    26 => array(
      'var' => 'notificationDemoteMember',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareEventNotificationMemberUpdate',
      ),
    27 => array(
      'var' => 'notificationKickedOut',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareEventNotificationMemberUpdate',
      ),
    28 => array(
      'var' => 'notificationSquareDelete',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareEventNotificationSquareDelete',
      ),
    29 => array(
      'var' => 'notificationSquareChatDelete',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareEventNotificationSquareChatDelete',
      ),
    30 => array(
      'var' => 'notificationMessage',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareEventNotificationMessage',
      ),
    12 => array(
      'var' => 'notifiedUpdateSquareChatMember',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareEventNotifiedUpdateSquareChatMember',
      ),
    13 => array(
      'var' => 'notifiedUpdateSquareAuthority',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareEventNotifiedUpdateSquareAuthority',
      ),
    33 => array(
      'var' => 'notifiedUpdateSquareFeatureSet',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareEventNotifiedUpdateSquareFeatureSet',
      ),
    );

  /**
   * @var \SquareEventReceiveMessage
   */
  public $receiveMessage = null;
  /**
   * @var \SquareEventSendMessage
   */
  public $sendMessage = null;
  /**
   * @var \SquareEventNotifiedJoinSquareChat
   */
  public $notifiedJoinSquareChat = null;
  /**
   * @var \SquareEventNotifiedInviteIntoSquareChat
   */
  public $notifiedInviteIntoSquareChat = null;
  /**
   * @var \SquareEventNotifiedLeaveSquareChat
   */
  public $notifiedLeaveSquareChat = null;
  /**
   * @var \SquareEventNotifiedDestroyMessage
   */
  public $notifiedDestroyMessage = null;
  /**
   * @var \SquareEventNotifiedMarkAsRead
   */
  public $notifiedMarkAsRead = null;
  /**
   * @var \SquareEventNotifiedUpdateSquareMemberProfile
   */
  public $notifiedUpdateSquareMemberProfile = null;
  /**
   * @var \SquareEventNotifiedKickoutFromSquare
   */
  public $notifiedKickoutFromSquare = null;
  /**
   * @var \SquareEventNotifiedShutdownSquare
   */
  public $notifiedShutdownSquare = null;
  /**
   * @var \SquareEventNotifiedDeleteSquareChat
   */
  public $notifiedDeleteSquareChat = null;
  /**
   * @var \SquareEventNotifiedUpdateSquareChatProfileName
   */
  public $notifiedUpdateSquareChatProfileName = null;
  /**
   * @var \SquareEventNotifiedUpdateSquareChatProfileImage
   */
  public $notifiedUpdateSquareChatProfileImage = null;
  /**
   * @var \SquareEventNotifiedUpdateSquareStatus
   */
  public $notifiedUpdateSquareStatus = null;
  /**
   * @var \SquareEventNotifiedUpdateSquareChatStatus
   */
  public $notifiedUpdateSquareChatStatus = null;
  /**
   * @var \SquareEventNotifiedCreateSquareMember
   */
  public $notifiedCreateSquareMember = null;
  /**
   * @var \SquareEventNotifiedCreateSquareChatMember
   */
  public $notifiedCreateSquareChatMember = null;
  /**
   * @var \SquareEventNotifiedUpdateSquareMemberRelation
   */
  public $notifiedUpdateSquareMemberRelation = null;
  /**
   * @var \SquareEventNotifiedUpdateSquare
   */
  public $notifiedUpdateSquare = null;
  /**
   * @var \SquareEventNotifiedUpdateSquareMember
   */
  public $notifiedUpdateSquareMember = null;
  /**
   * @var \SquareEventNotifiedUpdateSquareChat
   */
  public $notifiedUpdateSquareChat = null;
  /**
   * @var \SquareEventNotificationJoinRequest
   */
  public $notificationJoinRequest = null;
  /**
   * @var \SquareEventNotificationMemberUpdate
   */
  public $notificationJoined = null;
  /**
   * @var \SquareEventNotificationMemberUpdate
   */
  public $notificationPromoteCoadmin = null;
  /**
   * @var \SquareEventNotificationMemberUpdate
   */
  public $notificationPromoteAdmin = null;
  /**
   * @var \SquareEventNotificationMemberUpdate
   */
  public $notificationDemoteMember = null;
  /**
   * @var \SquareEventNotificationMemberUpdate
   */
  public $notificationKickedOut = null;
  /**
   * @var \SquareEventNotificationSquareDelete
   */
  public $notificationSquareDelete = null;
  /**
   * @var \SquareEventNotificationSquareChatDelete
   */
  public $notificationSquareChatDelete = null;
  /**
   * @var \SquareEventNotificationMessage
   */
  public $notificationMessage = null;
  /**
   * @var \SquareEventNotifiedUpdateSquareChatMember
   */
  public $notifiedUpdateSquareChatMember = null;
  /**
   * @var \SquareEventNotifiedUpdateSquareAuthority
   */
  public $notifiedUpdateSquareAuthority = null;
  /**
   * @var \SquareEventNotifiedUpdateSquareFeatureSet
   */
  public $notifiedUpdateSquareFeatureSet = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['receiveMessage'])) {
        $this->receiveMessage = $vals['receiveMessage'];
      }
      if (isset($vals['sendMessage'])) {
        $this->sendMessage = $vals['sendMessage'];
      }
      if (isset($vals['notifiedJoinSquareChat'])) {
        $this->notifiedJoinSquareChat = $vals['notifiedJoinSquareChat'];
      }
      if (isset($vals['notifiedInviteIntoSquareChat'])) {
        $this->notifiedInviteIntoSquareChat = $vals['notifiedInviteIntoSquareChat'];
      }
      if (isset($vals['notifiedLeaveSquareChat'])) {
        $this->notifiedLeaveSquareChat = $vals['notifiedLeaveSquareChat'];
      }
      if (isset($vals['notifiedDestroyMessage'])) {
        $this->notifiedDestroyMessage = $vals['notifiedDestroyMessage'];
      }
      if (isset($vals['notifiedMarkAsRead'])) {
        $this->notifiedMarkAsRead = $vals['notifiedMarkAsRead'];
      }
      if (isset($vals['notifiedUpdateSquareMemberProfile'])) {
        $this->notifiedUpdateSquareMemberProfile = $vals['notifiedUpdateSquareMemberProfile'];
      }
      if (isset($vals['notifiedKickoutFromSquare'])) {
        $this->notifiedKickoutFromSquare = $vals['notifiedKickoutFromSquare'];
      }
      if (isset($vals['notifiedShutdownSquare'])) {
        $this->notifiedShutdownSquare = $vals['notifiedShutdownSquare'];
      }
      if (isset($vals['notifiedDeleteSquareChat'])) {
        $this->notifiedDeleteSquareChat = $vals['notifiedDeleteSquareChat'];
      }
      if (isset($vals['notifiedUpdateSquareChatProfileName'])) {
        $this->notifiedUpdateSquareChatProfileName = $vals['notifiedUpdateSquareChatProfileName'];
      }
      if (isset($vals['notifiedUpdateSquareChatProfileImage'])) {
        $this->notifiedUpdateSquareChatProfileImage = $vals['notifiedUpdateSquareChatProfileImage'];
      }
      if (isset($vals['notifiedUpdateSquareStatus'])) {
        $this->notifiedUpdateSquareStatus = $vals['notifiedUpdateSquareStatus'];
      }
      if (isset($vals['notifiedUpdateSquareChatStatus'])) {
        $this->notifiedUpdateSquareChatStatus = $vals['notifiedUpdateSquareChatStatus'];
      }
      if (isset($vals['notifiedCreateSquareMember'])) {
        $this->notifiedCreateSquareMember = $vals['notifiedCreateSquareMember'];
      }
      if (isset($vals['notifiedCreateSquareChatMember'])) {
        $this->notifiedCreateSquareChatMember = $vals['notifiedCreateSquareChatMember'];
      }
      if (isset($vals['notifiedUpdateSquareMemberRelation'])) {
        $this->notifiedUpdateSquareMemberRelation = $vals['notifiedUpdateSquareMemberRelation'];
      }
      if (isset($vals['notifiedUpdateSquare'])) {
        $this->notifiedUpdateSquare = $vals['notifiedUpdateSquare'];
      }
      if (isset($vals['notifiedUpdateSquareMember'])) {
        $this->notifiedUpdateSquareMember = $vals['notifiedUpdateSquareMember'];
      }
      if (isset($vals['notifiedUpdateSquareChat'])) {
        $this->notifiedUpdateSquareChat = $vals['notifiedUpdateSquareChat'];
      }
      if (isset($vals['notificationJoinRequest'])) {
        $this->notificationJoinRequest = $vals['notificationJoinRequest'];
      }
      if (isset($vals['notificationJoined'])) {
        $this->notificationJoined = $vals['notificationJoined'];
      }
      if (isset($vals['notificationPromoteCoadmin'])) {
        $this->notificationPromoteCoadmin = $vals['notificationPromoteCoadmin'];
      }
      if (isset($vals['notificationPromoteAdmin'])) {
        $this->notificationPromoteAdmin = $vals['notificationPromoteAdmin'];
      }
      if (isset($vals['notificationDemoteMember'])) {
        $this->notificationDemoteMember = $vals['notificationDemoteMember'];
      }
      if (isset($vals['notificationKickedOut'])) {
        $this->notificationKickedOut = $vals['notificationKickedOut'];
      }
      if (isset($vals['notificationSquareDelete'])) {
        $this->notificationSquareDelete = $vals['notificationSquareDelete'];
      }
      if (isset($vals['notificationSquareChatDelete'])) {
        $this->notificationSquareChatDelete = $vals['notificationSquareChatDelete'];
      }
      if (isset($vals['notificationMessage'])) {
        $this->notificationMessage = $vals['notificationMessage'];
      }
      if (isset($vals['notifiedUpdateSquareChatMember'])) {
        $this->notifiedUpdateSquareChatMember = $vals['notifiedUpdateSquareChatMember'];
      }
      if (isset($vals['notifiedUpdateSquareAuthority'])) {
        $this->notifiedUpdateSquareAuthority = $vals['notifiedUpdateSquareAuthority'];
      }
      if (isset($vals['notifiedUpdateSquareFeatureSet'])) {
        $this->notifiedUpdateSquareFeatureSet = $vals['notifiedUpdateSquareFeatureSet'];
      }
    }
  }

  public function getName() {
    return 'SquareEventPayload';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->receiveMessage = new \SquareEventReceiveMessage();
            $xfer += $this->receiveMessage->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->sendMessage = new \SquareEventSendMessage();
            $xfer += $this->sendMessage->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->notifiedJoinSquareChat = new \SquareEventNotifiedJoinSquareChat();
            $xfer += $this->notifiedJoinSquareChat->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->notifiedInviteIntoSquareChat = new \SquareEventNotifiedInviteIntoSquareChat();
            $xfer += $this->notifiedInviteIntoSquareChat->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->notifiedLeaveSquareChat = new \SquareEventNotifiedLeaveSquareChat();
            $xfer += $this->notifiedLeaveSquareChat->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->notifiedDestroyMessage = new \SquareEventNotifiedDestroyMessage();
            $xfer += $this->notifiedDestroyMessage->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->notifiedMarkAsRead = new \SquareEventNotifiedMarkAsRead();
            $xfer += $this->notifiedMarkAsRead->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRUCT) {
            $this->notifiedUpdateSquareMemberProfile = new \SquareEventNotifiedUpdateSquareMemberProfile();
            $xfer += $this->notifiedUpdateSquareMemberProfile->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::STRUCT) {
            $this->notifiedKickoutFromSquare = new \SquareEventNotifiedKickoutFromSquare();
            $xfer += $this->notifiedKickoutFromSquare->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::STRUCT) {
            $this->notifiedShutdownSquare = new \SquareEventNotifiedShutdownSquare();
            $xfer += $this->notifiedShutdownSquare->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::STRUCT) {
            $this->notifiedDeleteSquareChat = new \SquareEventNotifiedDeleteSquareChat();
            $xfer += $this->notifiedDeleteSquareChat->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 31:
          if ($ftype == TType::STRUCT) {
            $this->notifiedUpdateSquareChatProfileName = new \SquareEventNotifiedUpdateSquareChatProfileName();
            $xfer += $this->notifiedUpdateSquareChatProfileName->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 32:
          if ($ftype == TType::STRUCT) {
            $this->notifiedUpdateSquareChatProfileImage = new \SquareEventNotifiedUpdateSquareChatProfileImage();
            $xfer += $this->notifiedUpdateSquareChatProfileImage->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRUCT) {
            $this->notifiedUpdateSquareStatus = new \SquareEventNotifiedUpdateSquareStatus();
            $xfer += $this->notifiedUpdateSquareStatus->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRUCT) {
            $this->notifiedUpdateSquareChatStatus = new \SquareEventNotifiedUpdateSquareChatStatus();
            $xfer += $this->notifiedUpdateSquareChatStatus->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRUCT) {
            $this->notifiedCreateSquareMember = new \SquareEventNotifiedCreateSquareMember();
            $xfer += $this->notifiedCreateSquareMember->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::STRUCT) {
            $this->notifiedCreateSquareChatMember = new \SquareEventNotifiedCreateSquareChatMember();
            $xfer += $this->notifiedCreateSquareChatMember->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::STRUCT) {
            $this->notifiedUpdateSquareMemberRelation = new \SquareEventNotifiedUpdateSquareMemberRelation();
            $xfer += $this->notifiedUpdateSquareMemberRelation->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRUCT) {
            $this->notifiedUpdateSquare = new \SquareEventNotifiedUpdateSquare();
            $xfer += $this->notifiedUpdateSquare->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRUCT) {
            $this->notifiedUpdateSquareMember = new \SquareEventNotifiedUpdateSquareMember();
            $xfer += $this->notifiedUpdateSquareMember->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRUCT) {
            $this->notifiedUpdateSquareChat = new \SquareEventNotifiedUpdateSquareChat();
            $xfer += $this->notifiedUpdateSquareChat->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::STRUCT) {
            $this->notificationJoinRequest = new \SquareEventNotificationJoinRequest();
            $xfer += $this->notificationJoinRequest->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::STRUCT) {
            $this->notificationJoined = new \SquareEventNotificationMemberUpdate();
            $xfer += $this->notificationJoined->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 24:
          if ($ftype == TType::STRUCT) {
            $this->notificationPromoteCoadmin = new \SquareEventNotificationMemberUpdate();
            $xfer += $this->notificationPromoteCoadmin->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 25:
          if ($ftype == TType::STRUCT) {
            $this->notificationPromoteAdmin = new \SquareEventNotificationMemberUpdate();
            $xfer += $this->notificationPromoteAdmin->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 26:
          if ($ftype == TType::STRUCT) {
            $this->notificationDemoteMember = new \SquareEventNotificationMemberUpdate();
            $xfer += $this->notificationDemoteMember->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 27:
          if ($ftype == TType::STRUCT) {
            $this->notificationKickedOut = new \SquareEventNotificationMemberUpdate();
            $xfer += $this->notificationKickedOut->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 28:
          if ($ftype == TType::STRUCT) {
            $this->notificationSquareDelete = new \SquareEventNotificationSquareDelete();
            $xfer += $this->notificationSquareDelete->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 29:
          if ($ftype == TType::STRUCT) {
            $this->notificationSquareChatDelete = new \SquareEventNotificationSquareChatDelete();
            $xfer += $this->notificationSquareChatDelete->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 30:
          if ($ftype == TType::STRUCT) {
            $this->notificationMessage = new \SquareEventNotificationMessage();
            $xfer += $this->notificationMessage->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRUCT) {
            $this->notifiedUpdateSquareChatMember = new \SquareEventNotifiedUpdateSquareChatMember();
            $xfer += $this->notifiedUpdateSquareChatMember->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRUCT) {
            $this->notifiedUpdateSquareAuthority = new \SquareEventNotifiedUpdateSquareAuthority();
            $xfer += $this->notifiedUpdateSquareAuthority->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 33:
          if ($ftype == TType::STRUCT) {
            $this->notifiedUpdateSquareFeatureSet = new \SquareEventNotifiedUpdateSquareFeatureSet();
            $xfer += $this->notifiedUpdateSquareFeatureSet->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareEventPayload');
    if ($this->receiveMessage !== null) {
      if (!is_object($this->receiveMessage)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('receiveMessage', TType::STRUCT, 1);
      $xfer += $this->receiveMessage->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sendMessage !== null) {
      if (!is_object($this->sendMessage)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('sendMessage', TType::STRUCT, 2);
      $xfer += $this->sendMessage->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notifiedJoinSquareChat !== null) {
      if (!is_object($this->notifiedJoinSquareChat)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('notifiedJoinSquareChat', TType::STRUCT, 3);
      $xfer += $this->notifiedJoinSquareChat->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notifiedInviteIntoSquareChat !== null) {
      if (!is_object($this->notifiedInviteIntoSquareChat)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('notifiedInviteIntoSquareChat', TType::STRUCT, 4);
      $xfer += $this->notifiedInviteIntoSquareChat->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notifiedLeaveSquareChat !== null) {
      if (!is_object($this->notifiedLeaveSquareChat)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('notifiedLeaveSquareChat', TType::STRUCT, 5);
      $xfer += $this->notifiedLeaveSquareChat->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notifiedDestroyMessage !== null) {
      if (!is_object($this->notifiedDestroyMessage)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('notifiedDestroyMessage', TType::STRUCT, 6);
      $xfer += $this->notifiedDestroyMessage->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notifiedMarkAsRead !== null) {
      if (!is_object($this->notifiedMarkAsRead)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('notifiedMarkAsRead', TType::STRUCT, 7);
      $xfer += $this->notifiedMarkAsRead->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notifiedUpdateSquareMemberProfile !== null) {
      if (!is_object($this->notifiedUpdateSquareMemberProfile)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('notifiedUpdateSquareMemberProfile', TType::STRUCT, 8);
      $xfer += $this->notifiedUpdateSquareMemberProfile->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notifiedUpdateSquare !== null) {
      if (!is_object($this->notifiedUpdateSquare)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('notifiedUpdateSquare', TType::STRUCT, 9);
      $xfer += $this->notifiedUpdateSquare->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notifiedUpdateSquareMember !== null) {
      if (!is_object($this->notifiedUpdateSquareMember)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('notifiedUpdateSquareMember', TType::STRUCT, 10);
      $xfer += $this->notifiedUpdateSquareMember->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notifiedUpdateSquareChat !== null) {
      if (!is_object($this->notifiedUpdateSquareChat)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('notifiedUpdateSquareChat', TType::STRUCT, 11);
      $xfer += $this->notifiedUpdateSquareChat->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notifiedUpdateSquareChatMember !== null) {
      if (!is_object($this->notifiedUpdateSquareChatMember)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('notifiedUpdateSquareChatMember', TType::STRUCT, 12);
      $xfer += $this->notifiedUpdateSquareChatMember->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notifiedUpdateSquareAuthority !== null) {
      if (!is_object($this->notifiedUpdateSquareAuthority)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('notifiedUpdateSquareAuthority', TType::STRUCT, 13);
      $xfer += $this->notifiedUpdateSquareAuthority->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notifiedUpdateSquareStatus !== null) {
      if (!is_object($this->notifiedUpdateSquareStatus)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('notifiedUpdateSquareStatus', TType::STRUCT, 14);
      $xfer += $this->notifiedUpdateSquareStatus->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notifiedUpdateSquareChatStatus !== null) {
      if (!is_object($this->notifiedUpdateSquareChatStatus)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('notifiedUpdateSquareChatStatus', TType::STRUCT, 15);
      $xfer += $this->notifiedUpdateSquareChatStatus->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notifiedCreateSquareMember !== null) {
      if (!is_object($this->notifiedCreateSquareMember)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('notifiedCreateSquareMember', TType::STRUCT, 16);
      $xfer += $this->notifiedCreateSquareMember->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notifiedCreateSquareChatMember !== null) {
      if (!is_object($this->notifiedCreateSquareChatMember)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('notifiedCreateSquareChatMember', TType::STRUCT, 17);
      $xfer += $this->notifiedCreateSquareChatMember->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notifiedUpdateSquareMemberRelation !== null) {
      if (!is_object($this->notifiedUpdateSquareMemberRelation)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('notifiedUpdateSquareMemberRelation', TType::STRUCT, 18);
      $xfer += $this->notifiedUpdateSquareMemberRelation->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notifiedShutdownSquare !== null) {
      if (!is_object($this->notifiedShutdownSquare)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('notifiedShutdownSquare', TType::STRUCT, 19);
      $xfer += $this->notifiedShutdownSquare->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notifiedKickoutFromSquare !== null) {
      if (!is_object($this->notifiedKickoutFromSquare)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('notifiedKickoutFromSquare', TType::STRUCT, 20);
      $xfer += $this->notifiedKickoutFromSquare->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notifiedDeleteSquareChat !== null) {
      if (!is_object($this->notifiedDeleteSquareChat)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('notifiedDeleteSquareChat', TType::STRUCT, 21);
      $xfer += $this->notifiedDeleteSquareChat->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notificationJoinRequest !== null) {
      if (!is_object($this->notificationJoinRequest)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('notificationJoinRequest', TType::STRUCT, 22);
      $xfer += $this->notificationJoinRequest->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notificationJoined !== null) {
      if (!is_object($this->notificationJoined)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('notificationJoined', TType::STRUCT, 23);
      $xfer += $this->notificationJoined->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notificationPromoteCoadmin !== null) {
      if (!is_object($this->notificationPromoteCoadmin)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('notificationPromoteCoadmin', TType::STRUCT, 24);
      $xfer += $this->notificationPromoteCoadmin->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notificationPromoteAdmin !== null) {
      if (!is_object($this->notificationPromoteAdmin)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('notificationPromoteAdmin', TType::STRUCT, 25);
      $xfer += $this->notificationPromoteAdmin->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notificationDemoteMember !== null) {
      if (!is_object($this->notificationDemoteMember)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('notificationDemoteMember', TType::STRUCT, 26);
      $xfer += $this->notificationDemoteMember->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notificationKickedOut !== null) {
      if (!is_object($this->notificationKickedOut)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('notificationKickedOut', TType::STRUCT, 27);
      $xfer += $this->notificationKickedOut->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notificationSquareDelete !== null) {
      if (!is_object($this->notificationSquareDelete)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('notificationSquareDelete', TType::STRUCT, 28);
      $xfer += $this->notificationSquareDelete->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notificationSquareChatDelete !== null) {
      if (!is_object($this->notificationSquareChatDelete)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('notificationSquareChatDelete', TType::STRUCT, 29);
      $xfer += $this->notificationSquareChatDelete->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notificationMessage !== null) {
      if (!is_object($this->notificationMessage)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('notificationMessage', TType::STRUCT, 30);
      $xfer += $this->notificationMessage->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notifiedUpdateSquareChatProfileName !== null) {
      if (!is_object($this->notifiedUpdateSquareChatProfileName)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('notifiedUpdateSquareChatProfileName', TType::STRUCT, 31);
      $xfer += $this->notifiedUpdateSquareChatProfileName->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notifiedUpdateSquareChatProfileImage !== null) {
      if (!is_object($this->notifiedUpdateSquareChatProfileImage)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('notifiedUpdateSquareChatProfileImage', TType::STRUCT, 32);
      $xfer += $this->notifiedUpdateSquareChatProfileImage->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notifiedUpdateSquareFeatureSet !== null) {
      if (!is_object($this->notifiedUpdateSquareFeatureSet)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('notifiedUpdateSquareFeatureSet', TType::STRUCT, 33);
      $xfer += $this->notifiedUpdateSquareFeatureSet->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareEvent {
  static $isValidate = false;

  static $_TSPEC = array(
    2 => array(
      'var' => 'createdTime',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    3 => array(
      'var' => 'type',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    4 => array(
      'var' => 'payload',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareEventPayload',
      ),
    5 => array(
      'var' => 'syncToken',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'eventStatus',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $createdTime = null;
  /**
   * @var int
   */
  public $type = null;
  /**
   * @var \SquareEventPayload
   */
  public $payload = null;
  /**
   * @var string
   */
  public $syncToken = null;
  /**
   * @var int
   */
  public $eventStatus = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['createdTime'])) {
        $this->createdTime = $vals['createdTime'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['payload'])) {
        $this->payload = $vals['payload'];
      }
      if (isset($vals['syncToken'])) {
        $this->syncToken = $vals['syncToken'];
      }
      if (isset($vals['eventStatus'])) {
        $this->eventStatus = $vals['eventStatus'];
      }
    }
  }

  public function getName() {
    return 'SquareEvent';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->createdTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->payload = new \SquareEventPayload();
            $xfer += $this->payload->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->syncToken);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->eventStatus);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareEvent');
    if ($this->createdTime !== null) {
      $xfer += $output->writeFieldBegin('createdTime', TType::I64, 2);
      $xfer += $output->writeI64($this->createdTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 3);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->payload !== null) {
      if (!is_object($this->payload)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('payload', TType::STRUCT, 4);
      $xfer += $this->payload->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->syncToken !== null) {
      $xfer += $output->writeFieldBegin('syncToken', TType::STRING, 5);
      $xfer += $output->writeString($this->syncToken);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->eventStatus !== null) {
      $xfer += $output->writeFieldBegin('eventStatus', TType::I32, 6);
      $xfer += $output->writeI32($this->eventStatus);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class FetchMyEventsRequest {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'subscriptionId',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    2 => array(
      'var' => 'syncToken',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'limit',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    4 => array(
      'var' => 'continuationToken',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var int
   */
  public $subscriptionId = null;
  /**
   * @var string
   */
  public $syncToken = null;
  /**
   * @var int
   */
  public $limit = null;
  /**
   * @var string
   */
  public $continuationToken = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['subscriptionId'])) {
        $this->subscriptionId = $vals['subscriptionId'];
      }
      if (isset($vals['syncToken'])) {
        $this->syncToken = $vals['syncToken'];
      }
      if (isset($vals['limit'])) {
        $this->limit = $vals['limit'];
      }
      if (isset($vals['continuationToken'])) {
        $this->continuationToken = $vals['continuationToken'];
      }
    }
  }

  public function getName() {
    return 'FetchMyEventsRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->subscriptionId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->syncToken);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->limit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->continuationToken);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FetchMyEventsRequest');
    if ($this->subscriptionId !== null) {
      $xfer += $output->writeFieldBegin('subscriptionId', TType::I64, 1);
      $xfer += $output->writeI64($this->subscriptionId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->syncToken !== null) {
      $xfer += $output->writeFieldBegin('syncToken', TType::STRING, 2);
      $xfer += $output->writeString($this->syncToken);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->limit !== null) {
      $xfer += $output->writeFieldBegin('limit', TType::I32, 3);
      $xfer += $output->writeI32($this->limit);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->continuationToken !== null) {
      $xfer += $output->writeFieldBegin('continuationToken', TType::STRING, 4);
      $xfer += $output->writeString($this->continuationToken);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class FetchMyEventsResponse {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'subscription',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SubscriptionState',
      ),
    2 => array(
      'var' => 'events',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\SquareEvent',
        ),
      ),
    3 => array(
      'var' => 'syncToken',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'continuationToken',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var \SubscriptionState
   */
  public $subscription = null;
  /**
   * @var \SquareEvent[]
   */
  public $events = null;
  /**
   * @var string
   */
  public $syncToken = null;
  /**
   * @var string
   */
  public $continuationToken = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['subscription'])) {
        $this->subscription = $vals['subscription'];
      }
      if (isset($vals['events'])) {
        $this->events = $vals['events'];
      }
      if (isset($vals['syncToken'])) {
        $this->syncToken = $vals['syncToken'];
      }
      if (isset($vals['continuationToken'])) {
        $this->continuationToken = $vals['continuationToken'];
      }
    }
  }

  public function getName() {
    return 'FetchMyEventsResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->subscription = new \SubscriptionState();
            $xfer += $this->subscription->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->events = array();
            $_size770 = 0;
            $_etype773 = 0;
            $xfer += $input->readListBegin($_etype773, $_size770);
            for ($_i774 = 0; $_i774 < $_size770; ++$_i774)
            {
              $elem775 = null;
              $elem775 = new \SquareEvent();
              $xfer += $elem775->read($input);
              $this->events []= $elem775;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->syncToken);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->continuationToken);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FetchMyEventsResponse');
    if ($this->subscription !== null) {
      if (!is_object($this->subscription)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('subscription', TType::STRUCT, 1);
      $xfer += $this->subscription->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->events !== null) {
      if (!is_array($this->events)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('events', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->events));
        {
          foreach ($this->events as $iter776)
          {
            $xfer += $iter776->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->syncToken !== null) {
      $xfer += $output->writeFieldBegin('syncToken', TType::STRING, 3);
      $xfer += $output->writeString($this->syncToken);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->continuationToken !== null) {
      $xfer += $output->writeFieldBegin('continuationToken', TType::STRING, 4);
      $xfer += $output->writeString($this->continuationToken);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class FetchSquareChatEventsRequest {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'subscriptionId',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    2 => array(
      'var' => 'squareChatMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'syncToken',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'limit',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    5 => array(
      'var' => 'direction',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $subscriptionId = null;
  /**
   * @var string
   */
  public $squareChatMid = null;
  /**
   * @var string
   */
  public $syncToken = null;
  /**
   * @var int
   */
  public $limit = null;
  /**
   * @var int
   */
  public $direction = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['subscriptionId'])) {
        $this->subscriptionId = $vals['subscriptionId'];
      }
      if (isset($vals['squareChatMid'])) {
        $this->squareChatMid = $vals['squareChatMid'];
      }
      if (isset($vals['syncToken'])) {
        $this->syncToken = $vals['syncToken'];
      }
      if (isset($vals['limit'])) {
        $this->limit = $vals['limit'];
      }
      if (isset($vals['direction'])) {
        $this->direction = $vals['direction'];
      }
    }
  }

  public function getName() {
    return 'FetchSquareChatEventsRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->subscriptionId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareChatMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->syncToken);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->limit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->direction);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FetchSquareChatEventsRequest');
    if ($this->subscriptionId !== null) {
      $xfer += $output->writeFieldBegin('subscriptionId', TType::I64, 1);
      $xfer += $output->writeI64($this->subscriptionId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareChatMid !== null) {
      $xfer += $output->writeFieldBegin('squareChatMid', TType::STRING, 2);
      $xfer += $output->writeString($this->squareChatMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->syncToken !== null) {
      $xfer += $output->writeFieldBegin('syncToken', TType::STRING, 3);
      $xfer += $output->writeString($this->syncToken);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->limit !== null) {
      $xfer += $output->writeFieldBegin('limit', TType::I32, 4);
      $xfer += $output->writeI32($this->limit);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->direction !== null) {
      $xfer += $output->writeFieldBegin('direction', TType::I32, 5);
      $xfer += $output->writeI32($this->direction);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class FetchSquareChatEventsResponse {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'subscription',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SubscriptionState',
      ),
    2 => array(
      'var' => 'events',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\SquareEvent',
        ),
      ),
    3 => array(
      'var' => 'syncToken',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'continuationToken',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var \SubscriptionState
   */
  public $subscription = null;
  /**
   * @var \SquareEvent[]
   */
  public $events = null;
  /**
   * @var string
   */
  public $syncToken = null;
  /**
   * @var string
   */
  public $continuationToken = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['subscription'])) {
        $this->subscription = $vals['subscription'];
      }
      if (isset($vals['events'])) {
        $this->events = $vals['events'];
      }
      if (isset($vals['syncToken'])) {
        $this->syncToken = $vals['syncToken'];
      }
      if (isset($vals['continuationToken'])) {
        $this->continuationToken = $vals['continuationToken'];
      }
    }
  }

  public function getName() {
    return 'FetchSquareChatEventsResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->subscription = new \SubscriptionState();
            $xfer += $this->subscription->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->events = array();
            $_size777 = 0;
            $_etype780 = 0;
            $xfer += $input->readListBegin($_etype780, $_size777);
            for ($_i781 = 0; $_i781 < $_size777; ++$_i781)
            {
              $elem782 = null;
              $elem782 = new \SquareEvent();
              $xfer += $elem782->read($input);
              $this->events []= $elem782;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->syncToken);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->continuationToken);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FetchSquareChatEventsResponse');
    if ($this->subscription !== null) {
      if (!is_object($this->subscription)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('subscription', TType::STRUCT, 1);
      $xfer += $this->subscription->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->events !== null) {
      if (!is_array($this->events)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('events', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->events));
        {
          foreach ($this->events as $iter783)
          {
            $xfer += $iter783->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->syncToken !== null) {
      $xfer += $output->writeFieldBegin('syncToken', TType::STRING, 3);
      $xfer += $output->writeString($this->syncToken);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->continuationToken !== null) {
      $xfer += $output->writeFieldBegin('continuationToken', TType::STRING, 4);
      $xfer += $output->writeString($this->continuationToken);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class InviteToSquareRequest {
  static $isValidate = false;

  static $_TSPEC = array(
    2 => array(
      'var' => 'squareMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'invitees',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRING,
      'elem' => array(
        'type' => TType::STRING,
        ),
      ),
    4 => array(
      'var' => 'squareChatMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $squareMid = null;
  /**
   * @var string[]
   */
  public $invitees = null;
  /**
   * @var string
   */
  public $squareChatMid = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['squareMid'])) {
        $this->squareMid = $vals['squareMid'];
      }
      if (isset($vals['invitees'])) {
        $this->invitees = $vals['invitees'];
      }
      if (isset($vals['squareChatMid'])) {
        $this->squareChatMid = $vals['squareChatMid'];
      }
    }
  }

  public function getName() {
    return 'InviteToSquareRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->invitees = array();
            $_size784 = 0;
            $_etype787 = 0;
            $xfer += $input->readListBegin($_etype787, $_size784);
            for ($_i788 = 0; $_i788 < $_size784; ++$_i788)
            {
              $elem789 = null;
              $xfer += $input->readString($elem789);
              $this->invitees []= $elem789;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareChatMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('InviteToSquareRequest');
    if ($this->squareMid !== null) {
      $xfer += $output->writeFieldBegin('squareMid', TType::STRING, 2);
      $xfer += $output->writeString($this->squareMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->invitees !== null) {
      if (!is_array($this->invitees)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('invitees', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRING, count($this->invitees));
        {
          foreach ($this->invitees as $iter790)
          {
            $xfer += $output->writeString($iter790);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareChatMid !== null) {
      $xfer += $output->writeFieldBegin('squareChatMid', TType::STRING, 4);
      $xfer += $output->writeString($this->squareChatMid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class InviteToSquareResponse {
  static $isValidate = false;

  static $_TSPEC = array(
    );


  public function __construct() {
  }

  public function getName() {
    return 'InviteToSquareResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('InviteToSquareResponse');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class InviteToSquareChatRequest {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'inviteeMids',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRING,
      'elem' => array(
        'type' => TType::STRING,
        ),
      ),
    2 => array(
      'var' => 'squareChatMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string[]
   */
  public $inviteeMids = null;
  /**
   * @var string
   */
  public $squareChatMid = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['inviteeMids'])) {
        $this->inviteeMids = $vals['inviteeMids'];
      }
      if (isset($vals['squareChatMid'])) {
        $this->squareChatMid = $vals['squareChatMid'];
      }
    }
  }

  public function getName() {
    return 'InviteToSquareChatRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->inviteeMids = array();
            $_size791 = 0;
            $_etype794 = 0;
            $xfer += $input->readListBegin($_etype794, $_size791);
            for ($_i795 = 0; $_i795 < $_size791; ++$_i795)
            {
              $elem796 = null;
              $xfer += $input->readString($elem796);
              $this->inviteeMids []= $elem796;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareChatMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('InviteToSquareChatRequest');
    if ($this->inviteeMids !== null) {
      if (!is_array($this->inviteeMids)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('inviteeMids', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->inviteeMids));
        {
          foreach ($this->inviteeMids as $iter797)
          {
            $xfer += $output->writeString($iter797);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareChatMid !== null) {
      $xfer += $output->writeFieldBegin('squareChatMid', TType::STRING, 2);
      $xfer += $output->writeString($this->squareChatMid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class InviteToSquareChatResponse {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'inviteeMids',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRING,
      'elem' => array(
        'type' => TType::STRING,
        ),
      ),
    );

  /**
   * @var string[]
   */
  public $inviteeMids = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['inviteeMids'])) {
        $this->inviteeMids = $vals['inviteeMids'];
      }
    }
  }

  public function getName() {
    return 'InviteToSquareChatResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->inviteeMids = array();
            $_size798 = 0;
            $_etype801 = 0;
            $xfer += $input->readListBegin($_etype801, $_size798);
            for ($_i802 = 0; $_i802 < $_size798; ++$_i802)
            {
              $elem803 = null;
              $xfer += $input->readString($elem803);
              $this->inviteeMids []= $elem803;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('InviteToSquareChatResponse');
    if ($this->inviteeMids !== null) {
      if (!is_array($this->inviteeMids)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('inviteeMids', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->inviteeMids));
        {
          foreach ($this->inviteeMids as $iter804)
          {
            $xfer += $output->writeString($iter804);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetSquareMemberRequest {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'squareMemberMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $squareMemberMid = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['squareMemberMid'])) {
        $this->squareMemberMid = $vals['squareMemberMid'];
      }
    }
  }

  public function getName() {
    return 'GetSquareMemberRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareMemberMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetSquareMemberRequest');
    if ($this->squareMemberMid !== null) {
      $xfer += $output->writeFieldBegin('squareMemberMid', TType::STRING, 1);
      $xfer += $output->writeString($this->squareMemberMid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetSquareMemberResponse {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'squareMember',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareMember',
      ),
    2 => array(
      'var' => 'relation',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareMemberRelation',
      ),
    3 => array(
      'var' => 'oneOnOneChatMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var \SquareMember
   */
  public $squareMember = null;
  /**
   * @var \SquareMemberRelation
   */
  public $relation = null;
  /**
   * @var string
   */
  public $oneOnOneChatMid = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['squareMember'])) {
        $this->squareMember = $vals['squareMember'];
      }
      if (isset($vals['relation'])) {
        $this->relation = $vals['relation'];
      }
      if (isset($vals['oneOnOneChatMid'])) {
        $this->oneOnOneChatMid = $vals['oneOnOneChatMid'];
      }
    }
  }

  public function getName() {
    return 'GetSquareMemberResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->squareMember = new \SquareMember();
            $xfer += $this->squareMember->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->relation = new \SquareMemberRelation();
            $xfer += $this->relation->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->oneOnOneChatMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetSquareMemberResponse');
    if ($this->squareMember !== null) {
      if (!is_object($this->squareMember)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squareMember', TType::STRUCT, 1);
      $xfer += $this->squareMember->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->relation !== null) {
      if (!is_object($this->relation)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('relation', TType::STRUCT, 2);
      $xfer += $this->relation->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->oneOnOneChatMid !== null) {
      $xfer += $output->writeFieldBegin('oneOnOneChatMid', TType::STRING, 3);
      $xfer += $output->writeString($this->oneOnOneChatMid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetSquareMembersRequest {
  static $isValidate = false;

  static $_TSPEC = array(
    2 => array(
      'var' => 'mids',
      'isRequired' => false,
      'type' => TType::SET,
      'etype' => TType::STRING,
      'elem' => array(
        'type' => TType::STRING,
        ),
      ),
    );

  /**
   * @var string[]
   */
  public $mids = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['mids'])) {
        $this->mids = $vals['mids'];
      }
    }
  }

  public function getName() {
    return 'GetSquareMembersRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 2:
          if ($ftype == TType::SET) {
            $this->mids = array();
            $_size805 = 0;
            $_etype808 = 0;
            $xfer += $input->readSetBegin($_etype808, $_size805);
            for ($_i809 = 0; $_i809 < $_size805; ++$_i809)
            {
              $elem810 = null;
              $xfer += $input->readString($elem810);
              $this->mids[$elem810] = true;
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetSquareMembersRequest');
    if ($this->mids !== null) {
      if (!is_array($this->mids)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('mids', TType::SET, 2);
      {
        $output->writeSetBegin(TType::STRING, count($this->mids));
        {
          foreach ($this->mids as $iter811 => $iter812)
          {
            $xfer += $output->writeString($iter811);
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetSquareMembersResponse {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'members',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareMember',
      ),
    );

  /**
   * @var \SquareMember
   */
  public $members = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['members'])) {
        $this->members = $vals['members'];
      }
    }
  }

  public function getName() {
    return 'GetSquareMembersResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->members = new \SquareMember();
            $xfer += $this->members->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetSquareMembersResponse');
    if ($this->members !== null) {
      if (!is_object($this->members)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('members', TType::STRUCT, 1);
      $xfer += $this->members->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetSquareMemberRelationsRequest {
  static $isValidate = false;

  static $_TSPEC = array(
    2 => array(
      'var' => 'state',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    3 => array(
      'var' => 'continuationToken',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'limit',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $state = null;
  /**
   * @var string
   */
  public $continuationToken = null;
  /**
   * @var int
   */
  public $limit = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['state'])) {
        $this->state = $vals['state'];
      }
      if (isset($vals['continuationToken'])) {
        $this->continuationToken = $vals['continuationToken'];
      }
      if (isset($vals['limit'])) {
        $this->limit = $vals['limit'];
      }
    }
  }

  public function getName() {
    return 'GetSquareMemberRelationsRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->state);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->continuationToken);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->limit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetSquareMemberRelationsRequest');
    if ($this->state !== null) {
      $xfer += $output->writeFieldBegin('state', TType::I32, 2);
      $xfer += $output->writeI32($this->state);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->continuationToken !== null) {
      $xfer += $output->writeFieldBegin('continuationToken', TType::STRING, 3);
      $xfer += $output->writeString($this->continuationToken);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->limit !== null) {
      $xfer += $output->writeFieldBegin('limit', TType::I32, 4);
      $xfer += $output->writeI32($this->limit);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetSquareMemberRelationsResponse {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'squareMembers',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\SquareMember',
        ),
      ),
    2 => array(
      'var' => 'relations',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRUCT,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRUCT,
        'class' => '\SquareMemberRelation',
        ),
      ),
    3 => array(
      'var' => 'continuationToken',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var \SquareMember[]
   */
  public $squareMembers = null;
  /**
   * @var array
   */
  public $relations = null;
  /**
   * @var string
   */
  public $continuationToken = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['squareMembers'])) {
        $this->squareMembers = $vals['squareMembers'];
      }
      if (isset($vals['relations'])) {
        $this->relations = $vals['relations'];
      }
      if (isset($vals['continuationToken'])) {
        $this->continuationToken = $vals['continuationToken'];
      }
    }
  }

  public function getName() {
    return 'GetSquareMemberRelationsResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->squareMembers = array();
            $_size813 = 0;
            $_etype816 = 0;
            $xfer += $input->readListBegin($_etype816, $_size813);
            for ($_i817 = 0; $_i817 < $_size813; ++$_i817)
            {
              $elem818 = null;
              $elem818 = new \SquareMember();
              $xfer += $elem818->read($input);
              $this->squareMembers []= $elem818;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::MAP) {
            $this->relations = array();
            $_size819 = 0;
            $_ktype820 = 0;
            $_vtype821 = 0;
            $xfer += $input->readMapBegin($_ktype820, $_vtype821, $_size819);
            for ($_i823 = 0; $_i823 < $_size819; ++$_i823)
            {
              $key824 = '';
              $val825 = new \SquareMemberRelation();
              $xfer += $input->readString($key824);
              $val825 = new \SquareMemberRelation();
              $xfer += $val825->read($input);
              $this->relations[$key824] = $val825;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->continuationToken);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetSquareMemberRelationsResponse');
    if ($this->squareMembers !== null) {
      if (!is_array($this->squareMembers)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squareMembers', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->squareMembers));
        {
          foreach ($this->squareMembers as $iter826)
          {
            $xfer += $iter826->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->relations !== null) {
      if (!is_array($this->relations)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('relations', TType::MAP, 2);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->relations));
        {
          foreach ($this->relations as $kiter827 => $viter828)
          {
            $xfer += $output->writeString($kiter827);
            $xfer += $viter828->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->continuationToken !== null) {
      $xfer += $output->writeFieldBegin('continuationToken', TType::STRING, 3);
      $xfer += $output->writeString($this->continuationToken);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetSquareMemberRelationRequest {
  static $isValidate = false;

  static $_TSPEC = array(
    2 => array(
      'var' => 'squareMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'targetSquareMemberMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $squareMid = null;
  /**
   * @var string
   */
  public $targetSquareMemberMid = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['squareMid'])) {
        $this->squareMid = $vals['squareMid'];
      }
      if (isset($vals['targetSquareMemberMid'])) {
        $this->targetSquareMemberMid = $vals['targetSquareMemberMid'];
      }
    }
  }

  public function getName() {
    return 'GetSquareMemberRelationRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->targetSquareMemberMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetSquareMemberRelationRequest');
    if ($this->squareMid !== null) {
      $xfer += $output->writeFieldBegin('squareMid', TType::STRING, 2);
      $xfer += $output->writeString($this->squareMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->targetSquareMemberMid !== null) {
      $xfer += $output->writeFieldBegin('targetSquareMemberMid', TType::STRING, 3);
      $xfer += $output->writeString($this->targetSquareMemberMid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetSquareMemberRelationResponse {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'squareMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'targetSquareMemberMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'relation',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareMemberRelation',
      ),
    );

  /**
   * @var string
   */
  public $squareMid = null;
  /**
   * @var string
   */
  public $targetSquareMemberMid = null;
  /**
   * @var \SquareMemberRelation
   */
  public $relation = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['squareMid'])) {
        $this->squareMid = $vals['squareMid'];
      }
      if (isset($vals['targetSquareMemberMid'])) {
        $this->targetSquareMemberMid = $vals['targetSquareMemberMid'];
      }
      if (isset($vals['relation'])) {
        $this->relation = $vals['relation'];
      }
    }
  }

  public function getName() {
    return 'GetSquareMemberRelationResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->targetSquareMemberMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->relation = new \SquareMemberRelation();
            $xfer += $this->relation->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetSquareMemberRelationResponse');
    if ($this->squareMid !== null) {
      $xfer += $output->writeFieldBegin('squareMid', TType::STRING, 1);
      $xfer += $output->writeString($this->squareMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->targetSquareMemberMid !== null) {
      $xfer += $output->writeFieldBegin('targetSquareMemberMid', TType::STRING, 2);
      $xfer += $output->writeString($this->targetSquareMemberMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->relation !== null) {
      if (!is_object($this->relation)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('relation', TType::STRUCT, 3);
      $xfer += $this->relation->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Category {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'id',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'name',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var int
   */
  public $id = null;
  /**
   * @var string
   */
  public $name = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
    }
  }

  public function getName() {
    return 'Category';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Category');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetSquareCategoriesRequest {
  static $isValidate = false;

  static $_TSPEC = array(
    );


  public function __construct() {
  }

  public function getName() {
    return 'GetSquareCategoriesRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetSquareCategoriesRequest');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetSquareCategoriesResponse {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'categoryList',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\Category',
        ),
      ),
    );

  /**
   * @var \Category[]
   */
  public $categoryList = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['categoryList'])) {
        $this->categoryList = $vals['categoryList'];
      }
    }
  }

  public function getName() {
    return 'GetSquareCategoriesResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->categoryList = array();
            $_size829 = 0;
            $_etype832 = 0;
            $xfer += $input->readListBegin($_etype832, $_size829);
            for ($_i833 = 0; $_i833 < $_size829; ++$_i833)
            {
              $elem834 = null;
              $elem834 = new \Category();
              $xfer += $elem834->read($input);
              $this->categoryList []= $elem834;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetSquareCategoriesResponse');
    if ($this->categoryList !== null) {
      if (!is_array($this->categoryList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('categoryList', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->categoryList));
        {
          foreach ($this->categoryList as $iter835)
          {
            $xfer += $iter835->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UpdateSquareRequest {
  static $isValidate = false;

  static $_TSPEC = array(
    2 => array(
      'var' => 'updatedAttrs',
      'isRequired' => false,
      'type' => TType::SET,
      'etype' => TType::I32,
      'elem' => array(
        'type' => TType::I32,
        ),
      ),
    3 => array(
      'var' => 'square',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Square',
      ),
    );

  /**
   * @var int[]
   */
  public $updatedAttrs = null;
  /**
   * @var \Square
   */
  public $square = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['updatedAttrs'])) {
        $this->updatedAttrs = $vals['updatedAttrs'];
      }
      if (isset($vals['square'])) {
        $this->square = $vals['square'];
      }
    }
  }

  public function getName() {
    return 'UpdateSquareRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 2:
          if ($ftype == TType::SET) {
            $this->updatedAttrs = array();
            $_size836 = 0;
            $_etype839 = 0;
            $xfer += $input->readSetBegin($_etype839, $_size836);
            for ($_i840 = 0; $_i840 < $_size836; ++$_i840)
            {
              $elem841 = null;
              $xfer += $input->readI32($elem841);
              $this->updatedAttrs[$elem841] = true;
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->square = new \Square();
            $xfer += $this->square->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UpdateSquareRequest');
    if ($this->updatedAttrs !== null) {
      if (!is_array($this->updatedAttrs)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('updatedAttrs', TType::SET, 2);
      {
        $output->writeSetBegin(TType::I32, count($this->updatedAttrs));
        {
          foreach ($this->updatedAttrs as $iter842 => $iter843)
          {
            $xfer += $output->writeI32($iter842);
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->square !== null) {
      if (!is_object($this->square)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('square', TType::STRUCT, 3);
      $xfer += $this->square->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UpdateSquareResponse {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'updatedAttrs',
      'isRequired' => false,
      'type' => TType::SET,
      'etype' => TType::I32,
      'elem' => array(
        'type' => TType::I32,
        ),
      ),
    2 => array(
      'var' => 'square',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Square',
      ),
    );

  /**
   * @var int[]
   */
  public $updatedAttrs = null;
  /**
   * @var \Square
   */
  public $square = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['updatedAttrs'])) {
        $this->updatedAttrs = $vals['updatedAttrs'];
      }
      if (isset($vals['square'])) {
        $this->square = $vals['square'];
      }
    }
  }

  public function getName() {
    return 'UpdateSquareResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::SET) {
            $this->updatedAttrs = array();
            $_size844 = 0;
            $_etype847 = 0;
            $xfer += $input->readSetBegin($_etype847, $_size844);
            for ($_i848 = 0; $_i848 < $_size844; ++$_i848)
            {
              $elem849 = null;
              $xfer += $input->readI32($elem849);
              $this->updatedAttrs[$elem849] = true;
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->square = new \Square();
            $xfer += $this->square->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UpdateSquareResponse');
    if ($this->updatedAttrs !== null) {
      if (!is_array($this->updatedAttrs)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('updatedAttrs', TType::SET, 1);
      {
        $output->writeSetBegin(TType::I32, count($this->updatedAttrs));
        {
          foreach ($this->updatedAttrs as $iter850 => $iter851)
          {
            $xfer += $output->writeI32($iter850);
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->square !== null) {
      if (!is_object($this->square)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('square', TType::STRUCT, 2);
      $xfer += $this->square->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SearchSquaresRequest {
  static $isValidate = false;

  static $_TSPEC = array(
    2 => array(
      'var' => 'query',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'continuationToken',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'limit',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var string
   */
  public $query = null;
  /**
   * @var string
   */
  public $continuationToken = null;
  /**
   * @var int
   */
  public $limit = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['query'])) {
        $this->query = $vals['query'];
      }
      if (isset($vals['continuationToken'])) {
        $this->continuationToken = $vals['continuationToken'];
      }
      if (isset($vals['limit'])) {
        $this->limit = $vals['limit'];
      }
    }
  }

  public function getName() {
    return 'SearchSquaresRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->query);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->continuationToken);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->limit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SearchSquaresRequest');
    if ($this->query !== null) {
      $xfer += $output->writeFieldBegin('query', TType::STRING, 2);
      $xfer += $output->writeString($this->query);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->continuationToken !== null) {
      $xfer += $output->writeFieldBegin('continuationToken', TType::STRING, 3);
      $xfer += $output->writeString($this->continuationToken);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->limit !== null) {
      $xfer += $output->writeFieldBegin('limit', TType::I32, 4);
      $xfer += $output->writeI32($this->limit);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SearchSquaresResponse {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'squares',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\Square',
        ),
      ),
    2 => array(
      'var' => 'squareStatuses',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRUCT,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRUCT,
        'class' => '\SquareStatus',
        ),
      ),
    3 => array(
      'var' => 'myMemberships',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRUCT,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRUCT,
        'class' => '\SquareMember',
        ),
      ),
    4 => array(
      'var' => 'continuationToken',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'noteStatuses',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRUCT,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRUCT,
        'class' => '\NoteStatus',
        ),
      ),
    );

  /**
   * @var \Square[]
   */
  public $squares = null;
  /**
   * @var array
   */
  public $squareStatuses = null;
  /**
   * @var array
   */
  public $myMemberships = null;
  /**
   * @var string
   */
  public $continuationToken = null;
  /**
   * @var array
   */
  public $noteStatuses = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['squares'])) {
        $this->squares = $vals['squares'];
      }
      if (isset($vals['squareStatuses'])) {
        $this->squareStatuses = $vals['squareStatuses'];
      }
      if (isset($vals['myMemberships'])) {
        $this->myMemberships = $vals['myMemberships'];
      }
      if (isset($vals['continuationToken'])) {
        $this->continuationToken = $vals['continuationToken'];
      }
      if (isset($vals['noteStatuses'])) {
        $this->noteStatuses = $vals['noteStatuses'];
      }
    }
  }

  public function getName() {
    return 'SearchSquaresResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->squares = array();
            $_size852 = 0;
            $_etype855 = 0;
            $xfer += $input->readListBegin($_etype855, $_size852);
            for ($_i856 = 0; $_i856 < $_size852; ++$_i856)
            {
              $elem857 = null;
              $elem857 = new \Square();
              $xfer += $elem857->read($input);
              $this->squares []= $elem857;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::MAP) {
            $this->squareStatuses = array();
            $_size858 = 0;
            $_ktype859 = 0;
            $_vtype860 = 0;
            $xfer += $input->readMapBegin($_ktype859, $_vtype860, $_size858);
            for ($_i862 = 0; $_i862 < $_size858; ++$_i862)
            {
              $key863 = '';
              $val864 = new \SquareStatus();
              $xfer += $input->readString($key863);
              $val864 = new \SquareStatus();
              $xfer += $val864->read($input);
              $this->squareStatuses[$key863] = $val864;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::MAP) {
            $this->myMemberships = array();
            $_size865 = 0;
            $_ktype866 = 0;
            $_vtype867 = 0;
            $xfer += $input->readMapBegin($_ktype866, $_vtype867, $_size865);
            for ($_i869 = 0; $_i869 < $_size865; ++$_i869)
            {
              $key870 = '';
              $val871 = new \SquareMember();
              $xfer += $input->readString($key870);
              $val871 = new \SquareMember();
              $xfer += $val871->read($input);
              $this->myMemberships[$key870] = $val871;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->continuationToken);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::MAP) {
            $this->noteStatuses = array();
            $_size872 = 0;
            $_ktype873 = 0;
            $_vtype874 = 0;
            $xfer += $input->readMapBegin($_ktype873, $_vtype874, $_size872);
            for ($_i876 = 0; $_i876 < $_size872; ++$_i876)
            {
              $key877 = '';
              $val878 = new \NoteStatus();
              $xfer += $input->readString($key877);
              $val878 = new \NoteStatus();
              $xfer += $val878->read($input);
              $this->noteStatuses[$key877] = $val878;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SearchSquaresResponse');
    if ($this->squares !== null) {
      if (!is_array($this->squares)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squares', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->squares));
        {
          foreach ($this->squares as $iter879)
          {
            $xfer += $iter879->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareStatuses !== null) {
      if (!is_array($this->squareStatuses)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squareStatuses', TType::MAP, 2);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->squareStatuses));
        {
          foreach ($this->squareStatuses as $kiter880 => $viter881)
          {
            $xfer += $output->writeString($kiter880);
            $xfer += $viter881->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->myMemberships !== null) {
      if (!is_array($this->myMemberships)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('myMemberships', TType::MAP, 3);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->myMemberships));
        {
          foreach ($this->myMemberships as $kiter882 => $viter883)
          {
            $xfer += $output->writeString($kiter882);
            $xfer += $viter883->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->continuationToken !== null) {
      $xfer += $output->writeFieldBegin('continuationToken', TType::STRING, 4);
      $xfer += $output->writeString($this->continuationToken);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->noteStatuses !== null) {
      if (!is_array($this->noteStatuses)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('noteStatuses', TType::MAP, 5);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->noteStatuses));
        {
          foreach ($this->noteStatuses as $kiter884 => $viter885)
          {
            $xfer += $output->writeString($kiter884);
            $xfer += $viter885->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetSquareFeatureSetRequest {
  static $isValidate = false;

  static $_TSPEC = array(
    2 => array(
      'var' => 'squareMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $squareMid = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['squareMid'])) {
        $this->squareMid = $vals['squareMid'];
      }
    }
  }

  public function getName() {
    return 'GetSquareFeatureSetRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetSquareFeatureSetRequest');
    if ($this->squareMid !== null) {
      $xfer += $output->writeFieldBegin('squareMid', TType::STRING, 2);
      $xfer += $output->writeString($this->squareMid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetSquareFeatureSetResponse {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'squareFeatureSet',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareFeatureSet',
      ),
    );

  /**
   * @var \SquareFeatureSet
   */
  public $squareFeatureSet = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['squareFeatureSet'])) {
        $this->squareFeatureSet = $vals['squareFeatureSet'];
      }
    }
  }

  public function getName() {
    return 'GetSquareFeatureSetResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->squareFeatureSet = new \SquareFeatureSet();
            $xfer += $this->squareFeatureSet->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetSquareFeatureSetResponse');
    if ($this->squareFeatureSet !== null) {
      if (!is_object($this->squareFeatureSet)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squareFeatureSet', TType::STRUCT, 1);
      $xfer += $this->squareFeatureSet->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UpdateSquareFeatureSetRequest {
  static $isValidate = false;

  static $_TSPEC = array(
    2 => array(
      'var' => 'updateAttributes',
      'isRequired' => false,
      'type' => TType::SET,
      'etype' => TType::I32,
      'elem' => array(
        'type' => TType::I32,
        ),
      ),
    3 => array(
      'var' => 'squareFeatureSet',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareFeatureSet',
      ),
    );

  /**
   * @var int[]
   */
  public $updateAttributes = null;
  /**
   * @var \SquareFeatureSet
   */
  public $squareFeatureSet = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['updateAttributes'])) {
        $this->updateAttributes = $vals['updateAttributes'];
      }
      if (isset($vals['squareFeatureSet'])) {
        $this->squareFeatureSet = $vals['squareFeatureSet'];
      }
    }
  }

  public function getName() {
    return 'UpdateSquareFeatureSetRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 2:
          if ($ftype == TType::SET) {
            $this->updateAttributes = array();
            $_size886 = 0;
            $_etype889 = 0;
            $xfer += $input->readSetBegin($_etype889, $_size886);
            for ($_i890 = 0; $_i890 < $_size886; ++$_i890)
            {
              $elem891 = null;
              $xfer += $input->readI32($elem891);
              $this->updateAttributes[$elem891] = true;
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->squareFeatureSet = new \SquareFeatureSet();
            $xfer += $this->squareFeatureSet->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UpdateSquareFeatureSetRequest');
    if ($this->updateAttributes !== null) {
      if (!is_array($this->updateAttributes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('updateAttributes', TType::SET, 2);
      {
        $output->writeSetBegin(TType::I32, count($this->updateAttributes));
        {
          foreach ($this->updateAttributes as $iter892 => $iter893)
          {
            $xfer += $output->writeI32($iter892);
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareFeatureSet !== null) {
      if (!is_object($this->squareFeatureSet)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squareFeatureSet', TType::STRUCT, 3);
      $xfer += $this->squareFeatureSet->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UpdateSquareFeatureSetResponse {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'updateAttributes',
      'isRequired' => false,
      'type' => TType::SET,
      'etype' => TType::I32,
      'elem' => array(
        'type' => TType::I32,
        ),
      ),
    2 => array(
      'var' => 'squareFeatureSet',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareFeatureSet',
      ),
    );

  /**
   * @var int[]
   */
  public $updateAttributes = null;
  /**
   * @var \SquareFeatureSet
   */
  public $squareFeatureSet = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['updateAttributes'])) {
        $this->updateAttributes = $vals['updateAttributes'];
      }
      if (isset($vals['squareFeatureSet'])) {
        $this->squareFeatureSet = $vals['squareFeatureSet'];
      }
    }
  }

  public function getName() {
    return 'UpdateSquareFeatureSetResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::SET) {
            $this->updateAttributes = array();
            $_size894 = 0;
            $_etype897 = 0;
            $xfer += $input->readSetBegin($_etype897, $_size894);
            for ($_i898 = 0; $_i898 < $_size894; ++$_i898)
            {
              $elem899 = null;
              $xfer += $input->readI32($elem899);
              $this->updateAttributes[$elem899] = true;
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->squareFeatureSet = new \SquareFeatureSet();
            $xfer += $this->squareFeatureSet->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UpdateSquareFeatureSetResponse');
    if ($this->updateAttributes !== null) {
      if (!is_array($this->updateAttributes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('updateAttributes', TType::SET, 1);
      {
        $output->writeSetBegin(TType::I32, count($this->updateAttributes));
        {
          foreach ($this->updateAttributes as $iter900 => $iter901)
          {
            $xfer += $output->writeI32($iter900);
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareFeatureSet !== null) {
      if (!is_object($this->squareFeatureSet)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squareFeatureSet', TType::STRUCT, 2);
      $xfer += $this->squareFeatureSet->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UpdateSquareMemberRequest {
  static $isValidate = false;

  static $_TSPEC = array(
    2 => array(
      'var' => 'updatedAttrs',
      'isRequired' => false,
      'type' => TType::SET,
      'etype' => TType::I32,
      'elem' => array(
        'type' => TType::I32,
        ),
      ),
    3 => array(
      'var' => 'updatedPreferenceAttrs',
      'isRequired' => false,
      'type' => TType::SET,
      'etype' => TType::I32,
      'elem' => array(
        'type' => TType::I32,
        ),
      ),
    4 => array(
      'var' => 'squareMember',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareMember',
      ),
    );

  /**
   * @var int[]
   */
  public $updatedAttrs = null;
  /**
   * @var int[]
   */
  public $updatedPreferenceAttrs = null;
  /**
   * @var \SquareMember
   */
  public $squareMember = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['updatedAttrs'])) {
        $this->updatedAttrs = $vals['updatedAttrs'];
      }
      if (isset($vals['updatedPreferenceAttrs'])) {
        $this->updatedPreferenceAttrs = $vals['updatedPreferenceAttrs'];
      }
      if (isset($vals['squareMember'])) {
        $this->squareMember = $vals['squareMember'];
      }
    }
  }

  public function getName() {
    return 'UpdateSquareMemberRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 2:
          if ($ftype == TType::SET) {
            $this->updatedAttrs = array();
            $_size902 = 0;
            $_etype905 = 0;
            $xfer += $input->readSetBegin($_etype905, $_size902);
            for ($_i906 = 0; $_i906 < $_size902; ++$_i906)
            {
              $elem907 = null;
              $xfer += $input->readI32($elem907);
              $this->updatedAttrs[$elem907] = true;
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::SET) {
            $this->updatedPreferenceAttrs = array();
            $_size908 = 0;
            $_etype911 = 0;
            $xfer += $input->readSetBegin($_etype911, $_size908);
            for ($_i912 = 0; $_i912 < $_size908; ++$_i912)
            {
              $elem913 = null;
              $xfer += $input->readI32($elem913);
              $this->updatedPreferenceAttrs[$elem913] = true;
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->squareMember = new \SquareMember();
            $xfer += $this->squareMember->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UpdateSquareMemberRequest');
    if ($this->updatedAttrs !== null) {
      if (!is_array($this->updatedAttrs)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('updatedAttrs', TType::SET, 2);
      {
        $output->writeSetBegin(TType::I32, count($this->updatedAttrs));
        {
          foreach ($this->updatedAttrs as $iter914 => $iter915)
          {
            $xfer += $output->writeI32($iter914);
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->updatedPreferenceAttrs !== null) {
      if (!is_array($this->updatedPreferenceAttrs)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('updatedPreferenceAttrs', TType::SET, 3);
      {
        $output->writeSetBegin(TType::I32, count($this->updatedPreferenceAttrs));
        {
          foreach ($this->updatedPreferenceAttrs as $iter916 => $iter917)
          {
            $xfer += $output->writeI32($iter916);
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareMember !== null) {
      if (!is_object($this->squareMember)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squareMember', TType::STRUCT, 4);
      $xfer += $this->squareMember->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UpdateSquareMemberResponse {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'updatedAttrs',
      'isRequired' => false,
      'type' => TType::SET,
      'etype' => TType::I32,
      'elem' => array(
        'type' => TType::I32,
        ),
      ),
    2 => array(
      'var' => 'squareMember',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareMember',
      ),
    3 => array(
      'var' => 'updatedPreferenceAttrs',
      'isRequired' => false,
      'type' => TType::SET,
      'etype' => TType::I32,
      'elem' => array(
        'type' => TType::I32,
        ),
      ),
    );

  /**
   * @var int[]
   */
  public $updatedAttrs = null;
  /**
   * @var \SquareMember
   */
  public $squareMember = null;
  /**
   * @var int[]
   */
  public $updatedPreferenceAttrs = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['updatedAttrs'])) {
        $this->updatedAttrs = $vals['updatedAttrs'];
      }
      if (isset($vals['squareMember'])) {
        $this->squareMember = $vals['squareMember'];
      }
      if (isset($vals['updatedPreferenceAttrs'])) {
        $this->updatedPreferenceAttrs = $vals['updatedPreferenceAttrs'];
      }
    }
  }

  public function getName() {
    return 'UpdateSquareMemberResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::SET) {
            $this->updatedAttrs = array();
            $_size918 = 0;
            $_etype921 = 0;
            $xfer += $input->readSetBegin($_etype921, $_size918);
            for ($_i922 = 0; $_i922 < $_size918; ++$_i922)
            {
              $elem923 = null;
              $xfer += $input->readI32($elem923);
              $this->updatedAttrs[$elem923] = true;
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->squareMember = new \SquareMember();
            $xfer += $this->squareMember->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::SET) {
            $this->updatedPreferenceAttrs = array();
            $_size924 = 0;
            $_etype927 = 0;
            $xfer += $input->readSetBegin($_etype927, $_size924);
            for ($_i928 = 0; $_i928 < $_size924; ++$_i928)
            {
              $elem929 = null;
              $xfer += $input->readI32($elem929);
              $this->updatedPreferenceAttrs[$elem929] = true;
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UpdateSquareMemberResponse');
    if ($this->updatedAttrs !== null) {
      if (!is_array($this->updatedAttrs)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('updatedAttrs', TType::SET, 1);
      {
        $output->writeSetBegin(TType::I32, count($this->updatedAttrs));
        {
          foreach ($this->updatedAttrs as $iter930 => $iter931)
          {
            $xfer += $output->writeI32($iter930);
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareMember !== null) {
      if (!is_object($this->squareMember)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squareMember', TType::STRUCT, 2);
      $xfer += $this->squareMember->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->updatedPreferenceAttrs !== null) {
      if (!is_array($this->updatedPreferenceAttrs)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('updatedPreferenceAttrs', TType::SET, 3);
      {
        $output->writeSetBegin(TType::I32, count($this->updatedPreferenceAttrs));
        {
          foreach ($this->updatedPreferenceAttrs as $iter932 => $iter933)
          {
            $xfer += $output->writeI32($iter932);
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UpdateSquareMembersRequest {
  static $isValidate = false;

  static $_TSPEC = array(
    2 => array(
      'var' => 'updatedAttrs',
      'isRequired' => false,
      'type' => TType::SET,
      'etype' => TType::I32,
      'elem' => array(
        'type' => TType::I32,
        ),
      ),
    3 => array(
      'var' => 'members',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\SquareMember',
        ),
      ),
    );

  /**
   * @var int[]
   */
  public $updatedAttrs = null;
  /**
   * @var \SquareMember[]
   */
  public $members = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['updatedAttrs'])) {
        $this->updatedAttrs = $vals['updatedAttrs'];
      }
      if (isset($vals['members'])) {
        $this->members = $vals['members'];
      }
    }
  }

  public function getName() {
    return 'UpdateSquareMembersRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 2:
          if ($ftype == TType::SET) {
            $this->updatedAttrs = array();
            $_size934 = 0;
            $_etype937 = 0;
            $xfer += $input->readSetBegin($_etype937, $_size934);
            for ($_i938 = 0; $_i938 < $_size934; ++$_i938)
            {
              $elem939 = null;
              $xfer += $input->readI32($elem939);
              $this->updatedAttrs[$elem939] = true;
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->members = array();
            $_size940 = 0;
            $_etype943 = 0;
            $xfer += $input->readListBegin($_etype943, $_size940);
            for ($_i944 = 0; $_i944 < $_size940; ++$_i944)
            {
              $elem945 = null;
              $elem945 = new \SquareMember();
              $xfer += $elem945->read($input);
              $this->members []= $elem945;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UpdateSquareMembersRequest');
    if ($this->updatedAttrs !== null) {
      if (!is_array($this->updatedAttrs)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('updatedAttrs', TType::SET, 2);
      {
        $output->writeSetBegin(TType::I32, count($this->updatedAttrs));
        {
          foreach ($this->updatedAttrs as $iter946 => $iter947)
          {
            $xfer += $output->writeI32($iter946);
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->members !== null) {
      if (!is_array($this->members)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('members', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->members));
        {
          foreach ($this->members as $iter948)
          {
            $xfer += $iter948->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UpdateSquareMembersResponse {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'updatedAttrs',
      'isRequired' => false,
      'type' => TType::SET,
      'etype' => TType::I32,
      'elem' => array(
        'type' => TType::I32,
        ),
      ),
    2 => array(
      'var' => 'editor',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareMember',
      ),
    3 => array(
      'var' => 'members',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRUCT,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRUCT,
        'class' => '\SquareMember',
        ),
      ),
    );

  /**
   * @var int[]
   */
  public $updatedAttrs = null;
  /**
   * @var \SquareMember
   */
  public $editor = null;
  /**
   * @var array
   */
  public $members = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['updatedAttrs'])) {
        $this->updatedAttrs = $vals['updatedAttrs'];
      }
      if (isset($vals['editor'])) {
        $this->editor = $vals['editor'];
      }
      if (isset($vals['members'])) {
        $this->members = $vals['members'];
      }
    }
  }

  public function getName() {
    return 'UpdateSquareMembersResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::SET) {
            $this->updatedAttrs = array();
            $_size949 = 0;
            $_etype952 = 0;
            $xfer += $input->readSetBegin($_etype952, $_size949);
            for ($_i953 = 0; $_i953 < $_size949; ++$_i953)
            {
              $elem954 = null;
              $xfer += $input->readI32($elem954);
              $this->updatedAttrs[$elem954] = true;
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->editor = new \SquareMember();
            $xfer += $this->editor->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::MAP) {
            $this->members = array();
            $_size955 = 0;
            $_ktype956 = 0;
            $_vtype957 = 0;
            $xfer += $input->readMapBegin($_ktype956, $_vtype957, $_size955);
            for ($_i959 = 0; $_i959 < $_size955; ++$_i959)
            {
              $key960 = '';
              $val961 = new \SquareMember();
              $xfer += $input->readString($key960);
              $val961 = new \SquareMember();
              $xfer += $val961->read($input);
              $this->members[$key960] = $val961;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UpdateSquareMembersResponse');
    if ($this->updatedAttrs !== null) {
      if (!is_array($this->updatedAttrs)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('updatedAttrs', TType::SET, 1);
      {
        $output->writeSetBegin(TType::I32, count($this->updatedAttrs));
        {
          foreach ($this->updatedAttrs as $iter962 => $iter963)
          {
            $xfer += $output->writeI32($iter962);
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->editor !== null) {
      if (!is_object($this->editor)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('editor', TType::STRUCT, 2);
      $xfer += $this->editor->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->members !== null) {
      if (!is_array($this->members)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('members', TType::MAP, 3);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->members));
        {
          foreach ($this->members as $kiter964 => $viter965)
          {
            $xfer += $output->writeString($kiter964);
            $xfer += $viter965->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class RejectSquareMembersRequest {
  static $isValidate = false;

  static $_TSPEC = array(
    2 => array(
      'var' => 'squareMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'requestedMemberMids',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRING,
      'elem' => array(
        'type' => TType::STRING,
        ),
      ),
    );

  /**
   * @var string
   */
  public $squareMid = null;
  /**
   * @var string[]
   */
  public $requestedMemberMids = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['squareMid'])) {
        $this->squareMid = $vals['squareMid'];
      }
      if (isset($vals['requestedMemberMids'])) {
        $this->requestedMemberMids = $vals['requestedMemberMids'];
      }
    }
  }

  public function getName() {
    return 'RejectSquareMembersRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->requestedMemberMids = array();
            $_size966 = 0;
            $_etype969 = 0;
            $xfer += $input->readListBegin($_etype969, $_size966);
            for ($_i970 = 0; $_i970 < $_size966; ++$_i970)
            {
              $elem971 = null;
              $xfer += $input->readString($elem971);
              $this->requestedMemberMids []= $elem971;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RejectSquareMembersRequest');
    if ($this->squareMid !== null) {
      $xfer += $output->writeFieldBegin('squareMid', TType::STRING, 2);
      $xfer += $output->writeString($this->squareMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->requestedMemberMids !== null) {
      if (!is_array($this->requestedMemberMids)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('requestedMemberMids', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRING, count($this->requestedMemberMids));
        {
          foreach ($this->requestedMemberMids as $iter972)
          {
            $xfer += $output->writeString($iter972);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class RejectSquareMembersResponse {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'rejectedMembers',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\SquareMember',
        ),
      ),
    2 => array(
      'var' => 'status',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareStatus',
      ),
    );

  /**
   * @var \SquareMember[]
   */
  public $rejectedMembers = null;
  /**
   * @var \SquareStatus
   */
  public $status = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['rejectedMembers'])) {
        $this->rejectedMembers = $vals['rejectedMembers'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
    }
  }

  public function getName() {
    return 'RejectSquareMembersResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->rejectedMembers = array();
            $_size973 = 0;
            $_etype976 = 0;
            $xfer += $input->readListBegin($_etype976, $_size973);
            for ($_i977 = 0; $_i977 < $_size973; ++$_i977)
            {
              $elem978 = null;
              $elem978 = new \SquareMember();
              $xfer += $elem978->read($input);
              $this->rejectedMembers []= $elem978;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->status = new \SquareStatus();
            $xfer += $this->status->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RejectSquareMembersResponse');
    if ($this->rejectedMembers !== null) {
      if (!is_array($this->rejectedMembers)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('rejectedMembers', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->rejectedMembers));
        {
          foreach ($this->rejectedMembers as $iter979)
          {
            $xfer += $iter979->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      if (!is_object($this->status)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('status', TType::STRUCT, 2);
      $xfer += $this->status->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class RemoveSubscriptionsRequest {
  static $isValidate = false;

  static $_TSPEC = array(
    2 => array(
      'var' => 'unsubscriptions',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::I64,
      'elem' => array(
        'type' => TType::I64,
        ),
      ),
    );

  /**
   * @var int[]
   */
  public $unsubscriptions = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['unsubscriptions'])) {
        $this->unsubscriptions = $vals['unsubscriptions'];
      }
    }
  }

  public function getName() {
    return 'RemoveSubscriptionsRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 2:
          if ($ftype == TType::LST) {
            $this->unsubscriptions = array();
            $_size980 = 0;
            $_etype983 = 0;
            $xfer += $input->readListBegin($_etype983, $_size980);
            for ($_i984 = 0; $_i984 < $_size980; ++$_i984)
            {
              $elem985 = null;
              $xfer += $input->readI64($elem985);
              $this->unsubscriptions []= $elem985;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RemoveSubscriptionsRequest');
    if ($this->unsubscriptions !== null) {
      if (!is_array($this->unsubscriptions)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('unsubscriptions', TType::LST, 2);
      {
        $output->writeListBegin(TType::I64, count($this->unsubscriptions));
        {
          foreach ($this->unsubscriptions as $iter986)
          {
            $xfer += $output->writeI64($iter986);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class RemoveSubscriptionsResponse {
  static $isValidate = false;

  static $_TSPEC = array(
    );


  public function __construct() {
  }

  public function getName() {
    return 'RemoveSubscriptionsResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RemoveSubscriptionsResponse');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class RefreshSubscriptionsRequest {
  static $isValidate = false;

  static $_TSPEC = array(
    2 => array(
      'var' => 'subscriptions',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::I64,
      'elem' => array(
        'type' => TType::I64,
        ),
      ),
    );

  /**
   * @var int[]
   */
  public $subscriptions = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['subscriptions'])) {
        $this->subscriptions = $vals['subscriptions'];
      }
    }
  }

  public function getName() {
    return 'RefreshSubscriptionsRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 2:
          if ($ftype == TType::LST) {
            $this->subscriptions = array();
            $_size987 = 0;
            $_etype990 = 0;
            $xfer += $input->readListBegin($_etype990, $_size987);
            for ($_i991 = 0; $_i991 < $_size987; ++$_i991)
            {
              $elem992 = null;
              $xfer += $input->readI64($elem992);
              $this->subscriptions []= $elem992;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RefreshSubscriptionsRequest');
    if ($this->subscriptions !== null) {
      if (!is_array($this->subscriptions)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('subscriptions', TType::LST, 2);
      {
        $output->writeListBegin(TType::I64, count($this->subscriptions));
        {
          foreach ($this->subscriptions as $iter993)
          {
            $xfer += $output->writeI64($iter993);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class RefreshSubscriptionsResponse {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'ttlMillis',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    2 => array(
      'var' => 'subscriptionStates',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::I64,
      'vtype' => TType::STRUCT,
      'key' => array(
        'type' => TType::I64,
      ),
      'val' => array(
        'type' => TType::STRUCT,
        'class' => '\SubscriptionState',
        ),
      ),
    );

  /**
   * @var int
   */
  public $ttlMillis = null;
  /**
   * @var array
   */
  public $subscriptionStates = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['ttlMillis'])) {
        $this->ttlMillis = $vals['ttlMillis'];
      }
      if (isset($vals['subscriptionStates'])) {
        $this->subscriptionStates = $vals['subscriptionStates'];
      }
    }
  }

  public function getName() {
    return 'RefreshSubscriptionsResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->ttlMillis);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::MAP) {
            $this->subscriptionStates = array();
            $_size994 = 0;
            $_ktype995 = 0;
            $_vtype996 = 0;
            $xfer += $input->readMapBegin($_ktype995, $_vtype996, $_size994);
            for ($_i998 = 0; $_i998 < $_size994; ++$_i998)
            {
              $key999 = 0;
              $val1000 = new \SubscriptionState();
              $xfer += $input->readI64($key999);
              $val1000 = new \SubscriptionState();
              $xfer += $val1000->read($input);
              $this->subscriptionStates[$key999] = $val1000;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RefreshSubscriptionsResponse');
    if ($this->ttlMillis !== null) {
      $xfer += $output->writeFieldBegin('ttlMillis', TType::I64, 1);
      $xfer += $output->writeI64($this->ttlMillis);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->subscriptionStates !== null) {
      if (!is_array($this->subscriptionStates)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('subscriptionStates', TType::MAP, 2);
      {
        $output->writeMapBegin(TType::I64, TType::STRUCT, count($this->subscriptionStates));
        {
          foreach ($this->subscriptionStates as $kiter1001 => $viter1002)
          {
            $xfer += $output->writeI64($kiter1001);
            $xfer += $viter1002->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UpdateSquareChatRequest {
  static $isValidate = false;

  static $_TSPEC = array(
    2 => array(
      'var' => 'updatedAttrs',
      'isRequired' => false,
      'type' => TType::SET,
      'etype' => TType::I32,
      'elem' => array(
        'type' => TType::I32,
        ),
      ),
    3 => array(
      'var' => 'squareChat',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareChat',
      ),
    );

  /**
   * @var int[]
   */
  public $updatedAttrs = null;
  /**
   * @var \SquareChat
   */
  public $squareChat = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['updatedAttrs'])) {
        $this->updatedAttrs = $vals['updatedAttrs'];
      }
      if (isset($vals['squareChat'])) {
        $this->squareChat = $vals['squareChat'];
      }
    }
  }

  public function getName() {
    return 'UpdateSquareChatRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 2:
          if ($ftype == TType::SET) {
            $this->updatedAttrs = array();
            $_size1003 = 0;
            $_etype1006 = 0;
            $xfer += $input->readSetBegin($_etype1006, $_size1003);
            for ($_i1007 = 0; $_i1007 < $_size1003; ++$_i1007)
            {
              $elem1008 = null;
              $xfer += $input->readI32($elem1008);
              $this->updatedAttrs[$elem1008] = true;
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->squareChat = new \SquareChat();
            $xfer += $this->squareChat->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UpdateSquareChatRequest');
    if ($this->updatedAttrs !== null) {
      if (!is_array($this->updatedAttrs)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('updatedAttrs', TType::SET, 2);
      {
        $output->writeSetBegin(TType::I32, count($this->updatedAttrs));
        {
          foreach ($this->updatedAttrs as $iter1009 => $iter1010)
          {
            $xfer += $output->writeI32($iter1009);
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareChat !== null) {
      if (!is_object($this->squareChat)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squareChat', TType::STRUCT, 3);
      $xfer += $this->squareChat->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UpdateSquareChatResponse {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'updatedAttrs',
      'isRequired' => false,
      'type' => TType::SET,
      'etype' => TType::I32,
      'elem' => array(
        'type' => TType::I32,
        ),
      ),
    2 => array(
      'var' => 'squareChat',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareChat',
      ),
    );

  /**
   * @var int[]
   */
  public $updatedAttrs = null;
  /**
   * @var \SquareChat
   */
  public $squareChat = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['updatedAttrs'])) {
        $this->updatedAttrs = $vals['updatedAttrs'];
      }
      if (isset($vals['squareChat'])) {
        $this->squareChat = $vals['squareChat'];
      }
    }
  }

  public function getName() {
    return 'UpdateSquareChatResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::SET) {
            $this->updatedAttrs = array();
            $_size1011 = 0;
            $_etype1014 = 0;
            $xfer += $input->readSetBegin($_etype1014, $_size1011);
            for ($_i1015 = 0; $_i1015 < $_size1011; ++$_i1015)
            {
              $elem1016 = null;
              $xfer += $input->readI32($elem1016);
              $this->updatedAttrs[$elem1016] = true;
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->squareChat = new \SquareChat();
            $xfer += $this->squareChat->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UpdateSquareChatResponse');
    if ($this->updatedAttrs !== null) {
      if (!is_array($this->updatedAttrs)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('updatedAttrs', TType::SET, 1);
      {
        $output->writeSetBegin(TType::I32, count($this->updatedAttrs));
        {
          foreach ($this->updatedAttrs as $iter1017 => $iter1018)
          {
            $xfer += $output->writeI32($iter1017);
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareChat !== null) {
      if (!is_object($this->squareChat)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squareChat', TType::STRUCT, 2);
      $xfer += $this->squareChat->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DeleteSquareChatRequest {
  static $isValidate = false;

  static $_TSPEC = array(
    2 => array(
      'var' => 'squareChatMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'revision',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    );

  /**
   * @var string
   */
  public $squareChatMid = null;
  /**
   * @var int
   */
  public $revision = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['squareChatMid'])) {
        $this->squareChatMid = $vals['squareChatMid'];
      }
      if (isset($vals['revision'])) {
        $this->revision = $vals['revision'];
      }
    }
  }

  public function getName() {
    return 'DeleteSquareChatRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareChatMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->revision);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DeleteSquareChatRequest');
    if ($this->squareChatMid !== null) {
      $xfer += $output->writeFieldBegin('squareChatMid', TType::STRING, 2);
      $xfer += $output->writeString($this->squareChatMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->revision !== null) {
      $xfer += $output->writeFieldBegin('revision', TType::I64, 3);
      $xfer += $output->writeI64($this->revision);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DeleteSquareChatResponse {
  static $isValidate = false;

  static $_TSPEC = array(
    );


  public function __construct() {
  }

  public function getName() {
    return 'DeleteSquareChatResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DeleteSquareChatResponse');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UpdateSquareChatMemberRequest {
  static $isValidate = false;

  static $_TSPEC = array(
    2 => array(
      'var' => 'updatedAttrs',
      'isRequired' => false,
      'type' => TType::SET,
      'etype' => TType::I32,
      'elem' => array(
        'type' => TType::I32,
        ),
      ),
    3 => array(
      'var' => 'chatMember',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareChatMember',
      ),
    );

  /**
   * @var int[]
   */
  public $updatedAttrs = null;
  /**
   * @var \SquareChatMember
   */
  public $chatMember = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['updatedAttrs'])) {
        $this->updatedAttrs = $vals['updatedAttrs'];
      }
      if (isset($vals['chatMember'])) {
        $this->chatMember = $vals['chatMember'];
      }
    }
  }

  public function getName() {
    return 'UpdateSquareChatMemberRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 2:
          if ($ftype == TType::SET) {
            $this->updatedAttrs = array();
            $_size1019 = 0;
            $_etype1022 = 0;
            $xfer += $input->readSetBegin($_etype1022, $_size1019);
            for ($_i1023 = 0; $_i1023 < $_size1019; ++$_i1023)
            {
              $elem1024 = null;
              $xfer += $input->readI32($elem1024);
              $this->updatedAttrs[$elem1024] = true;
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->chatMember = new \SquareChatMember();
            $xfer += $this->chatMember->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UpdateSquareChatMemberRequest');
    if ($this->updatedAttrs !== null) {
      if (!is_array($this->updatedAttrs)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('updatedAttrs', TType::SET, 2);
      {
        $output->writeSetBegin(TType::I32, count($this->updatedAttrs));
        {
          foreach ($this->updatedAttrs as $iter1025 => $iter1026)
          {
            $xfer += $output->writeI32($iter1025);
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->chatMember !== null) {
      if (!is_object($this->chatMember)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('chatMember', TType::STRUCT, 3);
      $xfer += $this->chatMember->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UpdateSquareChatMemberResponse {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'updatedChatMember',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareChatMember',
      ),
    );

  /**
   * @var \SquareChatMember
   */
  public $updatedChatMember = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['updatedChatMember'])) {
        $this->updatedChatMember = $vals['updatedChatMember'];
      }
    }
  }

  public function getName() {
    return 'UpdateSquareChatMemberResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->updatedChatMember = new \SquareChatMember();
            $xfer += $this->updatedChatMember->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UpdateSquareChatMemberResponse');
    if ($this->updatedChatMember !== null) {
      if (!is_object($this->updatedChatMember)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('updatedChatMember', TType::STRUCT, 1);
      $xfer += $this->updatedChatMember->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UpdateSquareAuthorityRequest {
  static $isValidate = false;

  static $_TSPEC = array(
    2 => array(
      'var' => 'updateAttributes',
      'isRequired' => false,
      'type' => TType::SET,
      'etype' => TType::I32,
      'elem' => array(
        'type' => TType::I32,
        ),
      ),
    3 => array(
      'var' => 'authority',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareAuthority',
      ),
    );

  /**
   * @var int[]
   */
  public $updateAttributes = null;
  /**
   * @var \SquareAuthority
   */
  public $authority = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['updateAttributes'])) {
        $this->updateAttributes = $vals['updateAttributes'];
      }
      if (isset($vals['authority'])) {
        $this->authority = $vals['authority'];
      }
    }
  }

  public function getName() {
    return 'UpdateSquareAuthorityRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 2:
          if ($ftype == TType::SET) {
            $this->updateAttributes = array();
            $_size1027 = 0;
            $_etype1030 = 0;
            $xfer += $input->readSetBegin($_etype1030, $_size1027);
            for ($_i1031 = 0; $_i1031 < $_size1027; ++$_i1031)
            {
              $elem1032 = null;
              $xfer += $input->readI32($elem1032);
              $this->updateAttributes[$elem1032] = true;
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->authority = new \SquareAuthority();
            $xfer += $this->authority->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UpdateSquareAuthorityRequest');
    if ($this->updateAttributes !== null) {
      if (!is_array($this->updateAttributes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('updateAttributes', TType::SET, 2);
      {
        $output->writeSetBegin(TType::I32, count($this->updateAttributes));
        {
          foreach ($this->updateAttributes as $iter1033 => $iter1034)
          {
            $xfer += $output->writeI32($iter1033);
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authority !== null) {
      if (!is_object($this->authority)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authority', TType::STRUCT, 3);
      $xfer += $this->authority->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UpdateSquareAuthorityResponse {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'updatdAttributes',
      'isRequired' => false,
      'type' => TType::SET,
      'etype' => TType::I32,
      'elem' => array(
        'type' => TType::I32,
        ),
      ),
    2 => array(
      'var' => 'authority',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareAuthority',
      ),
    );

  /**
   * @var int[]
   */
  public $updatdAttributes = null;
  /**
   * @var \SquareAuthority
   */
  public $authority = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['updatdAttributes'])) {
        $this->updatdAttributes = $vals['updatdAttributes'];
      }
      if (isset($vals['authority'])) {
        $this->authority = $vals['authority'];
      }
    }
  }

  public function getName() {
    return 'UpdateSquareAuthorityResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::SET) {
            $this->updatdAttributes = array();
            $_size1035 = 0;
            $_etype1038 = 0;
            $xfer += $input->readSetBegin($_etype1038, $_size1035);
            for ($_i1039 = 0; $_i1039 < $_size1035; ++$_i1039)
            {
              $elem1040 = null;
              $xfer += $input->readI32($elem1040);
              $this->updatdAttributes[$elem1040] = true;
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->authority = new \SquareAuthority();
            $xfer += $this->authority->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UpdateSquareAuthorityResponse');
    if ($this->updatdAttributes !== null) {
      if (!is_array($this->updatdAttributes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('updatdAttributes', TType::SET, 1);
      {
        $output->writeSetBegin(TType::I32, count($this->updatdAttributes));
        {
          foreach ($this->updatdAttributes as $iter1041 => $iter1042)
          {
            $xfer += $output->writeI32($iter1041);
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authority !== null) {
      if (!is_object($this->authority)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authority', TType::STRUCT, 2);
      $xfer += $this->authority->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UpdateSquareMemberRelationRequest {
  static $isValidate = false;

  static $_TSPEC = array(
    2 => array(
      'var' => 'squareMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'targetSquareMemberMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'updatedAttrs',
      'isRequired' => false,
      'type' => TType::SET,
      'etype' => TType::I32,
      'elem' => array(
        'type' => TType::I32,
        ),
      ),
    5 => array(
      'var' => 'relation',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareMemberRelation',
      ),
    );

  /**
   * @var string
   */
  public $squareMid = null;
  /**
   * @var string
   */
  public $targetSquareMemberMid = null;
  /**
   * @var int[]
   */
  public $updatedAttrs = null;
  /**
   * @var \SquareMemberRelation
   */
  public $relation = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['squareMid'])) {
        $this->squareMid = $vals['squareMid'];
      }
      if (isset($vals['targetSquareMemberMid'])) {
        $this->targetSquareMemberMid = $vals['targetSquareMemberMid'];
      }
      if (isset($vals['updatedAttrs'])) {
        $this->updatedAttrs = $vals['updatedAttrs'];
      }
      if (isset($vals['relation'])) {
        $this->relation = $vals['relation'];
      }
    }
  }

  public function getName() {
    return 'UpdateSquareMemberRelationRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->targetSquareMemberMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::SET) {
            $this->updatedAttrs = array();
            $_size1043 = 0;
            $_etype1046 = 0;
            $xfer += $input->readSetBegin($_etype1046, $_size1043);
            for ($_i1047 = 0; $_i1047 < $_size1043; ++$_i1047)
            {
              $elem1048 = null;
              $xfer += $input->readI32($elem1048);
              $this->updatedAttrs[$elem1048] = true;
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->relation = new \SquareMemberRelation();
            $xfer += $this->relation->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UpdateSquareMemberRelationRequest');
    if ($this->squareMid !== null) {
      $xfer += $output->writeFieldBegin('squareMid', TType::STRING, 2);
      $xfer += $output->writeString($this->squareMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->targetSquareMemberMid !== null) {
      $xfer += $output->writeFieldBegin('targetSquareMemberMid', TType::STRING, 3);
      $xfer += $output->writeString($this->targetSquareMemberMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->updatedAttrs !== null) {
      if (!is_array($this->updatedAttrs)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('updatedAttrs', TType::SET, 4);
      {
        $output->writeSetBegin(TType::I32, count($this->updatedAttrs));
        {
          foreach ($this->updatedAttrs as $iter1049 => $iter1050)
          {
            $xfer += $output->writeI32($iter1049);
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->relation !== null) {
      if (!is_object($this->relation)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('relation', TType::STRUCT, 5);
      $xfer += $this->relation->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UpdateSquareMemberRelationResponse {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'squareMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'targetSquareMemberMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'updatedAttrs',
      'isRequired' => false,
      'type' => TType::SET,
      'etype' => TType::I32,
      'elem' => array(
        'type' => TType::I32,
        ),
      ),
    4 => array(
      'var' => 'relation',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareMemberRelation',
      ),
    );

  /**
   * @var string
   */
  public $squareMid = null;
  /**
   * @var string
   */
  public $targetSquareMemberMid = null;
  /**
   * @var int[]
   */
  public $updatedAttrs = null;
  /**
   * @var \SquareMemberRelation
   */
  public $relation = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['squareMid'])) {
        $this->squareMid = $vals['squareMid'];
      }
      if (isset($vals['targetSquareMemberMid'])) {
        $this->targetSquareMemberMid = $vals['targetSquareMemberMid'];
      }
      if (isset($vals['updatedAttrs'])) {
        $this->updatedAttrs = $vals['updatedAttrs'];
      }
      if (isset($vals['relation'])) {
        $this->relation = $vals['relation'];
      }
    }
  }

  public function getName() {
    return 'UpdateSquareMemberRelationResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->targetSquareMemberMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::SET) {
            $this->updatedAttrs = array();
            $_size1051 = 0;
            $_etype1054 = 0;
            $xfer += $input->readSetBegin($_etype1054, $_size1051);
            for ($_i1055 = 0; $_i1055 < $_size1051; ++$_i1055)
            {
              $elem1056 = null;
              $xfer += $input->readI32($elem1056);
              $this->updatedAttrs[$elem1056] = true;
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->relation = new \SquareMemberRelation();
            $xfer += $this->relation->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UpdateSquareMemberRelationResponse');
    if ($this->squareMid !== null) {
      $xfer += $output->writeFieldBegin('squareMid', TType::STRING, 1);
      $xfer += $output->writeString($this->squareMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->targetSquareMemberMid !== null) {
      $xfer += $output->writeFieldBegin('targetSquareMemberMid', TType::STRING, 2);
      $xfer += $output->writeString($this->targetSquareMemberMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->updatedAttrs !== null) {
      if (!is_array($this->updatedAttrs)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('updatedAttrs', TType::SET, 3);
      {
        $output->writeSetBegin(TType::I32, count($this->updatedAttrs));
        {
          foreach ($this->updatedAttrs as $iter1057 => $iter1058)
          {
            $xfer += $output->writeI32($iter1057);
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->relation !== null) {
      if (!is_object($this->relation)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('relation', TType::STRUCT, 4);
      $xfer += $this->relation->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ReportSquareRequest {
  static $isValidate = false;

  static $_TSPEC = array(
    2 => array(
      'var' => 'squareMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'reportType',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    4 => array(
      'var' => 'otherReason',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $squareMid = null;
  /**
   * @var int
   */
  public $reportType = null;
  /**
   * @var string
   */
  public $otherReason = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['squareMid'])) {
        $this->squareMid = $vals['squareMid'];
      }
      if (isset($vals['reportType'])) {
        $this->reportType = $vals['reportType'];
      }
      if (isset($vals['otherReason'])) {
        $this->otherReason = $vals['otherReason'];
      }
    }
  }

  public function getName() {
    return 'ReportSquareRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->reportType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->otherReason);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ReportSquareRequest');
    if ($this->squareMid !== null) {
      $xfer += $output->writeFieldBegin('squareMid', TType::STRING, 2);
      $xfer += $output->writeString($this->squareMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reportType !== null) {
      $xfer += $output->writeFieldBegin('reportType', TType::I32, 3);
      $xfer += $output->writeI32($this->reportType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->otherReason !== null) {
      $xfer += $output->writeFieldBegin('otherReason', TType::STRING, 4);
      $xfer += $output->writeString($this->otherReason);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ReportSquareResponse {
  static $isValidate = false;

  static $_TSPEC = array(
    );


  public function __construct() {
  }

  public function getName() {
    return 'ReportSquareResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ReportSquareResponse');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ReportSquareChatRequest {
  static $isValidate = false;

  static $_TSPEC = array(
    2 => array(
      'var' => 'squareMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'squareChatMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'reportType',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    6 => array(
      'var' => 'otherReason',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $squareMid = null;
  /**
   * @var string
   */
  public $squareChatMid = null;
  /**
   * @var int
   */
  public $reportType = null;
  /**
   * @var string
   */
  public $otherReason = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['squareMid'])) {
        $this->squareMid = $vals['squareMid'];
      }
      if (isset($vals['squareChatMid'])) {
        $this->squareChatMid = $vals['squareChatMid'];
      }
      if (isset($vals['reportType'])) {
        $this->reportType = $vals['reportType'];
      }
      if (isset($vals['otherReason'])) {
        $this->otherReason = $vals['otherReason'];
      }
    }
  }

  public function getName() {
    return 'ReportSquareChatRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareChatMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->reportType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->otherReason);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ReportSquareChatRequest');
    if ($this->squareMid !== null) {
      $xfer += $output->writeFieldBegin('squareMid', TType::STRING, 2);
      $xfer += $output->writeString($this->squareMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareChatMid !== null) {
      $xfer += $output->writeFieldBegin('squareChatMid', TType::STRING, 3);
      $xfer += $output->writeString($this->squareChatMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reportType !== null) {
      $xfer += $output->writeFieldBegin('reportType', TType::I32, 5);
      $xfer += $output->writeI32($this->reportType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->otherReason !== null) {
      $xfer += $output->writeFieldBegin('otherReason', TType::STRING, 6);
      $xfer += $output->writeString($this->otherReason);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ReportSquareChatResponse {
  static $isValidate = false;

  static $_TSPEC = array(
    );


  public function __construct() {
  }

  public function getName() {
    return 'ReportSquareChatResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ReportSquareChatResponse');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ReportSquareMessageRequest {
  static $isValidate = false;

  static $_TSPEC = array(
    2 => array(
      'var' => 'squareMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'squareChatMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'squareMessageId',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'reportType',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    6 => array(
      'var' => 'otherReason',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $squareMid = null;
  /**
   * @var string
   */
  public $squareChatMid = null;
  /**
   * @var string
   */
  public $squareMessageId = null;
  /**
   * @var int
   */
  public $reportType = null;
  /**
   * @var string
   */
  public $otherReason = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['squareMid'])) {
        $this->squareMid = $vals['squareMid'];
      }
      if (isset($vals['squareChatMid'])) {
        $this->squareChatMid = $vals['squareChatMid'];
      }
      if (isset($vals['squareMessageId'])) {
        $this->squareMessageId = $vals['squareMessageId'];
      }
      if (isset($vals['reportType'])) {
        $this->reportType = $vals['reportType'];
      }
      if (isset($vals['otherReason'])) {
        $this->otherReason = $vals['otherReason'];
      }
    }
  }

  public function getName() {
    return 'ReportSquareMessageRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareChatMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareMessageId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->reportType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->otherReason);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ReportSquareMessageRequest');
    if ($this->squareMid !== null) {
      $xfer += $output->writeFieldBegin('squareMid', TType::STRING, 2);
      $xfer += $output->writeString($this->squareMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareChatMid !== null) {
      $xfer += $output->writeFieldBegin('squareChatMid', TType::STRING, 3);
      $xfer += $output->writeString($this->squareChatMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareMessageId !== null) {
      $xfer += $output->writeFieldBegin('squareMessageId', TType::STRING, 4);
      $xfer += $output->writeString($this->squareMessageId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reportType !== null) {
      $xfer += $output->writeFieldBegin('reportType', TType::I32, 5);
      $xfer += $output->writeI32($this->reportType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->otherReason !== null) {
      $xfer += $output->writeFieldBegin('otherReason', TType::STRING, 6);
      $xfer += $output->writeString($this->otherReason);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ReportSquareMessageResponse {
  static $isValidate = false;

  static $_TSPEC = array(
    );


  public function __construct() {
  }

  public function getName() {
    return 'ReportSquareMessageResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ReportSquareMessageResponse');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ReportSquareMemberRequest {
  static $isValidate = false;

  static $_TSPEC = array(
    2 => array(
      'var' => 'squareMemberMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'reportType',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    4 => array(
      'var' => 'otherReason',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'squareChatMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $squareMemberMid = null;
  /**
   * @var int
   */
  public $reportType = null;
  /**
   * @var string
   */
  public $otherReason = null;
  /**
   * @var string
   */
  public $squareChatMid = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['squareMemberMid'])) {
        $this->squareMemberMid = $vals['squareMemberMid'];
      }
      if (isset($vals['reportType'])) {
        $this->reportType = $vals['reportType'];
      }
      if (isset($vals['otherReason'])) {
        $this->otherReason = $vals['otherReason'];
      }
      if (isset($vals['squareChatMid'])) {
        $this->squareChatMid = $vals['squareChatMid'];
      }
    }
  }

  public function getName() {
    return 'ReportSquareMemberRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareMemberMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->reportType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->otherReason);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareChatMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ReportSquareMemberRequest');
    if ($this->squareMemberMid !== null) {
      $xfer += $output->writeFieldBegin('squareMemberMid', TType::STRING, 2);
      $xfer += $output->writeString($this->squareMemberMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reportType !== null) {
      $xfer += $output->writeFieldBegin('reportType', TType::I32, 3);
      $xfer += $output->writeI32($this->reportType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->otherReason !== null) {
      $xfer += $output->writeFieldBegin('otherReason', TType::STRING, 4);
      $xfer += $output->writeString($this->otherReason);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareChatMid !== null) {
      $xfer += $output->writeFieldBegin('squareChatMid', TType::STRING, 5);
      $xfer += $output->writeString($this->squareChatMid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ReportSquareMemberResponse {
  static $isValidate = false;

  static $_TSPEC = array(
    );


  public function __construct() {
  }

  public function getName() {
    return 'ReportSquareMemberResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ReportSquareMemberResponse');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetSquareRequest {
  static $isValidate = false;

  static $_TSPEC = array(
    2 => array(
      'var' => 'mid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $mid = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['mid'])) {
        $this->mid = $vals['mid'];
      }
    }
  }

  public function getName() {
    return 'GetSquareRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetSquareRequest');
    if ($this->mid !== null) {
      $xfer += $output->writeFieldBegin('mid', TType::STRING, 2);
      $xfer += $output->writeString($this->mid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetSquareResponse {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'square',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Square',
      ),
    2 => array(
      'var' => 'myMembership',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareMember',
      ),
    3 => array(
      'var' => 'squareAuthority',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareAuthority',
      ),
    4 => array(
      'var' => 'squareStatus',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareStatus',
      ),
    5 => array(
      'var' => 'squareFeatureSet',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareFeatureSet',
      ),
    6 => array(
      'var' => 'noteStatus',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\NoteStatus',
      ),
    );

  /**
   * @var \Square
   */
  public $square = null;
  /**
   * @var \SquareMember
   */
  public $myMembership = null;
  /**
   * @var \SquareAuthority
   */
  public $squareAuthority = null;
  /**
   * @var \SquareStatus
   */
  public $squareStatus = null;
  /**
   * @var \SquareFeatureSet
   */
  public $squareFeatureSet = null;
  /**
   * @var \NoteStatus
   */
  public $noteStatus = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['square'])) {
        $this->square = $vals['square'];
      }
      if (isset($vals['myMembership'])) {
        $this->myMembership = $vals['myMembership'];
      }
      if (isset($vals['squareAuthority'])) {
        $this->squareAuthority = $vals['squareAuthority'];
      }
      if (isset($vals['squareStatus'])) {
        $this->squareStatus = $vals['squareStatus'];
      }
      if (isset($vals['squareFeatureSet'])) {
        $this->squareFeatureSet = $vals['squareFeatureSet'];
      }
      if (isset($vals['noteStatus'])) {
        $this->noteStatus = $vals['noteStatus'];
      }
    }
  }

  public function getName() {
    return 'GetSquareResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->square = new \Square();
            $xfer += $this->square->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->myMembership = new \SquareMember();
            $xfer += $this->myMembership->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->squareAuthority = new \SquareAuthority();
            $xfer += $this->squareAuthority->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->squareStatus = new \SquareStatus();
            $xfer += $this->squareStatus->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->squareFeatureSet = new \SquareFeatureSet();
            $xfer += $this->squareFeatureSet->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->noteStatus = new \NoteStatus();
            $xfer += $this->noteStatus->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetSquareResponse');
    if ($this->square !== null) {
      if (!is_object($this->square)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('square', TType::STRUCT, 1);
      $xfer += $this->square->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->myMembership !== null) {
      if (!is_object($this->myMembership)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('myMembership', TType::STRUCT, 2);
      $xfer += $this->myMembership->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareAuthority !== null) {
      if (!is_object($this->squareAuthority)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squareAuthority', TType::STRUCT, 3);
      $xfer += $this->squareAuthority->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareStatus !== null) {
      if (!is_object($this->squareStatus)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squareStatus', TType::STRUCT, 4);
      $xfer += $this->squareStatus->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareFeatureSet !== null) {
      if (!is_object($this->squareFeatureSet)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squareFeatureSet', TType::STRUCT, 5);
      $xfer += $this->squareFeatureSet->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->noteStatus !== null) {
      if (!is_object($this->noteStatus)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('noteStatus', TType::STRUCT, 6);
      $xfer += $this->noteStatus->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetSquareStatusRequest {
  static $isValidate = false;

  static $_TSPEC = array(
    2 => array(
      'var' => 'squareMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $squareMid = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['squareMid'])) {
        $this->squareMid = $vals['squareMid'];
      }
    }
  }

  public function getName() {
    return 'GetSquareStatusRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetSquareStatusRequest');
    if ($this->squareMid !== null) {
      $xfer += $output->writeFieldBegin('squareMid', TType::STRING, 2);
      $xfer += $output->writeString($this->squareMid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetSquareStatusResponse {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'squareStatus',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareStatus',
      ),
    );

  /**
   * @var \SquareStatus
   */
  public $squareStatus = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['squareStatus'])) {
        $this->squareStatus = $vals['squareStatus'];
      }
    }
  }

  public function getName() {
    return 'GetSquareStatusResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->squareStatus = new \SquareStatus();
            $xfer += $this->squareStatus->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetSquareStatusResponse');
    if ($this->squareStatus !== null) {
      if (!is_object($this->squareStatus)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squareStatus', TType::STRUCT, 1);
      $xfer += $this->squareStatus->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetNoteStatusRequest {
  static $isValidate = false;

  static $_TSPEC = array(
    2 => array(
      'var' => 'squareMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $squareMid = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['squareMid'])) {
        $this->squareMid = $vals['squareMid'];
      }
    }
  }

  public function getName() {
    return 'GetNoteStatusRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetNoteStatusRequest');
    if ($this->squareMid !== null) {
      $xfer += $output->writeFieldBegin('squareMid', TType::STRING, 2);
      $xfer += $output->writeString($this->squareMid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetNoteStatusResponse {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'squareMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'status',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\NoteStatus',
      ),
    );

  /**
   * @var string
   */
  public $squareMid = null;
  /**
   * @var \NoteStatus
   */
  public $status = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['squareMid'])) {
        $this->squareMid = $vals['squareMid'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
    }
  }

  public function getName() {
    return 'GetNoteStatusResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->status = new \NoteStatus();
            $xfer += $this->status->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetNoteStatusResponse');
    if ($this->squareMid !== null) {
      $xfer += $output->writeFieldBegin('squareMid', TType::STRING, 1);
      $xfer += $output->writeString($this->squareMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      if (!is_object($this->status)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('status', TType::STRUCT, 2);
      $xfer += $this->status->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CreateSquareChatAnnouncementRequest {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'reqSeq',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'squareChatMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'squareChatAnnouncement',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareChatAnnouncement',
      ),
    );

  /**
   * @var int
   */
  public $reqSeq = null;
  /**
   * @var string
   */
  public $squareChatMid = null;
  /**
   * @var \SquareChatAnnouncement
   */
  public $squareChatAnnouncement = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['reqSeq'])) {
        $this->reqSeq = $vals['reqSeq'];
      }
      if (isset($vals['squareChatMid'])) {
        $this->squareChatMid = $vals['squareChatMid'];
      }
      if (isset($vals['squareChatAnnouncement'])) {
        $this->squareChatAnnouncement = $vals['squareChatAnnouncement'];
      }
    }
  }

  public function getName() {
    return 'CreateSquareChatAnnouncementRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->reqSeq);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareChatMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->squareChatAnnouncement = new \SquareChatAnnouncement();
            $xfer += $this->squareChatAnnouncement->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CreateSquareChatAnnouncementRequest');
    if ($this->reqSeq !== null) {
      $xfer += $output->writeFieldBegin('reqSeq', TType::I32, 1);
      $xfer += $output->writeI32($this->reqSeq);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareChatMid !== null) {
      $xfer += $output->writeFieldBegin('squareChatMid', TType::STRING, 2);
      $xfer += $output->writeString($this->squareChatMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->squareChatAnnouncement !== null) {
      if (!is_object($this->squareChatAnnouncement)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('squareChatAnnouncement', TType::STRUCT, 3);
      $xfer += $this->squareChatAnnouncement->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CreateSquareChatAnnouncementResponse {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'announcement',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SquareChatAnnouncement',
      ),
    );

  /**
   * @var \SquareChatAnnouncement
   */
  public $announcement = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['announcement'])) {
        $this->announcement = $vals['announcement'];
      }
    }
  }

  public function getName() {
    return 'CreateSquareChatAnnouncementResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->announcement = new \SquareChatAnnouncement();
            $xfer += $this->announcement->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CreateSquareChatAnnouncementResponse');
    if ($this->announcement !== null) {
      if (!is_object($this->announcement)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('announcement', TType::STRUCT, 1);
      $xfer += $this->announcement->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DeleteSquareChatAnnouncementRequest {
  static $isValidate = false;

  static $_TSPEC = array(
    2 => array(
      'var' => 'squareChatMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'announcementSeq',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    );

  /**
   * @var string
   */
  public $squareChatMid = null;
  /**
   * @var int
   */
  public $announcementSeq = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['squareChatMid'])) {
        $this->squareChatMid = $vals['squareChatMid'];
      }
      if (isset($vals['announcementSeq'])) {
        $this->announcementSeq = $vals['announcementSeq'];
      }
    }
  }

  public function getName() {
    return 'DeleteSquareChatAnnouncementRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareChatMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->announcementSeq);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DeleteSquareChatAnnouncementRequest');
    if ($this->squareChatMid !== null) {
      $xfer += $output->writeFieldBegin('squareChatMid', TType::STRING, 2);
      $xfer += $output->writeString($this->squareChatMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->announcementSeq !== null) {
      $xfer += $output->writeFieldBegin('announcementSeq', TType::I64, 3);
      $xfer += $output->writeI64($this->announcementSeq);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DeleteSquareChatAnnouncementResponse {
  static $isValidate = false;

  static $_TSPEC = array(
    );


  public function __construct() {
  }

  public function getName() {
    return 'DeleteSquareChatAnnouncementResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DeleteSquareChatAnnouncementResponse');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetSquareChatAnnouncementsRequest {
  static $isValidate = false;

  static $_TSPEC = array(
    2 => array(
      'var' => 'squareChatMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $squareChatMid = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['squareChatMid'])) {
        $this->squareChatMid = $vals['squareChatMid'];
      }
    }
  }

  public function getName() {
    return 'GetSquareChatAnnouncementsRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->squareChatMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetSquareChatAnnouncementsRequest');
    if ($this->squareChatMid !== null) {
      $xfer += $output->writeFieldBegin('squareChatMid', TType::STRING, 2);
      $xfer += $output->writeString($this->squareChatMid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetSquareChatAnnouncementsResponse {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'announcements',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\SquareChatAnnouncement',
        ),
      ),
    );

  /**
   * @var \SquareChatAnnouncement[]
   */
  public $announcements = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['announcements'])) {
        $this->announcements = $vals['announcements'];
      }
    }
  }

  public function getName() {
    return 'GetSquareChatAnnouncementsResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->announcements = array();
            $_size1059 = 0;
            $_etype1062 = 0;
            $xfer += $input->readListBegin($_etype1062, $_size1059);
            for ($_i1063 = 0; $_i1063 < $_size1059; ++$_i1063)
            {
              $elem1064 = null;
              $elem1064 = new \SquareChatAnnouncement();
              $xfer += $elem1064->read($input);
              $this->announcements []= $elem1064;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetSquareChatAnnouncementsResponse');
    if ($this->announcements !== null) {
      if (!is_array($this->announcements)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('announcements', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->announcements));
        {
          foreach ($this->announcements as $iter1065)
          {
            $xfer += $iter1065->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetJoinedSquareChatsRequest {
  static $isValidate = false;

  static $_TSPEC = array(
    2 => array(
      'var' => 'continuationToken',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'limit',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var string
   */
  public $continuationToken = null;
  /**
   * @var int
   */
  public $limit = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['continuationToken'])) {
        $this->continuationToken = $vals['continuationToken'];
      }
      if (isset($vals['limit'])) {
        $this->limit = $vals['limit'];
      }
    }
  }

  public function getName() {
    return 'GetJoinedSquareChatsRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->continuationToken);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->limit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetJoinedSquareChatsRequest');
    if ($this->continuationToken !== null) {
      $xfer += $output->writeFieldBegin('continuationToken', TType::STRING, 2);
      $xfer += $output->writeString($this->continuationToken);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->limit !== null) {
      $xfer += $output->writeFieldBegin('limit', TType::I32, 3);
      $xfer += $output->writeI32($this->limit);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetJoinedSquareChatsResponse {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'chats',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\SquareChat',
        ),
      ),
    2 => array(
      'var' => 'chatMembers',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRUCT,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRUCT,
        'class' => '\SquareChatMember',
        ),
      ),
    3 => array(
      'var' => 'statuses',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRUCT,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRUCT,
        'class' => '\SquareChatStatus',
        ),
      ),
    4 => array(
      'var' => 'continuationToken',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var \SquareChat[]
   */
  public $chats = null;
  /**
   * @var array
   */
  public $chatMembers = null;
  /**
   * @var array
   */
  public $statuses = null;
  /**
   * @var string
   */
  public $continuationToken = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['chats'])) {
        $this->chats = $vals['chats'];
      }
      if (isset($vals['chatMembers'])) {
        $this->chatMembers = $vals['chatMembers'];
      }
      if (isset($vals['statuses'])) {
        $this->statuses = $vals['statuses'];
      }
      if (isset($vals['continuationToken'])) {
        $this->continuationToken = $vals['continuationToken'];
      }
    }
  }

  public function getName() {
    return 'GetJoinedSquareChatsResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->chats = array();
            $_size1066 = 0;
            $_etype1069 = 0;
            $xfer += $input->readListBegin($_etype1069, $_size1066);
            for ($_i1070 = 0; $_i1070 < $_size1066; ++$_i1070)
            {
              $elem1071 = null;
              $elem1071 = new \SquareChat();
              $xfer += $elem1071->read($input);
              $this->chats []= $elem1071;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::MAP) {
            $this->chatMembers = array();
            $_size1072 = 0;
            $_ktype1073 = 0;
            $_vtype1074 = 0;
            $xfer += $input->readMapBegin($_ktype1073, $_vtype1074, $_size1072);
            for ($_i1076 = 0; $_i1076 < $_size1072; ++$_i1076)
            {
              $key1077 = '';
              $val1078 = new \SquareChatMember();
              $xfer += $input->readString($key1077);
              $val1078 = new \SquareChatMember();
              $xfer += $val1078->read($input);
              $this->chatMembers[$key1077] = $val1078;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::MAP) {
            $this->statuses = array();
            $_size1079 = 0;
            $_ktype1080 = 0;
            $_vtype1081 = 0;
            $xfer += $input->readMapBegin($_ktype1080, $_vtype1081, $_size1079);
            for ($_i1083 = 0; $_i1083 < $_size1079; ++$_i1083)
            {
              $key1084 = '';
              $val1085 = new \SquareChatStatus();
              $xfer += $input->readString($key1084);
              $val1085 = new \SquareChatStatus();
              $xfer += $val1085->read($input);
              $this->statuses[$key1084] = $val1085;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->continuationToken);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetJoinedSquareChatsResponse');
    if ($this->chats !== null) {
      if (!is_array($this->chats)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('chats', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->chats));
        {
          foreach ($this->chats as $iter1086)
          {
            $xfer += $iter1086->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->chatMembers !== null) {
      if (!is_array($this->chatMembers)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('chatMembers', TType::MAP, 2);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->chatMembers));
        {
          foreach ($this->chatMembers as $kiter1087 => $viter1088)
          {
            $xfer += $output->writeString($kiter1087);
            $xfer += $viter1088->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->statuses !== null) {
      if (!is_array($this->statuses)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('statuses', TType::MAP, 3);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->statuses));
        {
          foreach ($this->statuses as $kiter1089 => $viter1090)
          {
            $xfer += $output->writeString($kiter1089);
            $xfer += $viter1090->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->continuationToken !== null) {
      $xfer += $output->writeFieldBegin('continuationToken', TType::STRING, 4);
      $xfer += $output->writeString($this->continuationToken);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TalkException extends TException {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'code',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'reason',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'parameterMap',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRING,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRING,
        ),
      ),
    );

  /**
   * @var int
   */
  public $code = null;
  /**
   * @var string
   */
  public $reason = null;
  /**
   * @var array
   */
  public $parameterMap = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['reason'])) {
        $this->reason = $vals['reason'];
      }
      if (isset($vals['parameterMap'])) {
        $this->parameterMap = $vals['parameterMap'];
      }
    }
  }

  public function getName() {
    return 'TalkException';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->reason);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::MAP) {
            $this->parameterMap = array();
            $_size1091 = 0;
            $_ktype1092 = 0;
            $_vtype1093 = 0;
            $xfer += $input->readMapBegin($_ktype1092, $_vtype1093, $_size1091);
            for ($_i1095 = 0; $_i1095 < $_size1091; ++$_i1095)
            {
              $key1096 = '';
              $val1097 = '';
              $xfer += $input->readString($key1096);
              $xfer += $input->readString($val1097);
              $this->parameterMap[$key1096] = $val1097;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TalkException');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reason !== null) {
      $xfer += $output->writeFieldBegin('reason', TType::STRING, 2);
      $xfer += $output->writeString($this->reason);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parameterMap !== null) {
      if (!is_array($this->parameterMap)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('parameterMap', TType::MAP, 3);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->parameterMap));
        {
          foreach ($this->parameterMap as $kiter1098 => $viter1099)
          {
            $xfer += $output->writeString($kiter1098);
            $xfer += $output->writeString($viter1099);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ShouldSyncException extends TException {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'syncOpRevision',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    2 => array(
      'var' => 'syncScope',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SyncScope',
      ),
    3 => array(
      'var' => 'syncReason',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    4 => array(
      'var' => 'message',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var int
   */
  public $syncOpRevision = null;
  /**
   * @var \SyncScope
   */
  public $syncScope = null;
  /**
   * @var int
   */
  public $syncReason = null;
  /**
   * @var string
   */
  public $message = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['syncOpRevision'])) {
        $this->syncOpRevision = $vals['syncOpRevision'];
      }
      if (isset($vals['syncScope'])) {
        $this->syncScope = $vals['syncScope'];
      }
      if (isset($vals['syncReason'])) {
        $this->syncReason = $vals['syncReason'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    }
  }

  public function getName() {
    return 'ShouldSyncException';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->syncOpRevision);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->syncScope = new \SyncScope();
            $xfer += $this->syncScope->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->syncReason);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ShouldSyncException');
    if ($this->syncOpRevision !== null) {
      $xfer += $output->writeFieldBegin('syncOpRevision', TType::I64, 1);
      $xfer += $output->writeI64($this->syncOpRevision);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->syncScope !== null) {
      if (!is_object($this->syncScope)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('syncScope', TType::STRUCT, 2);
      $xfer += $this->syncScope->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->syncReason !== null) {
      $xfer += $output->writeFieldBegin('syncReason', TType::I32, 3);
      $xfer += $output->writeI32($this->syncReason);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 4);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PointException extends TException {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'code',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'reason',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'extra',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRING,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRING,
        ),
      ),
    );

  /**
   * @var int
   */
  public $code = null;
  /**
   * @var string
   */
  public $reason = null;
  /**
   * @var array
   */
  public $extra = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['reason'])) {
        $this->reason = $vals['reason'];
      }
      if (isset($vals['extra'])) {
        $this->extra = $vals['extra'];
      }
    }
  }

  public function getName() {
    return 'PointException';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->reason);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::MAP) {
            $this->extra = array();
            $_size1100 = 0;
            $_ktype1101 = 0;
            $_vtype1102 = 0;
            $xfer += $input->readMapBegin($_ktype1101, $_vtype1102, $_size1100);
            for ($_i1104 = 0; $_i1104 < $_size1100; ++$_i1104)
            {
              $key1105 = '';
              $val1106 = '';
              $xfer += $input->readString($key1105);
              $xfer += $input->readString($val1106);
              $this->extra[$key1105] = $val1106;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PointException');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reason !== null) {
      $xfer += $output->writeFieldBegin('reason', TType::STRING, 2);
      $xfer += $output->writeString($this->reason);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extra !== null) {
      if (!is_array($this->extra)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('extra', TType::MAP, 3);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->extra));
        {
          foreach ($this->extra as $kiter1107 => $viter1108)
          {
            $xfer += $output->writeString($kiter1107);
            $xfer += $output->writeString($viter1108);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ChannelException extends TException {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'code',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'reason',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'parameterMap',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRING,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRING,
        ),
      ),
    );

  /**
   * @var int
   */
  public $code = null;
  /**
   * @var string
   */
  public $reason = null;
  /**
   * @var array
   */
  public $parameterMap = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['reason'])) {
        $this->reason = $vals['reason'];
      }
      if (isset($vals['parameterMap'])) {
        $this->parameterMap = $vals['parameterMap'];
      }
    }
  }

  public function getName() {
    return 'ChannelException';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->reason);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::MAP) {
            $this->parameterMap = array();
            $_size1109 = 0;
            $_ktype1110 = 0;
            $_vtype1111 = 0;
            $xfer += $input->readMapBegin($_ktype1110, $_vtype1111, $_size1109);
            for ($_i1113 = 0; $_i1113 < $_size1109; ++$_i1113)
            {
              $key1114 = '';
              $val1115 = '';
              $xfer += $input->readString($key1114);
              $xfer += $input->readString($val1115);
              $this->parameterMap[$key1114] = $val1115;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ChannelException');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reason !== null) {
      $xfer += $output->writeFieldBegin('reason', TType::STRING, 2);
      $xfer += $output->writeString($this->reason);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parameterMap !== null) {
      if (!is_array($this->parameterMap)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('parameterMap', TType::MAP, 3);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->parameterMap));
        {
          foreach ($this->parameterMap as $kiter1116 => $viter1117)
          {
            $xfer += $output->writeString($kiter1116);
            $xfer += $output->writeString($viter1117);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SquareException extends TException {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'errorCode',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'errorExtraInfo',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\ErrorExtraInfo',
      ),
    3 => array(
      'var' => 'reason',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var int
   */
  public $errorCode = null;
  /**
   * @var \ErrorExtraInfo
   */
  public $errorExtraInfo = null;
  /**
   * @var string
   */
  public $reason = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['errorCode'])) {
        $this->errorCode = $vals['errorCode'];
      }
      if (isset($vals['errorExtraInfo'])) {
        $this->errorExtraInfo = $vals['errorExtraInfo'];
      }
      if (isset($vals['reason'])) {
        $this->reason = $vals['reason'];
      }
    }
  }

  public function getName() {
    return 'SquareException';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->errorCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->errorExtraInfo = new \ErrorExtraInfo();
            $xfer += $this->errorExtraInfo->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->reason);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SquareException');
    if ($this->errorCode !== null) {
      $xfer += $output->writeFieldBegin('errorCode', TType::I32, 1);
      $xfer += $output->writeI32($this->errorCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorExtraInfo !== null) {
      if (!is_object($this->errorExtraInfo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('errorExtraInfo', TType::STRUCT, 2);
      $xfer += $this->errorExtraInfo->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reason !== null) {
      $xfer += $output->writeFieldBegin('reason', TType::STRING, 3);
      $xfer += $output->writeString($this->reason);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UniversalNotificationServiceException extends TException {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'code',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'reason',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'parameterMap',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRING,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRING,
        ),
      ),
    );

  /**
   * @var int
   */
  public $code = null;
  /**
   * @var string
   */
  public $reason = null;
  /**
   * @var array
   */
  public $parameterMap = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['reason'])) {
        $this->reason = $vals['reason'];
      }
      if (isset($vals['parameterMap'])) {
        $this->parameterMap = $vals['parameterMap'];
      }
    }
  }

  public function getName() {
    return 'UniversalNotificationServiceException';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->reason);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::MAP) {
            $this->parameterMap = array();
            $_size1118 = 0;
            $_ktype1119 = 0;
            $_vtype1120 = 0;
            $xfer += $input->readMapBegin($_ktype1119, $_vtype1120, $_size1118);
            for ($_i1122 = 0; $_i1122 < $_size1118; ++$_i1122)
            {
              $key1123 = '';
              $val1124 = '';
              $xfer += $input->readString($key1123);
              $xfer += $input->readString($val1124);
              $this->parameterMap[$key1123] = $val1124;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UniversalNotificationServiceException');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reason !== null) {
      $xfer += $output->writeFieldBegin('reason', TType::STRING, 2);
      $xfer += $output->writeString($this->reason);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parameterMap !== null) {
      if (!is_array($this->parameterMap)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('parameterMap', TType::MAP, 3);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->parameterMap));
        {
          foreach ($this->parameterMap as $kiter1125 => $viter1126)
          {
            $xfer += $output->writeString($kiter1125);
            $xfer += $output->writeString($viter1126);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UpdateBuddyProfileResult {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'requestId',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'state',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    3 => array(
      'var' => 'eventNo',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    11 => array(
      'var' => 'receiverCount',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    12 => array(
      'var' => 'successCount',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    13 => array(
      'var' => 'failCount',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    14 => array(
      'var' => 'cancelCount',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    15 => array(
      'var' => 'unregisterCount',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    21 => array(
      'var' => 'timestamp',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    22 => array(
      'var' => 'message',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $requestId = null;
  /**
   * @var int
   */
  public $state = null;
  /**
   * @var int
   */
  public $eventNo = null;
  /**
   * @var int
   */
  public $receiverCount = null;
  /**
   * @var int
   */
  public $successCount = null;
  /**
   * @var int
   */
  public $failCount = null;
  /**
   * @var int
   */
  public $cancelCount = null;
  /**
   * @var int
   */
  public $unregisterCount = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var string
   */
  public $message = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['requestId'])) {
        $this->requestId = $vals['requestId'];
      }
      if (isset($vals['state'])) {
        $this->state = $vals['state'];
      }
      if (isset($vals['eventNo'])) {
        $this->eventNo = $vals['eventNo'];
      }
      if (isset($vals['receiverCount'])) {
        $this->receiverCount = $vals['receiverCount'];
      }
      if (isset($vals['successCount'])) {
        $this->successCount = $vals['successCount'];
      }
      if (isset($vals['failCount'])) {
        $this->failCount = $vals['failCount'];
      }
      if (isset($vals['cancelCount'])) {
        $this->cancelCount = $vals['cancelCount'];
      }
      if (isset($vals['unregisterCount'])) {
        $this->unregisterCount = $vals['unregisterCount'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    }
  }

  public function getName() {
    return 'UpdateBuddyProfileResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->requestId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->state);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->eventNo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->receiverCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->successCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->failCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->cancelCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->unregisterCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UpdateBuddyProfileResult');
    if ($this->requestId !== null) {
      $xfer += $output->writeFieldBegin('requestId', TType::STRING, 1);
      $xfer += $output->writeString($this->requestId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->state !== null) {
      $xfer += $output->writeFieldBegin('state', TType::I32, 2);
      $xfer += $output->writeI32($this->state);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->eventNo !== null) {
      $xfer += $output->writeFieldBegin('eventNo', TType::I32, 3);
      $xfer += $output->writeI32($this->eventNo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->receiverCount !== null) {
      $xfer += $output->writeFieldBegin('receiverCount', TType::I64, 11);
      $xfer += $output->writeI64($this->receiverCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->successCount !== null) {
      $xfer += $output->writeFieldBegin('successCount', TType::I64, 12);
      $xfer += $output->writeI64($this->successCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->failCount !== null) {
      $xfer += $output->writeFieldBegin('failCount', TType::I64, 13);
      $xfer += $output->writeI64($this->failCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cancelCount !== null) {
      $xfer += $output->writeFieldBegin('cancelCount', TType::I64, 14);
      $xfer += $output->writeI64($this->cancelCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->unregisterCount !== null) {
      $xfer += $output->writeFieldBegin('unregisterCount', TType::I64, 15);
      $xfer += $output->writeI64($this->unregisterCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 21);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 22);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UserAuthStatus {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'phoneNumberRegistered',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    2 => array(
      'var' => 'registeredSnsIdTypes',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::I32,
      'elem' => array(
        'type' => TType::I32,
        ),
      ),
    3 => array(
      'var' => 'accountMigrationCheckType',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var bool
   */
  public $phoneNumberRegistered = null;
  /**
   * @var int[]
   */
  public $registeredSnsIdTypes = null;
  /**
   * @var int
   */
  public $accountMigrationCheckType = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['phoneNumberRegistered'])) {
        $this->phoneNumberRegistered = $vals['phoneNumberRegistered'];
      }
      if (isset($vals['registeredSnsIdTypes'])) {
        $this->registeredSnsIdTypes = $vals['registeredSnsIdTypes'];
      }
      if (isset($vals['accountMigrationCheckType'])) {
        $this->accountMigrationCheckType = $vals['accountMigrationCheckType'];
      }
    }
  }

  public function getName() {
    return 'UserAuthStatus';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->phoneNumberRegistered);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->registeredSnsIdTypes = array();
            $_size1127 = 0;
            $_etype1130 = 0;
            $xfer += $input->readListBegin($_etype1130, $_size1127);
            for ($_i1131 = 0; $_i1131 < $_size1127; ++$_i1131)
            {
              $elem1132 = null;
              $xfer += $input->readI32($elem1132);
              $this->registeredSnsIdTypes []= $elem1132;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->accountMigrationCheckType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserAuthStatus');
    if ($this->phoneNumberRegistered !== null) {
      $xfer += $output->writeFieldBegin('phoneNumberRegistered', TType::BOOL, 1);
      $xfer += $output->writeBool($this->phoneNumberRegistered);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->registeredSnsIdTypes !== null) {
      if (!is_array($this->registeredSnsIdTypes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('registeredSnsIdTypes', TType::LST, 2);
      {
        $output->writeListBegin(TType::I32, count($this->registeredSnsIdTypes));
        {
          foreach ($this->registeredSnsIdTypes as $iter1133)
          {
            $xfer += $output->writeI32($iter1133);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accountMigrationCheckType !== null) {
      $xfer += $output->writeFieldBegin('accountMigrationCheckType', TType::I32, 3);
      $xfer += $output->writeI32($this->accountMigrationCheckType);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class WapInvitation {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'type',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    10 => array(
      'var' => 'inviteeEmail',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    11 => array(
      'var' => 'inviterMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    12 => array(
      'var' => 'roomMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var int
   */
  public $type = null;
  /**
   * @var string
   */
  public $inviteeEmail = null;
  /**
   * @var string
   */
  public $inviterMid = null;
  /**
   * @var string
   */
  public $roomMid = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['inviteeEmail'])) {
        $this->inviteeEmail = $vals['inviteeEmail'];
      }
      if (isset($vals['inviterMid'])) {
        $this->inviterMid = $vals['inviterMid'];
      }
      if (isset($vals['roomMid'])) {
        $this->roomMid = $vals['roomMid'];
      }
    }
  }

  public function getName() {
    return 'WapInvitation';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->inviteeEmail);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->inviterMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->roomMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('WapInvitation');
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 1);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->inviteeEmail !== null) {
      $xfer += $output->writeFieldBegin('inviteeEmail', TType::STRING, 10);
      $xfer += $output->writeString($this->inviteeEmail);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->inviterMid !== null) {
      $xfer += $output->writeFieldBegin('inviterMid', TType::STRING, 11);
      $xfer += $output->writeString($this->inviterMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->roomMid !== null) {
      $xfer += $output->writeFieldBegin('roomMid', TType::STRING, 12);
      $xfer += $output->writeString($this->roomMid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GroupCall {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'online',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    2 => array(
      'var' => 'chatMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'hostMids',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'memberMids',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRING,
      'elem' => array(
        'type' => TType::STRING,
        ),
      ),
    5 => array(
      'var' => 'started',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    6 => array(
      'var' => 'mediaType',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var bool
   */
  public $online = null;
  /**
   * @var string
   */
  public $chatMid = null;
  /**
   * @var string
   */
  public $hostMids = null;
  /**
   * @var string[]
   */
  public $memberMids = null;
  /**
   * @var int
   */
  public $started = null;
  /**
   * @var int
   */
  public $mediaType = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['online'])) {
        $this->online = $vals['online'];
      }
      if (isset($vals['chatMid'])) {
        $this->chatMid = $vals['chatMid'];
      }
      if (isset($vals['hostMids'])) {
        $this->hostMids = $vals['hostMids'];
      }
      if (isset($vals['memberMids'])) {
        $this->memberMids = $vals['memberMids'];
      }
      if (isset($vals['started'])) {
        $this->started = $vals['started'];
      }
      if (isset($vals['mediaType'])) {
        $this->mediaType = $vals['mediaType'];
      }
    }
  }

  public function getName() {
    return 'GroupCall';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->online);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->chatMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->hostMids);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->memberMids = array();
            $_size1134 = 0;
            $_etype1137 = 0;
            $xfer += $input->readListBegin($_etype1137, $_size1134);
            for ($_i1138 = 0; $_i1138 < $_size1134; ++$_i1138)
            {
              $elem1139 = null;
              $xfer += $input->readString($elem1139);
              $this->memberMids []= $elem1139;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->started);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->mediaType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GroupCall');
    if ($this->online !== null) {
      $xfer += $output->writeFieldBegin('online', TType::BOOL, 1);
      $xfer += $output->writeBool($this->online);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->chatMid !== null) {
      $xfer += $output->writeFieldBegin('chatMid', TType::STRING, 2);
      $xfer += $output->writeString($this->chatMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->hostMids !== null) {
      $xfer += $output->writeFieldBegin('hostMids', TType::STRING, 3);
      $xfer += $output->writeString($this->hostMids);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->memberMids !== null) {
      if (!is_array($this->memberMids)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('memberMids', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRING, count($this->memberMids));
        {
          foreach ($this->memberMids as $iter1140)
          {
            $xfer += $output->writeString($iter1140);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->started !== null) {
      $xfer += $output->writeFieldBegin('started', TType::I64, 5);
      $xfer += $output->writeI64($this->started);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mediaType !== null) {
      $xfer += $output->writeFieldBegin('mediaType', TType::I32, 6);
      $xfer += $output->writeI32($this->mediaType);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GroupCallRoute {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'token',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'cscf',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\CallHost',
      ),
    3 => array(
      'var' => 'mix',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\CallHost',
      ),
    );

  /**
   * @var string
   */
  public $token = null;
  /**
   * @var \CallHost
   */
  public $cscf = null;
  /**
   * @var \CallHost
   */
  public $mix = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['cscf'])) {
        $this->cscf = $vals['cscf'];
      }
      if (isset($vals['mix'])) {
        $this->mix = $vals['mix'];
      }
    }
  }

  public function getName() {
    return 'GroupCallRoute';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->cscf = new \CallHost();
            $xfer += $this->cscf->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->mix = new \CallHost();
            $xfer += $this->mix->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GroupCallRoute');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cscf !== null) {
      if (!is_object($this->cscf)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('cscf', TType::STRUCT, 2);
      $xfer += $this->cscf->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mix !== null) {
      if (!is_object($this->mix)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('mix', TType::STRUCT, 3);
      $xfer += $this->mix->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


