<?php
/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class PaymentReservation
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'receiverMid',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'productId',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'language',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'location',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        5 => array(
            'var' => 'currency',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        6 => array(
            'var' => 'price',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        7 => array(
            'var' => 'appStoreCode',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        8 => array(
            'var' => 'messageText',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        9 => array(
            'var' => 'messageTemplate',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        10 => array(
            'var' => 'packageId',
            'isRequired' => false,
            'type' => TType::I64,
        ),
    );

    /**
     * @var string
     */
    public $receiverMid = null;
    /**
     * @var string
     */
    public $productId = null;
    /**
     * @var string
     */
    public $language = null;
    /**
     * @var string
     */
    public $location = null;
    /**
     * @var string
     */
    public $currency = null;
    /**
     * @var string
     */
    public $price = null;
    /**
     * @var int
     */
    public $appStoreCode = null;
    /**
     * @var string
     */
    public $messageText = null;
    /**
     * @var int
     */
    public $messageTemplate = null;
    /**
     * @var int
     */
    public $packageId = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['receiverMid'])) {
                $this->receiverMid = $vals['receiverMid'];
            }
            if (isset($vals['productId'])) {
                $this->productId = $vals['productId'];
            }
            if (isset($vals['language'])) {
                $this->language = $vals['language'];
            }
            if (isset($vals['location'])) {
                $this->location = $vals['location'];
            }
            if (isset($vals['currency'])) {
                $this->currency = $vals['currency'];
            }
            if (isset($vals['price'])) {
                $this->price = $vals['price'];
            }
            if (isset($vals['appStoreCode'])) {
                $this->appStoreCode = $vals['appStoreCode'];
            }
            if (isset($vals['messageText'])) {
                $this->messageText = $vals['messageText'];
            }
            if (isset($vals['messageTemplate'])) {
                $this->messageTemplate = $vals['messageTemplate'];
            }
            if (isset($vals['packageId'])) {
                $this->packageId = $vals['packageId'];
            }
        }
    }

    public function getName()
    {
        return 'PaymentReservation';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->receiverMid);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->productId);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->language);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->location);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->currency);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->price);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->appStoreCode);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->messageText);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->messageTemplate);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->packageId);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('PaymentReservation');
        if ($this->receiverMid !== null) {
            $xfer += $output->writeFieldBegin('receiverMid', TType::STRING, 1);
            $xfer += $output->writeString($this->receiverMid);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->productId !== null) {
            $xfer += $output->writeFieldBegin('productId', TType::STRING, 2);
            $xfer += $output->writeString($this->productId);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->language !== null) {
            $xfer += $output->writeFieldBegin('language', TType::STRING, 3);
            $xfer += $output->writeString($this->language);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->location !== null) {
            $xfer += $output->writeFieldBegin('location', TType::STRING, 4);
            $xfer += $output->writeString($this->location);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->currency !== null) {
            $xfer += $output->writeFieldBegin('currency', TType::STRING, 5);
            $xfer += $output->writeString($this->currency);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->price !== null) {
            $xfer += $output->writeFieldBegin('price', TType::STRING, 6);
            $xfer += $output->writeString($this->price);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->appStoreCode !== null) {
            $xfer += $output->writeFieldBegin('appStoreCode', TType::I32, 7);
            $xfer += $output->writeI32($this->appStoreCode);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->messageText !== null) {
            $xfer += $output->writeFieldBegin('messageText', TType::STRING, 8);
            $xfer += $output->writeString($this->messageText);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->messageTemplate !== null) {
            $xfer += $output->writeFieldBegin('messageTemplate', TType::I32, 9);
            $xfer += $output->writeI32($this->messageTemplate);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->packageId !== null) {
            $xfer += $output->writeFieldBegin('packageId', TType::I64, 10);
            $xfer += $output->writeI64($this->packageId);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
