<?php
/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class TalkService_reportContacts_args
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        2 => array(
            'var' => 'syncOpRevision',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        3 => array(
            'var' => 'category',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        4 => array(
            'var' => 'contactReports',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\ContactReport',
                ),
        ),
        5 => array(
            'var' => 'actionType',
            'isRequired' => false,
            'type' => TType::I32,
        ),
    );

    /**
     * @var int
     */
    public $syncOpRevision = null;
    /**
     * @var int
     */
    public $category = null;
    /**
     * @var \ContactReport[]
     */
    public $contactReports = null;
    /**
     * @var int
     */
    public $actionType = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['syncOpRevision'])) {
                $this->syncOpRevision = $vals['syncOpRevision'];
            }
            if (isset($vals['category'])) {
                $this->category = $vals['category'];
            }
            if (isset($vals['contactReports'])) {
                $this->contactReports = $vals['contactReports'];
            }
            if (isset($vals['actionType'])) {
                $this->actionType = $vals['actionType'];
            }
        }
    }

    public function getName()
    {
        return 'TalkService_reportContacts_args';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 2:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->syncOpRevision);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->category);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::LST) {
                        $this->contactReports = array();
                        $_size1898 = 0;
                        $_etype1901 = 0;
                        $xfer += $input->readListBegin($_etype1901, $_size1898);
                        for ($_i1902 = 0; $_i1902 < $_size1898; ++$_i1902) {
                            $elem1903 = null;
                            $elem1903 = new \ContactReport();
                            $xfer += $elem1903->read($input);
                            $this->contactReports []= $elem1903;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->actionType);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('TalkService_reportContacts_args');
        if ($this->syncOpRevision !== null) {
            $xfer += $output->writeFieldBegin('syncOpRevision', TType::I64, 2);
            $xfer += $output->writeI64($this->syncOpRevision);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->category !== null) {
            $xfer += $output->writeFieldBegin('category', TType::I32, 3);
            $xfer += $output->writeI32($this->category);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->contactReports !== null) {
            if (!is_array($this->contactReports)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('contactReports', TType::LST, 4);
            $output->writeListBegin(TType::STRUCT, count($this->contactReports));
            foreach ($this->contactReports as $iter1904) {
                $xfer += $iter1904->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->actionType !== null) {
            $xfer += $output->writeFieldBegin('actionType', TType::I32, 5);
            $xfer += $output->writeI32($this->actionType);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
