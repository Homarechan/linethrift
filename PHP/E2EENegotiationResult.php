<?php
/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class E2EENegotiationResult
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'allowedTypes',
            'isRequired' => false,
            'type' => TType::SET,
            'etype' => TType::I32,
            'elem' => array(
                'type' => TType::I32,
                ),
        ),
        2 => array(
            'var' => 'publicKey',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\E2EEPublicKey',
        ),
    );

    /**
     * @var int[]
     */
    public $allowedTypes = null;
    /**
     * @var \E2EEPublicKey
     */
    public $publicKey = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['allowedTypes'])) {
                $this->allowedTypes = $vals['allowedTypes'];
            }
            if (isset($vals['publicKey'])) {
                $this->publicKey = $vals['publicKey'];
            }
        }
    }

    public function getName()
    {
        return 'E2EENegotiationResult';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::SET) {
                        $this->allowedTypes = array();
                        $_size7 = 0;
                        $_etype10 = 0;
                        $xfer += $input->readSetBegin($_etype10, $_size7);
                        for ($_i11 = 0; $_i11 < $_size7; ++$_i11) {
                            $elem12 = null;
                            $xfer += $input->readI32($elem12);
                            $this->allowedTypes[$elem12] = true;
                        }
                        $xfer += $input->readSetEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRUCT) {
                        $this->publicKey = new \E2EEPublicKey();
                        $xfer += $this->publicKey->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('E2EENegotiationResult');
        if ($this->allowedTypes !== null) {
            if (!is_array($this->allowedTypes)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('allowedTypes', TType::SET, 1);
            $output->writeSetBegin(TType::I32, count($this->allowedTypes));
            foreach ($this->allowedTypes as $iter13 => $iter14) {
                $xfer += $output->writeI32($iter13);
            }
            $output->writeSetEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->publicKey !== null) {
            if (!is_object($this->publicKey)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('publicKey', TType::STRUCT, 2);
            $xfer += $this->publicKey->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
