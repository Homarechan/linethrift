<?php
/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class DeviceInfo
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'deviceName',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'systemName',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'systemVersion',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'model',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        10 => array(
            'var' => 'carrierCode',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        11 => array(
            'var' => 'carrierName',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        20 => array(
            'var' => 'applicationType',
            'isRequired' => false,
            'type' => TType::I32,
        ),
    );

    /**
     * @var string
     */
    public $deviceName = null;
    /**
     * @var string
     */
    public $systemName = null;
    /**
     * @var string
     */
    public $systemVersion = null;
    /**
     * @var string
     */
    public $model = null;
    /**
     * @var int
     */
    public $carrierCode = null;
    /**
     * @var string
     */
    public $carrierName = null;
    /**
     * @var int
     */
    public $applicationType = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['deviceName'])) {
                $this->deviceName = $vals['deviceName'];
            }
            if (isset($vals['systemName'])) {
                $this->systemName = $vals['systemName'];
            }
            if (isset($vals['systemVersion'])) {
                $this->systemVersion = $vals['systemVersion'];
            }
            if (isset($vals['model'])) {
                $this->model = $vals['model'];
            }
            if (isset($vals['carrierCode'])) {
                $this->carrierCode = $vals['carrierCode'];
            }
            if (isset($vals['carrierName'])) {
                $this->carrierName = $vals['carrierName'];
            }
            if (isset($vals['applicationType'])) {
                $this->applicationType = $vals['applicationType'];
            }
        }
    }

    public function getName()
    {
        return 'DeviceInfo';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->deviceName);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->systemName);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->systemVersion);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->model);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->carrierCode);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->carrierName);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 20:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->applicationType);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('DeviceInfo');
        if ($this->deviceName !== null) {
            $xfer += $output->writeFieldBegin('deviceName', TType::STRING, 1);
            $xfer += $output->writeString($this->deviceName);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->systemName !== null) {
            $xfer += $output->writeFieldBegin('systemName', TType::STRING, 2);
            $xfer += $output->writeString($this->systemName);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->systemVersion !== null) {
            $xfer += $output->writeFieldBegin('systemVersion', TType::STRING, 3);
            $xfer += $output->writeString($this->systemVersion);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->model !== null) {
            $xfer += $output->writeFieldBegin('model', TType::STRING, 4);
            $xfer += $output->writeString($this->model);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->carrierCode !== null) {
            $xfer += $output->writeFieldBegin('carrierCode', TType::I32, 10);
            $xfer += $output->writeI32($this->carrierCode);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->carrierName !== null) {
            $xfer += $output->writeFieldBegin('carrierName', TType::STRING, 11);
            $xfer += $output->writeString($this->carrierName);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->applicationType !== null) {
            $xfer += $output->writeFieldBegin('applicationType', TType::I32, 20);
            $xfer += $output->writeI32($this->applicationType);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
