<?php
/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class PaidCallBalance
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'productType',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        2 => array(
            'var' => 'productName',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'unit',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'limitedPaidBalance',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        5 => array(
            'var' => 'limitedFreeBalance',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        6 => array(
            'var' => 'unlimitedPaidBalance',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        7 => array(
            'var' => 'unlimitedFreeBalance',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        8 => array(
            'var' => 'startTime',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        9 => array(
            'var' => 'endTime',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        10 => array(
            'var' => 'autopayEnabled',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
    );

    /**
     * @var int
     */
    public $productType = null;
    /**
     * @var string
     */
    public $productName = null;
    /**
     * @var string
     */
    public $unit = null;
    /**
     * @var int
     */
    public $limitedPaidBalance = null;
    /**
     * @var int
     */
    public $limitedFreeBalance = null;
    /**
     * @var int
     */
    public $unlimitedPaidBalance = null;
    /**
     * @var int
     */
    public $unlimitedFreeBalance = null;
    /**
     * @var int
     */
    public $startTime = null;
    /**
     * @var int
     */
    public $endTime = null;
    /**
     * @var bool
     */
    public $autopayEnabled = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['productType'])) {
                $this->productType = $vals['productType'];
            }
            if (isset($vals['productName'])) {
                $this->productName = $vals['productName'];
            }
            if (isset($vals['unit'])) {
                $this->unit = $vals['unit'];
            }
            if (isset($vals['limitedPaidBalance'])) {
                $this->limitedPaidBalance = $vals['limitedPaidBalance'];
            }
            if (isset($vals['limitedFreeBalance'])) {
                $this->limitedFreeBalance = $vals['limitedFreeBalance'];
            }
            if (isset($vals['unlimitedPaidBalance'])) {
                $this->unlimitedPaidBalance = $vals['unlimitedPaidBalance'];
            }
            if (isset($vals['unlimitedFreeBalance'])) {
                $this->unlimitedFreeBalance = $vals['unlimitedFreeBalance'];
            }
            if (isset($vals['startTime'])) {
                $this->startTime = $vals['startTime'];
            }
            if (isset($vals['endTime'])) {
                $this->endTime = $vals['endTime'];
            }
            if (isset($vals['autopayEnabled'])) {
                $this->autopayEnabled = $vals['autopayEnabled'];
            }
        }
    }

    public function getName()
    {
        return 'PaidCallBalance';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->productType);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->productName);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->unit);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->limitedPaidBalance);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->limitedFreeBalance);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->unlimitedPaidBalance);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->unlimitedFreeBalance);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->startTime);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->endTime);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->autopayEnabled);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('PaidCallBalance');
        if ($this->productType !== null) {
            $xfer += $output->writeFieldBegin('productType', TType::I32, 1);
            $xfer += $output->writeI32($this->productType);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->productName !== null) {
            $xfer += $output->writeFieldBegin('productName', TType::STRING, 2);
            $xfer += $output->writeString($this->productName);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->unit !== null) {
            $xfer += $output->writeFieldBegin('unit', TType::STRING, 3);
            $xfer += $output->writeString($this->unit);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->limitedPaidBalance !== null) {
            $xfer += $output->writeFieldBegin('limitedPaidBalance', TType::I32, 4);
            $xfer += $output->writeI32($this->limitedPaidBalance);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->limitedFreeBalance !== null) {
            $xfer += $output->writeFieldBegin('limitedFreeBalance', TType::I32, 5);
            $xfer += $output->writeI32($this->limitedFreeBalance);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->unlimitedPaidBalance !== null) {
            $xfer += $output->writeFieldBegin('unlimitedPaidBalance', TType::I32, 6);
            $xfer += $output->writeI32($this->unlimitedPaidBalance);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->unlimitedFreeBalance !== null) {
            $xfer += $output->writeFieldBegin('unlimitedFreeBalance', TType::I32, 7);
            $xfer += $output->writeI32($this->unlimitedFreeBalance);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->startTime !== null) {
            $xfer += $output->writeFieldBegin('startTime', TType::I64, 8);
            $xfer += $output->writeI64($this->startTime);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->endTime !== null) {
            $xfer += $output->writeFieldBegin('endTime', TType::I64, 9);
            $xfer += $output->writeI64($this->endTime);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->autopayEnabled !== null) {
            $xfer += $output->writeFieldBegin('autopayEnabled', TType::BOOL, 10);
            $xfer += $output->writeBool($this->autopayEnabled);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
