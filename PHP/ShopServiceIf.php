<?php
/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

interface ShopServiceIf
{
    /**
     * @param \PaymentReservation $paymentReservation
     * @throws \TalkException
     */
    public function buyCoinProduct(\PaymentReservation $paymentReservation);
    /**
     * @param string $receiverMid
     * @param string $productId
     * @param int $messageTemplate
     * @param string $language
     * @param string $country
     * @param int $packageId
     * @throws \TalkException
     */
    public function buyFreeProduct($receiverMid, $productId, $messageTemplate, $language, $country, $packageId);
    /**
     * @param string $receiverMid
     * @param string $productId
     * @param int $messageTemplate
     * @param string $language
     * @param string $country
     * @param int $packageId
     * @param string $serialNumber
     * @throws \TalkException
     */
    public function buyMustbuyProduct($receiverMid, $productId, $messageTemplate, $language, $country, $packageId, $serialNumber);
    /**
     * @param string $recipientMid
     * @param int $packageId
     * @param string $language
     * @param string $country
     * @throws \TalkException
     */
    public function checkCanReceivePresent($recipientMid, $packageId, $language, $country);
    /**
     * @param int $start
     * @param int $size
     * @param string $language
     * @param string $country
     * @return \ProductList
     * @throws \TalkException
     */
    public function getActivePurchases($start, $size, $language, $country);
    /**
     * @param int $start
     * @param int $size
     * @param string $language
     * @param string $country
     * @return \ProductSimpleList
     * @throws \TalkException
     */
    public function getActivePurchaseVersions($start, $size, $language, $country);
    /**
     * @param int $appStoreCode
     * @param string $country
     * @param string $language
     * @return \CoinProductItem[]
     * @throws \TalkException
     */
    public function getCoinProducts($appStoreCode, $country, $language);
    /**
     * @param int $appStoreCode
     * @param int $pgCode
     * @param string $country
     * @param string $language
     * @return \CoinProductItem[]
     * @throws \TalkException
     */
    public function getCoinProductsByPgCode($appStoreCode, $pgCode, $country, $language);
    /**
     * @param \CoinHistoryCondition $request
     * @return \CoinHistoryResult
     * @throws \TalkException
     */
    public function getCoinPurchaseHistory(\CoinHistoryCondition $request);
    /**
     * @param \CoinHistoryCondition $request
     * @return \CoinHistoryResult
     * @throws \TalkException
     */
    public function getCoinUseAndRefundHistory(\CoinHistoryCondition $request);
    /**
     * @param int $start
     * @param int $size
     * @param string $language
     * @param string $country
     * @return \ProductList
     * @throws \TalkException
     */
    public function getDownloads($start, $size, $language, $country);
    /**
     * @param int $start
     * @param int $size
     * @param string $language
     * @param string $country
     * @return \ProductList
     * @throws \TalkException
     */
    public function getEventPackages($start, $size, $language, $country);
    /**
     * @param int $start
     * @param int $size
     * @param string $language
     * @param string $country
     * @return \ProductList
     * @throws \TalkException
     */
    public function getNewlyReleasedPackages($start, $size, $language, $country);
    /**
     * @param int $start
     * @param int $size
     * @param string $language
     * @param string $country
     * @return \ProductList
     * @throws \TalkException
     */
    public function getPopularPackages($start, $size, $language, $country);
    /**
     * @param int $start
     * @param int $size
     * @param string $language
     * @param string $country
     * @return \ProductList
     * @throws \TalkException
     */
    public function getPresentsReceived($start, $size, $language, $country);
    /**
     * @param int $start
     * @param int $size
     * @param string $language
     * @param string $country
     * @return \ProductList
     * @throws \TalkException
     */
    public function getPresentsSent($start, $size, $language, $country);
    /**
     * @param int $packageID
     * @param string $language
     * @param string $country
     * @return \Product
     * @throws \TalkException
     */
    public function getProduct($packageID, $language, $country);
    /**
     * @param string[] $productIdList
     * @param string $language
     * @param string $country
     * @return \ProductList
     * @throws \TalkException
     */
    public function getProductList(array $productIdList, $language, $country);
    /**
     * @param string[] $productIdList
     * @param string $language
     * @param string $country
     * @param string $carrierCode
     * @return \ProductList
     * @throws \TalkException
     */
    public function getProductListWithCarrier(array $productIdList, $language, $country, $carrierCode);
    /**
     * @param int $packageID
     * @param string $language
     * @param string $country
     * @param string $carrierCode
     * @return \Product
     * @throws \TalkException
     */
    public function getProductWithCarrier($packageID, $language, $country, $carrierCode);
    /**
     * @param int $start
     * @param int $size
     * @param string $language
     * @param string $country
     * @return \ProductList
     * @throws \TalkException
     */
    public function getPurchaseHistory($start, $size, $language, $country);
    /**
     * @param int $appStoreCode
     * @return \Coin
     * @throws \TalkException
     */
    public function getTotalBalance($appStoreCode);
    /**
     * @param int $packageId
     * @param string $language
     * @return int
     * @throws \TalkException
     */
    public function notifyDownloaded($packageId, $language);
    /**
     * @param \CoinPurchaseReservation $request
     * @return \PaymentReservationResult
     * @throws \TalkException
     */
    public function reserveCoinPurchase(\CoinPurchaseReservation $request);
    /**
     * @param \PaymentReservation $paymentReservation
     * @return \PaymentReservationResult
     * @throws \TalkException
     */
    public function reservePayment(\PaymentReservation $paymentReservation);
}
