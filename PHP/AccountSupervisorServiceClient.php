<?php
/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class AccountSupervisorServiceClient implements \AccountSupervisorServiceIf
{
    protected $input_ = null;
    protected $output_ = null;

    protected $seqid_ = 0;

    public function __construct($input, $output = null)
    {
        $this->input_ = $input;
        $this->output_ = $output ? $output : $input;
    }


    public function getRSAKey()
    {
        $this->send_getRSAKey();
        return $this->recv_getRSAKey();
    }

    public function send_getRSAKey()
    {
        $args = new \AccountSupervisorService_getRSAKey_args();
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'getRSAKey',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('getRSAKey', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_getRSAKey()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\AccountSupervisorService_getRSAKey_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \AccountSupervisorService_getRSAKey_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        throw new \Exception("getRSAKey failed: unknown result");
    }

    public function notifyEmailConfirmationResult(array $parameterMap)
    {
        $this->send_notifyEmailConfirmationResult($parameterMap);
        $this->recv_notifyEmailConfirmationResult();
    }

    public function send_notifyEmailConfirmationResult(array $parameterMap)
    {
        $args = new \AccountSupervisorService_notifyEmailConfirmationResult_args();
        $args->parameterMap = $parameterMap;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'notifyEmailConfirmationResult',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('notifyEmailConfirmationResult', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_notifyEmailConfirmationResult()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\AccountSupervisorService_notifyEmailConfirmationResult_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \AccountSupervisorService_notifyEmailConfirmationResult_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        return;
    }

    public function registerVirtualAccount($locale, $encryptedVirtualUserId, $encryptedPassword)
    {
        $this->send_registerVirtualAccount($locale, $encryptedVirtualUserId, $encryptedPassword);
        return $this->recv_registerVirtualAccount();
    }

    public function send_registerVirtualAccount($locale, $encryptedVirtualUserId, $encryptedPassword)
    {
        $args = new \AccountSupervisorService_registerVirtualAccount_args();
        $args->locale = $locale;
        $args->encryptedVirtualUserId = $encryptedVirtualUserId;
        $args->encryptedPassword = $encryptedPassword;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'registerVirtualAccount',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('registerVirtualAccount', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_registerVirtualAccount()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\AccountSupervisorService_registerVirtualAccount_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \AccountSupervisorService_registerVirtualAccount_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        throw new \Exception("registerVirtualAccount failed: unknown result");
    }

    public function requestVirtualAccountPasswordChange($virtualMid, $encryptedVirtualUserId, $encryptedOldPassword, $encryptedNewPassword)
    {
        $this->send_requestVirtualAccountPasswordChange($virtualMid, $encryptedVirtualUserId, $encryptedOldPassword, $encryptedNewPassword);
        $this->recv_requestVirtualAccountPasswordChange();
    }

    public function send_requestVirtualAccountPasswordChange($virtualMid, $encryptedVirtualUserId, $encryptedOldPassword, $encryptedNewPassword)
    {
        $args = new \AccountSupervisorService_requestVirtualAccountPasswordChange_args();
        $args->virtualMid = $virtualMid;
        $args->encryptedVirtualUserId = $encryptedVirtualUserId;
        $args->encryptedOldPassword = $encryptedOldPassword;
        $args->encryptedNewPassword = $encryptedNewPassword;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'requestVirtualAccountPasswordChange',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('requestVirtualAccountPasswordChange', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_requestVirtualAccountPasswordChange()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\AccountSupervisorService_requestVirtualAccountPasswordChange_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \AccountSupervisorService_requestVirtualAccountPasswordChange_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        return;
    }

    public function requestVirtualAccountPasswordSet($virtualMid, $encryptedVirtualUserId, $encryptedNewPassword)
    {
        $this->send_requestVirtualAccountPasswordSet($virtualMid, $encryptedVirtualUserId, $encryptedNewPassword);
        $this->recv_requestVirtualAccountPasswordSet();
    }

    public function send_requestVirtualAccountPasswordSet($virtualMid, $encryptedVirtualUserId, $encryptedNewPassword)
    {
        $args = new \AccountSupervisorService_requestVirtualAccountPasswordSet_args();
        $args->virtualMid = $virtualMid;
        $args->encryptedVirtualUserId = $encryptedVirtualUserId;
        $args->encryptedNewPassword = $encryptedNewPassword;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'requestVirtualAccountPasswordSet',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('requestVirtualAccountPasswordSet', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_requestVirtualAccountPasswordSet()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\AccountSupervisorService_requestVirtualAccountPasswordSet_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \AccountSupervisorService_requestVirtualAccountPasswordSet_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        return;
    }

    public function unregisterVirtualAccount($virtualMid)
    {
        $this->send_unregisterVirtualAccount($virtualMid);
        $this->recv_unregisterVirtualAccount();
    }

    public function send_unregisterVirtualAccount($virtualMid)
    {
        $args = new \AccountSupervisorService_unregisterVirtualAccount_args();
        $args->virtualMid = $virtualMid;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'unregisterVirtualAccount',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('unregisterVirtualAccount', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_unregisterVirtualAccount()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\AccountSupervisorService_unregisterVirtualAccount_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \AccountSupervisorService_unregisterVirtualAccount_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        return;
    }
}
