<?php
/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class Square
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'mid',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'name',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'welcomeMessage',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'profileImageObsHash',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        5 => array(
            'var' => 'desc',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        6 => array(
            'var' => 'searchable',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        7 => array(
            'var' => 'type',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        8 => array(
            'var' => 'categoryID',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        9 => array(
            'var' => 'invitationURL',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        10 => array(
            'var' => 'revision',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        11 => array(
            'var' => 'ableToUseInvitationTicket',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        12 => array(
            'var' => 'state',
            'isRequired' => false,
            'type' => TType::I32,
        ),
    );

    /**
     * @var string
     */
    public $mid = null;
    /**
     * @var string
     */
    public $name = null;
    /**
     * @var string
     */
    public $welcomeMessage = null;
    /**
     * @var string
     */
    public $profileImageObsHash = null;
    /**
     * @var string
     */
    public $desc = null;
    /**
     * @var bool
     */
    public $searchable = null;
    /**
     * @var int
     */
    public $type = null;
    /**
     * @var int
     */
    public $categoryID = null;
    /**
     * @var string
     */
    public $invitationURL = null;
    /**
     * @var int
     */
    public $revision = null;
    /**
     * @var bool
     */
    public $ableToUseInvitationTicket = null;
    /**
     * @var int
     */
    public $state = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['mid'])) {
                $this->mid = $vals['mid'];
            }
            if (isset($vals['name'])) {
                $this->name = $vals['name'];
            }
            if (isset($vals['welcomeMessage'])) {
                $this->welcomeMessage = $vals['welcomeMessage'];
            }
            if (isset($vals['profileImageObsHash'])) {
                $this->profileImageObsHash = $vals['profileImageObsHash'];
            }
            if (isset($vals['desc'])) {
                $this->desc = $vals['desc'];
            }
            if (isset($vals['searchable'])) {
                $this->searchable = $vals['searchable'];
            }
            if (isset($vals['type'])) {
                $this->type = $vals['type'];
            }
            if (isset($vals['categoryID'])) {
                $this->categoryID = $vals['categoryID'];
            }
            if (isset($vals['invitationURL'])) {
                $this->invitationURL = $vals['invitationURL'];
            }
            if (isset($vals['revision'])) {
                $this->revision = $vals['revision'];
            }
            if (isset($vals['ableToUseInvitationTicket'])) {
                $this->ableToUseInvitationTicket = $vals['ableToUseInvitationTicket'];
            }
            if (isset($vals['state'])) {
                $this->state = $vals['state'];
            }
        }
    }

    public function getName()
    {
        return 'Square';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->mid);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->name);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->welcomeMessage);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->profileImageObsHash);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->desc);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->searchable);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->type);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->categoryID);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->invitationURL);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->revision);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->ableToUseInvitationTicket);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 12:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->state);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('Square');
        if ($this->mid !== null) {
            $xfer += $output->writeFieldBegin('mid', TType::STRING, 1);
            $xfer += $output->writeString($this->mid);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->name !== null) {
            $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
            $xfer += $output->writeString($this->name);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->welcomeMessage !== null) {
            $xfer += $output->writeFieldBegin('welcomeMessage', TType::STRING, 3);
            $xfer += $output->writeString($this->welcomeMessage);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->profileImageObsHash !== null) {
            $xfer += $output->writeFieldBegin('profileImageObsHash', TType::STRING, 4);
            $xfer += $output->writeString($this->profileImageObsHash);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->desc !== null) {
            $xfer += $output->writeFieldBegin('desc', TType::STRING, 5);
            $xfer += $output->writeString($this->desc);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->searchable !== null) {
            $xfer += $output->writeFieldBegin('searchable', TType::BOOL, 6);
            $xfer += $output->writeBool($this->searchable);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->type !== null) {
            $xfer += $output->writeFieldBegin('type', TType::I32, 7);
            $xfer += $output->writeI32($this->type);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->categoryID !== null) {
            $xfer += $output->writeFieldBegin('categoryID', TType::I32, 8);
            $xfer += $output->writeI32($this->categoryID);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->invitationURL !== null) {
            $xfer += $output->writeFieldBegin('invitationURL', TType::STRING, 9);
            $xfer += $output->writeString($this->invitationURL);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->revision !== null) {
            $xfer += $output->writeFieldBegin('revision', TType::I64, 10);
            $xfer += $output->writeI64($this->revision);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->ableToUseInvitationTicket !== null) {
            $xfer += $output->writeFieldBegin('ableToUseInvitationTicket', TType::BOOL, 11);
            $xfer += $output->writeBool($this->ableToUseInvitationTicket);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->state !== null) {
            $xfer += $output->writeFieldBegin('state', TType::I32, 12);
            $xfer += $output->writeI32($this->state);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
