<?php
/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class ContactModification
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'type',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        2 => array(
            'var' => 'luid',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        11 => array(
            'var' => 'phones',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        12 => array(
            'var' => 'emails',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        13 => array(
            'var' => 'userids',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
    );

    /**
     * @var int
     */
    public $type = null;
    /**
     * @var string
     */
    public $luid = null;
    /**
     * @var string[]
     */
    public $phones = null;
    /**
     * @var string[]
     */
    public $emails = null;
    /**
     * @var string[]
     */
    public $userids = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['type'])) {
                $this->type = $vals['type'];
            }
            if (isset($vals['luid'])) {
                $this->luid = $vals['luid'];
            }
            if (isset($vals['phones'])) {
                $this->phones = $vals['phones'];
            }
            if (isset($vals['emails'])) {
                $this->emails = $vals['emails'];
            }
            if (isset($vals['userids'])) {
                $this->userids = $vals['userids'];
            }
        }
    }

    public function getName()
    {
        return 'ContactModification';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->type);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->luid);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::LST) {
                        $this->phones = array();
                        $_size202 = 0;
                        $_etype205 = 0;
                        $xfer += $input->readListBegin($_etype205, $_size202);
                        for ($_i206 = 0; $_i206 < $_size202; ++$_i206) {
                            $elem207 = null;
                            $xfer += $input->readString($elem207);
                            $this->phones []= $elem207;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 12:
                    if ($ftype == TType::LST) {
                        $this->emails = array();
                        $_size208 = 0;
                        $_etype211 = 0;
                        $xfer += $input->readListBegin($_etype211, $_size208);
                        for ($_i212 = 0; $_i212 < $_size208; ++$_i212) {
                            $elem213 = null;
                            $xfer += $input->readString($elem213);
                            $this->emails []= $elem213;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 13:
                    if ($ftype == TType::LST) {
                        $this->userids = array();
                        $_size214 = 0;
                        $_etype217 = 0;
                        $xfer += $input->readListBegin($_etype217, $_size214);
                        for ($_i218 = 0; $_i218 < $_size214; ++$_i218) {
                            $elem219 = null;
                            $xfer += $input->readString($elem219);
                            $this->userids []= $elem219;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('ContactModification');
        if ($this->type !== null) {
            $xfer += $output->writeFieldBegin('type', TType::I32, 1);
            $xfer += $output->writeI32($this->type);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->luid !== null) {
            $xfer += $output->writeFieldBegin('luid', TType::STRING, 2);
            $xfer += $output->writeString($this->luid);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->phones !== null) {
            if (!is_array($this->phones)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('phones', TType::LST, 11);
            $output->writeListBegin(TType::STRING, count($this->phones));
            foreach ($this->phones as $iter220) {
                $xfer += $output->writeString($iter220);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->emails !== null) {
            if (!is_array($this->emails)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('emails', TType::LST, 12);
            $output->writeListBegin(TType::STRING, count($this->emails));
            foreach ($this->emails as $iter221) {
                $xfer += $output->writeString($iter221);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->userids !== null) {
            if (!is_array($this->userids)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('userids', TType::LST, 13);
            $output->writeListBegin(TType::STRING, count($this->userids));
            foreach ($this->userids as $iter222) {
                $xfer += $output->writeString($iter222);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
