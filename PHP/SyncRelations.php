<?php
/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class SyncRelations
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'syncAll',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        2 => array(
            'var' => 'syncParamContact',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\SyncParamContact',
                ),
        ),
        3 => array(
            'var' => 'syncParamMid',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\SyncParamMid',
                ),
        ),
    );

    /**
     * @var bool
     */
    public $syncAll = null;
    /**
     * @var \SyncParamContact[]
     */
    public $syncParamContact = null;
    /**
     * @var \SyncParamMid[]
     */
    public $syncParamMid = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['syncAll'])) {
                $this->syncAll = $vals['syncAll'];
            }
            if (isset($vals['syncParamContact'])) {
                $this->syncParamContact = $vals['syncParamContact'];
            }
            if (isset($vals['syncParamMid'])) {
                $this->syncParamMid = $vals['syncParamMid'];
            }
        }
    }

    public function getName()
    {
        return 'SyncRelations';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->syncAll);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::LST) {
                        $this->syncParamContact = array();
                        $_size489 = 0;
                        $_etype492 = 0;
                        $xfer += $input->readListBegin($_etype492, $_size489);
                        for ($_i493 = 0; $_i493 < $_size489; ++$_i493) {
                            $elem494 = null;
                            $elem494 = new \SyncParamContact();
                            $xfer += $elem494->read($input);
                            $this->syncParamContact []= $elem494;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::LST) {
                        $this->syncParamMid = array();
                        $_size495 = 0;
                        $_etype498 = 0;
                        $xfer += $input->readListBegin($_etype498, $_size495);
                        for ($_i499 = 0; $_i499 < $_size495; ++$_i499) {
                            $elem500 = null;
                            $elem500 = new \SyncParamMid();
                            $xfer += $elem500->read($input);
                            $this->syncParamMid []= $elem500;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('SyncRelations');
        if ($this->syncAll !== null) {
            $xfer += $output->writeFieldBegin('syncAll', TType::BOOL, 1);
            $xfer += $output->writeBool($this->syncAll);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->syncParamContact !== null) {
            if (!is_array($this->syncParamContact)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('syncParamContact', TType::LST, 2);
            $output->writeListBegin(TType::STRUCT, count($this->syncParamContact));
            foreach ($this->syncParamContact as $iter501) {
                $xfer += $iter501->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->syncParamMid !== null) {
            if (!is_array($this->syncParamMid)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('syncParamMid', TType::LST, 3);
            $output->writeListBegin(TType::STRUCT, count($this->syncParamMid));
            foreach ($this->syncParamMid as $iter502) {
                $xfer += $iter502->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
