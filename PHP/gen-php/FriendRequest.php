<?php
/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class FriendRequest
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'eMid',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'mid',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'direction',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        4 => array(
            'var' => 'method',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        5 => array(
            'var' => 'param',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        6 => array(
            'var' => 'timestamp',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        7 => array(
            'var' => 'seqId',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        10 => array(
            'var' => 'displayName',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        11 => array(
            'var' => 'picturePath',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        12 => array(
            'var' => 'pictureStatus',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
    );

    /**
     * @var string
     */
    public $eMid = null;
    /**
     * @var string
     */
    public $mid = null;
    /**
     * @var int
     */
    public $direction = null;
    /**
     * @var int
     */
    public $method = null;
    /**
     * @var string
     */
    public $param = null;
    /**
     * @var int
     */
    public $timestamp = null;
    /**
     * @var int
     */
    public $seqId = null;
    /**
     * @var string
     */
    public $displayName = null;
    /**
     * @var string
     */
    public $picturePath = null;
    /**
     * @var string
     */
    public $pictureStatus = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['eMid'])) {
                $this->eMid = $vals['eMid'];
            }
            if (isset($vals['mid'])) {
                $this->mid = $vals['mid'];
            }
            if (isset($vals['direction'])) {
                $this->direction = $vals['direction'];
            }
            if (isset($vals['method'])) {
                $this->method = $vals['method'];
            }
            if (isset($vals['param'])) {
                $this->param = $vals['param'];
            }
            if (isset($vals['timestamp'])) {
                $this->timestamp = $vals['timestamp'];
            }
            if (isset($vals['seqId'])) {
                $this->seqId = $vals['seqId'];
            }
            if (isset($vals['displayName'])) {
                $this->displayName = $vals['displayName'];
            }
            if (isset($vals['picturePath'])) {
                $this->picturePath = $vals['picturePath'];
            }
            if (isset($vals['pictureStatus'])) {
                $this->pictureStatus = $vals['pictureStatus'];
            }
        }
    }

    public function getName()
    {
        return 'FriendRequest';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->eMid);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->mid);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->direction);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->method);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->param);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->timestamp);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->seqId);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->displayName);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->picturePath);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 12:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->pictureStatus);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('FriendRequest');
        if ($this->eMid !== null) {
            $xfer += $output->writeFieldBegin('eMid', TType::STRING, 1);
            $xfer += $output->writeString($this->eMid);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->mid !== null) {
            $xfer += $output->writeFieldBegin('mid', TType::STRING, 2);
            $xfer += $output->writeString($this->mid);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->direction !== null) {
            $xfer += $output->writeFieldBegin('direction', TType::I32, 3);
            $xfer += $output->writeI32($this->direction);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->method !== null) {
            $xfer += $output->writeFieldBegin('method', TType::I32, 4);
            $xfer += $output->writeI32($this->method);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->param !== null) {
            $xfer += $output->writeFieldBegin('param', TType::STRING, 5);
            $xfer += $output->writeString($this->param);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->timestamp !== null) {
            $xfer += $output->writeFieldBegin('timestamp', TType::I64, 6);
            $xfer += $output->writeI64($this->timestamp);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->seqId !== null) {
            $xfer += $output->writeFieldBegin('seqId', TType::I64, 7);
            $xfer += $output->writeI64($this->seqId);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->displayName !== null) {
            $xfer += $output->writeFieldBegin('displayName', TType::STRING, 10);
            $xfer += $output->writeString($this->displayName);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->picturePath !== null) {
            $xfer += $output->writeFieldBegin('picturePath', TType::STRING, 11);
            $xfer += $output->writeString($this->picturePath);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->pictureStatus !== null) {
            $xfer += $output->writeFieldBegin('pictureStatus', TType::STRING, 12);
            $xfer += $output->writeString($this->pictureStatus);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
