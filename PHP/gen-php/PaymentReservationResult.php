<?php
/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class PaymentReservationResult
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'orderId',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'confirmUrl',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'extras',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRING,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::STRING,
                ),
        ),
    );

    /**
     * @var string
     */
    public $orderId = null;
    /**
     * @var string
     */
    public $confirmUrl = null;
    /**
     * @var array
     */
    public $extras = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['orderId'])) {
                $this->orderId = $vals['orderId'];
            }
            if (isset($vals['confirmUrl'])) {
                $this->confirmUrl = $vals['confirmUrl'];
            }
            if (isset($vals['extras'])) {
                $this->extras = $vals['extras'];
            }
        }
    }

    public function getName()
    {
        return 'PaymentReservationResult';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->orderId);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->confirmUrl);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::MAP) {
                        $this->extras = array();
                        $_size334 = 0;
                        $_ktype335 = 0;
                        $_vtype336 = 0;
                        $xfer += $input->readMapBegin($_ktype335, $_vtype336, $_size334);
                        for ($_i338 = 0; $_i338 < $_size334; ++$_i338) {
                            $key339 = '';
                            $val340 = '';
                            $xfer += $input->readString($key339);
                            $xfer += $input->readString($val340);
                            $this->extras[$key339] = $val340;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('PaymentReservationResult');
        if ($this->orderId !== null) {
            $xfer += $output->writeFieldBegin('orderId', TType::STRING, 1);
            $xfer += $output->writeString($this->orderId);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->confirmUrl !== null) {
            $xfer += $output->writeFieldBegin('confirmUrl', TType::STRING, 2);
            $xfer += $output->writeString($this->confirmUrl);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->extras !== null) {
            if (!is_array($this->extras)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('extras', TType::MAP, 3);
            $output->writeMapBegin(TType::STRING, TType::STRING, count($this->extras));
            foreach ($this->extras as $kiter341 => $viter342) {
                $xfer += $output->writeString($kiter341);
                $xfer += $output->writeString($viter342);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
