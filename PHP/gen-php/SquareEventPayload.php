<?php
/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class SquareEventPayload
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'receiveMessage',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\SquareEventReceiveMessage',
        ),
        2 => array(
            'var' => 'sendMessage',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\SquareEventSendMessage',
        ),
        3 => array(
            'var' => 'notifiedJoinSquareChat',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\SquareEventNotifiedJoinSquareChat',
        ),
        4 => array(
            'var' => 'notifiedInviteIntoSquareChat',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\SquareEventNotifiedInviteIntoSquareChat',
        ),
        5 => array(
            'var' => 'notifiedLeaveSquareChat',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\SquareEventNotifiedLeaveSquareChat',
        ),
        6 => array(
            'var' => 'notifiedDestroyMessage',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\SquareEventNotifiedDestroyMessage',
        ),
        7 => array(
            'var' => 'notifiedMarkAsRead',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\SquareEventNotifiedMarkAsRead',
        ),
        8 => array(
            'var' => 'notifiedUpdateSquareMemberProfile',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\SquareEventNotifiedUpdateSquareMemberProfile',
        ),
        20 => array(
            'var' => 'notifiedKickoutFromSquare',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\SquareEventNotifiedKickoutFromSquare',
        ),
        19 => array(
            'var' => 'notifiedShutdownSquare',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\SquareEventNotifiedShutdownSquare',
        ),
        21 => array(
            'var' => 'notifiedDeleteSquareChat',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\SquareEventNotifiedDeleteSquareChat',
        ),
        31 => array(
            'var' => 'notifiedUpdateSquareChatProfileName',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\SquareEventNotifiedUpdateSquareChatProfileName',
        ),
        32 => array(
            'var' => 'notifiedUpdateSquareChatProfileImage',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\SquareEventNotifiedUpdateSquareChatProfileImage',
        ),
        14 => array(
            'var' => 'notifiedUpdateSquareStatus',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\SquareEventNotifiedUpdateSquareStatus',
        ),
        15 => array(
            'var' => 'notifiedUpdateSquareChatStatus',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\SquareEventNotifiedUpdateSquareChatStatus',
        ),
        16 => array(
            'var' => 'notifiedCreateSquareMember',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\SquareEventNotifiedCreateSquareMember',
        ),
        17 => array(
            'var' => 'notifiedCreateSquareChatMember',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\SquareEventNotifiedCreateSquareChatMember',
        ),
        18 => array(
            'var' => 'notifiedUpdateSquareMemberRelation',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\SquareEventNotifiedUpdateSquareMemberRelation',
        ),
        9 => array(
            'var' => 'notifiedUpdateSquare',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\SquareEventNotifiedUpdateSquare',
        ),
        10 => array(
            'var' => 'notifiedUpdateSquareMember',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\SquareEventNotifiedUpdateSquareMember',
        ),
        11 => array(
            'var' => 'notifiedUpdateSquareChat',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\SquareEventNotifiedUpdateSquareChat',
        ),
        22 => array(
            'var' => 'notificationJoinRequest',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\SquareEventNotificationJoinRequest',
        ),
        23 => array(
            'var' => 'notificationJoined',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\SquareEventNotificationMemberUpdate',
        ),
        24 => array(
            'var' => 'notificationPromoteCoadmin',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\SquareEventNotificationMemberUpdate',
        ),
        25 => array(
            'var' => 'notificationPromoteAdmin',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\SquareEventNotificationMemberUpdate',
        ),
        26 => array(
            'var' => 'notificationDemoteMember',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\SquareEventNotificationMemberUpdate',
        ),
        27 => array(
            'var' => 'notificationKickedOut',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\SquareEventNotificationMemberUpdate',
        ),
        28 => array(
            'var' => 'notificationSquareDelete',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\SquareEventNotificationSquareDelete',
        ),
        29 => array(
            'var' => 'notificationSquareChatDelete',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\SquareEventNotificationSquareChatDelete',
        ),
        30 => array(
            'var' => 'notificationMessage',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\SquareEventNotificationMessage',
        ),
        12 => array(
            'var' => 'notifiedUpdateSquareChatMember',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\SquareEventNotifiedUpdateSquareChatMember',
        ),
        13 => array(
            'var' => 'notifiedUpdateSquareAuthority',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\SquareEventNotifiedUpdateSquareAuthority',
        ),
        33 => array(
            'var' => 'notifiedUpdateSquareFeatureSet',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\SquareEventNotifiedUpdateSquareFeatureSet',
        ),
    );

    /**
     * @var \SquareEventReceiveMessage
     */
    public $receiveMessage = null;
    /**
     * @var \SquareEventSendMessage
     */
    public $sendMessage = null;
    /**
     * @var \SquareEventNotifiedJoinSquareChat
     */
    public $notifiedJoinSquareChat = null;
    /**
     * @var \SquareEventNotifiedInviteIntoSquareChat
     */
    public $notifiedInviteIntoSquareChat = null;
    /**
     * @var \SquareEventNotifiedLeaveSquareChat
     */
    public $notifiedLeaveSquareChat = null;
    /**
     * @var \SquareEventNotifiedDestroyMessage
     */
    public $notifiedDestroyMessage = null;
    /**
     * @var \SquareEventNotifiedMarkAsRead
     */
    public $notifiedMarkAsRead = null;
    /**
     * @var \SquareEventNotifiedUpdateSquareMemberProfile
     */
    public $notifiedUpdateSquareMemberProfile = null;
    /**
     * @var \SquareEventNotifiedKickoutFromSquare
     */
    public $notifiedKickoutFromSquare = null;
    /**
     * @var \SquareEventNotifiedShutdownSquare
     */
    public $notifiedShutdownSquare = null;
    /**
     * @var \SquareEventNotifiedDeleteSquareChat
     */
    public $notifiedDeleteSquareChat = null;
    /**
     * @var \SquareEventNotifiedUpdateSquareChatProfileName
     */
    public $notifiedUpdateSquareChatProfileName = null;
    /**
     * @var \SquareEventNotifiedUpdateSquareChatProfileImage
     */
    public $notifiedUpdateSquareChatProfileImage = null;
    /**
     * @var \SquareEventNotifiedUpdateSquareStatus
     */
    public $notifiedUpdateSquareStatus = null;
    /**
     * @var \SquareEventNotifiedUpdateSquareChatStatus
     */
    public $notifiedUpdateSquareChatStatus = null;
    /**
     * @var \SquareEventNotifiedCreateSquareMember
     */
    public $notifiedCreateSquareMember = null;
    /**
     * @var \SquareEventNotifiedCreateSquareChatMember
     */
    public $notifiedCreateSquareChatMember = null;
    /**
     * @var \SquareEventNotifiedUpdateSquareMemberRelation
     */
    public $notifiedUpdateSquareMemberRelation = null;
    /**
     * @var \SquareEventNotifiedUpdateSquare
     */
    public $notifiedUpdateSquare = null;
    /**
     * @var \SquareEventNotifiedUpdateSquareMember
     */
    public $notifiedUpdateSquareMember = null;
    /**
     * @var \SquareEventNotifiedUpdateSquareChat
     */
    public $notifiedUpdateSquareChat = null;
    /**
     * @var \SquareEventNotificationJoinRequest
     */
    public $notificationJoinRequest = null;
    /**
     * @var \SquareEventNotificationMemberUpdate
     */
    public $notificationJoined = null;
    /**
     * @var \SquareEventNotificationMemberUpdate
     */
    public $notificationPromoteCoadmin = null;
    /**
     * @var \SquareEventNotificationMemberUpdate
     */
    public $notificationPromoteAdmin = null;
    /**
     * @var \SquareEventNotificationMemberUpdate
     */
    public $notificationDemoteMember = null;
    /**
     * @var \SquareEventNotificationMemberUpdate
     */
    public $notificationKickedOut = null;
    /**
     * @var \SquareEventNotificationSquareDelete
     */
    public $notificationSquareDelete = null;
    /**
     * @var \SquareEventNotificationSquareChatDelete
     */
    public $notificationSquareChatDelete = null;
    /**
     * @var \SquareEventNotificationMessage
     */
    public $notificationMessage = null;
    /**
     * @var \SquareEventNotifiedUpdateSquareChatMember
     */
    public $notifiedUpdateSquareChatMember = null;
    /**
     * @var \SquareEventNotifiedUpdateSquareAuthority
     */
    public $notifiedUpdateSquareAuthority = null;
    /**
     * @var \SquareEventNotifiedUpdateSquareFeatureSet
     */
    public $notifiedUpdateSquareFeatureSet = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['receiveMessage'])) {
                $this->receiveMessage = $vals['receiveMessage'];
            }
            if (isset($vals['sendMessage'])) {
                $this->sendMessage = $vals['sendMessage'];
            }
            if (isset($vals['notifiedJoinSquareChat'])) {
                $this->notifiedJoinSquareChat = $vals['notifiedJoinSquareChat'];
            }
            if (isset($vals['notifiedInviteIntoSquareChat'])) {
                $this->notifiedInviteIntoSquareChat = $vals['notifiedInviteIntoSquareChat'];
            }
            if (isset($vals['notifiedLeaveSquareChat'])) {
                $this->notifiedLeaveSquareChat = $vals['notifiedLeaveSquareChat'];
            }
            if (isset($vals['notifiedDestroyMessage'])) {
                $this->notifiedDestroyMessage = $vals['notifiedDestroyMessage'];
            }
            if (isset($vals['notifiedMarkAsRead'])) {
                $this->notifiedMarkAsRead = $vals['notifiedMarkAsRead'];
            }
            if (isset($vals['notifiedUpdateSquareMemberProfile'])) {
                $this->notifiedUpdateSquareMemberProfile = $vals['notifiedUpdateSquareMemberProfile'];
            }
            if (isset($vals['notifiedKickoutFromSquare'])) {
                $this->notifiedKickoutFromSquare = $vals['notifiedKickoutFromSquare'];
            }
            if (isset($vals['notifiedShutdownSquare'])) {
                $this->notifiedShutdownSquare = $vals['notifiedShutdownSquare'];
            }
            if (isset($vals['notifiedDeleteSquareChat'])) {
                $this->notifiedDeleteSquareChat = $vals['notifiedDeleteSquareChat'];
            }
            if (isset($vals['notifiedUpdateSquareChatProfileName'])) {
                $this->notifiedUpdateSquareChatProfileName = $vals['notifiedUpdateSquareChatProfileName'];
            }
            if (isset($vals['notifiedUpdateSquareChatProfileImage'])) {
                $this->notifiedUpdateSquareChatProfileImage = $vals['notifiedUpdateSquareChatProfileImage'];
            }
            if (isset($vals['notifiedUpdateSquareStatus'])) {
                $this->notifiedUpdateSquareStatus = $vals['notifiedUpdateSquareStatus'];
            }
            if (isset($vals['notifiedUpdateSquareChatStatus'])) {
                $this->notifiedUpdateSquareChatStatus = $vals['notifiedUpdateSquareChatStatus'];
            }
            if (isset($vals['notifiedCreateSquareMember'])) {
                $this->notifiedCreateSquareMember = $vals['notifiedCreateSquareMember'];
            }
            if (isset($vals['notifiedCreateSquareChatMember'])) {
                $this->notifiedCreateSquareChatMember = $vals['notifiedCreateSquareChatMember'];
            }
            if (isset($vals['notifiedUpdateSquareMemberRelation'])) {
                $this->notifiedUpdateSquareMemberRelation = $vals['notifiedUpdateSquareMemberRelation'];
            }
            if (isset($vals['notifiedUpdateSquare'])) {
                $this->notifiedUpdateSquare = $vals['notifiedUpdateSquare'];
            }
            if (isset($vals['notifiedUpdateSquareMember'])) {
                $this->notifiedUpdateSquareMember = $vals['notifiedUpdateSquareMember'];
            }
            if (isset($vals['notifiedUpdateSquareChat'])) {
                $this->notifiedUpdateSquareChat = $vals['notifiedUpdateSquareChat'];
            }
            if (isset($vals['notificationJoinRequest'])) {
                $this->notificationJoinRequest = $vals['notificationJoinRequest'];
            }
            if (isset($vals['notificationJoined'])) {
                $this->notificationJoined = $vals['notificationJoined'];
            }
            if (isset($vals['notificationPromoteCoadmin'])) {
                $this->notificationPromoteCoadmin = $vals['notificationPromoteCoadmin'];
            }
            if (isset($vals['notificationPromoteAdmin'])) {
                $this->notificationPromoteAdmin = $vals['notificationPromoteAdmin'];
            }
            if (isset($vals['notificationDemoteMember'])) {
                $this->notificationDemoteMember = $vals['notificationDemoteMember'];
            }
            if (isset($vals['notificationKickedOut'])) {
                $this->notificationKickedOut = $vals['notificationKickedOut'];
            }
            if (isset($vals['notificationSquareDelete'])) {
                $this->notificationSquareDelete = $vals['notificationSquareDelete'];
            }
            if (isset($vals['notificationSquareChatDelete'])) {
                $this->notificationSquareChatDelete = $vals['notificationSquareChatDelete'];
            }
            if (isset($vals['notificationMessage'])) {
                $this->notificationMessage = $vals['notificationMessage'];
            }
            if (isset($vals['notifiedUpdateSquareChatMember'])) {
                $this->notifiedUpdateSquareChatMember = $vals['notifiedUpdateSquareChatMember'];
            }
            if (isset($vals['notifiedUpdateSquareAuthority'])) {
                $this->notifiedUpdateSquareAuthority = $vals['notifiedUpdateSquareAuthority'];
            }
            if (isset($vals['notifiedUpdateSquareFeatureSet'])) {
                $this->notifiedUpdateSquareFeatureSet = $vals['notifiedUpdateSquareFeatureSet'];
            }
        }
    }

    public function getName()
    {
        return 'SquareEventPayload';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->receiveMessage = new \SquareEventReceiveMessage();
                        $xfer += $this->receiveMessage->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRUCT) {
                        $this->sendMessage = new \SquareEventSendMessage();
                        $xfer += $this->sendMessage->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRUCT) {
                        $this->notifiedJoinSquareChat = new \SquareEventNotifiedJoinSquareChat();
                        $xfer += $this->notifiedJoinSquareChat->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRUCT) {
                        $this->notifiedInviteIntoSquareChat = new \SquareEventNotifiedInviteIntoSquareChat();
                        $xfer += $this->notifiedInviteIntoSquareChat->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRUCT) {
                        $this->notifiedLeaveSquareChat = new \SquareEventNotifiedLeaveSquareChat();
                        $xfer += $this->notifiedLeaveSquareChat->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRUCT) {
                        $this->notifiedDestroyMessage = new \SquareEventNotifiedDestroyMessage();
                        $xfer += $this->notifiedDestroyMessage->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::STRUCT) {
                        $this->notifiedMarkAsRead = new \SquareEventNotifiedMarkAsRead();
                        $xfer += $this->notifiedMarkAsRead->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::STRUCT) {
                        $this->notifiedUpdateSquareMemberProfile = new \SquareEventNotifiedUpdateSquareMemberProfile();
                        $xfer += $this->notifiedUpdateSquareMemberProfile->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 20:
                    if ($ftype == TType::STRUCT) {
                        $this->notifiedKickoutFromSquare = new \SquareEventNotifiedKickoutFromSquare();
                        $xfer += $this->notifiedKickoutFromSquare->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 19:
                    if ($ftype == TType::STRUCT) {
                        $this->notifiedShutdownSquare = new \SquareEventNotifiedShutdownSquare();
                        $xfer += $this->notifiedShutdownSquare->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 21:
                    if ($ftype == TType::STRUCT) {
                        $this->notifiedDeleteSquareChat = new \SquareEventNotifiedDeleteSquareChat();
                        $xfer += $this->notifiedDeleteSquareChat->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 31:
                    if ($ftype == TType::STRUCT) {
                        $this->notifiedUpdateSquareChatProfileName = new \SquareEventNotifiedUpdateSquareChatProfileName();
                        $xfer += $this->notifiedUpdateSquareChatProfileName->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 32:
                    if ($ftype == TType::STRUCT) {
                        $this->notifiedUpdateSquareChatProfileImage = new \SquareEventNotifiedUpdateSquareChatProfileImage();
                        $xfer += $this->notifiedUpdateSquareChatProfileImage->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 14:
                    if ($ftype == TType::STRUCT) {
                        $this->notifiedUpdateSquareStatus = new \SquareEventNotifiedUpdateSquareStatus();
                        $xfer += $this->notifiedUpdateSquareStatus->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 15:
                    if ($ftype == TType::STRUCT) {
                        $this->notifiedUpdateSquareChatStatus = new \SquareEventNotifiedUpdateSquareChatStatus();
                        $xfer += $this->notifiedUpdateSquareChatStatus->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 16:
                    if ($ftype == TType::STRUCT) {
                        $this->notifiedCreateSquareMember = new \SquareEventNotifiedCreateSquareMember();
                        $xfer += $this->notifiedCreateSquareMember->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 17:
                    if ($ftype == TType::STRUCT) {
                        $this->notifiedCreateSquareChatMember = new \SquareEventNotifiedCreateSquareChatMember();
                        $xfer += $this->notifiedCreateSquareChatMember->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 18:
                    if ($ftype == TType::STRUCT) {
                        $this->notifiedUpdateSquareMemberRelation = new \SquareEventNotifiedUpdateSquareMemberRelation();
                        $xfer += $this->notifiedUpdateSquareMemberRelation->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::STRUCT) {
                        $this->notifiedUpdateSquare = new \SquareEventNotifiedUpdateSquare();
                        $xfer += $this->notifiedUpdateSquare->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::STRUCT) {
                        $this->notifiedUpdateSquareMember = new \SquareEventNotifiedUpdateSquareMember();
                        $xfer += $this->notifiedUpdateSquareMember->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::STRUCT) {
                        $this->notifiedUpdateSquareChat = new \SquareEventNotifiedUpdateSquareChat();
                        $xfer += $this->notifiedUpdateSquareChat->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 22:
                    if ($ftype == TType::STRUCT) {
                        $this->notificationJoinRequest = new \SquareEventNotificationJoinRequest();
                        $xfer += $this->notificationJoinRequest->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 23:
                    if ($ftype == TType::STRUCT) {
                        $this->notificationJoined = new \SquareEventNotificationMemberUpdate();
                        $xfer += $this->notificationJoined->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 24:
                    if ($ftype == TType::STRUCT) {
                        $this->notificationPromoteCoadmin = new \SquareEventNotificationMemberUpdate();
                        $xfer += $this->notificationPromoteCoadmin->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 25:
                    if ($ftype == TType::STRUCT) {
                        $this->notificationPromoteAdmin = new \SquareEventNotificationMemberUpdate();
                        $xfer += $this->notificationPromoteAdmin->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 26:
                    if ($ftype == TType::STRUCT) {
                        $this->notificationDemoteMember = new \SquareEventNotificationMemberUpdate();
                        $xfer += $this->notificationDemoteMember->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 27:
                    if ($ftype == TType::STRUCT) {
                        $this->notificationKickedOut = new \SquareEventNotificationMemberUpdate();
                        $xfer += $this->notificationKickedOut->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 28:
                    if ($ftype == TType::STRUCT) {
                        $this->notificationSquareDelete = new \SquareEventNotificationSquareDelete();
                        $xfer += $this->notificationSquareDelete->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 29:
                    if ($ftype == TType::STRUCT) {
                        $this->notificationSquareChatDelete = new \SquareEventNotificationSquareChatDelete();
                        $xfer += $this->notificationSquareChatDelete->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 30:
                    if ($ftype == TType::STRUCT) {
                        $this->notificationMessage = new \SquareEventNotificationMessage();
                        $xfer += $this->notificationMessage->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 12:
                    if ($ftype == TType::STRUCT) {
                        $this->notifiedUpdateSquareChatMember = new \SquareEventNotifiedUpdateSquareChatMember();
                        $xfer += $this->notifiedUpdateSquareChatMember->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 13:
                    if ($ftype == TType::STRUCT) {
                        $this->notifiedUpdateSquareAuthority = new \SquareEventNotifiedUpdateSquareAuthority();
                        $xfer += $this->notifiedUpdateSquareAuthority->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 33:
                    if ($ftype == TType::STRUCT) {
                        $this->notifiedUpdateSquareFeatureSet = new \SquareEventNotifiedUpdateSquareFeatureSet();
                        $xfer += $this->notifiedUpdateSquareFeatureSet->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('SquareEventPayload');
        if ($this->receiveMessage !== null) {
            if (!is_object($this->receiveMessage)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('receiveMessage', TType::STRUCT, 1);
            $xfer += $this->receiveMessage->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->sendMessage !== null) {
            if (!is_object($this->sendMessage)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('sendMessage', TType::STRUCT, 2);
            $xfer += $this->sendMessage->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->notifiedJoinSquareChat !== null) {
            if (!is_object($this->notifiedJoinSquareChat)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('notifiedJoinSquareChat', TType::STRUCT, 3);
            $xfer += $this->notifiedJoinSquareChat->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->notifiedInviteIntoSquareChat !== null) {
            if (!is_object($this->notifiedInviteIntoSquareChat)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('notifiedInviteIntoSquareChat', TType::STRUCT, 4);
            $xfer += $this->notifiedInviteIntoSquareChat->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->notifiedLeaveSquareChat !== null) {
            if (!is_object($this->notifiedLeaveSquareChat)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('notifiedLeaveSquareChat', TType::STRUCT, 5);
            $xfer += $this->notifiedLeaveSquareChat->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->notifiedDestroyMessage !== null) {
            if (!is_object($this->notifiedDestroyMessage)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('notifiedDestroyMessage', TType::STRUCT, 6);
            $xfer += $this->notifiedDestroyMessage->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->notifiedMarkAsRead !== null) {
            if (!is_object($this->notifiedMarkAsRead)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('notifiedMarkAsRead', TType::STRUCT, 7);
            $xfer += $this->notifiedMarkAsRead->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->notifiedUpdateSquareMemberProfile !== null) {
            if (!is_object($this->notifiedUpdateSquareMemberProfile)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('notifiedUpdateSquareMemberProfile', TType::STRUCT, 8);
            $xfer += $this->notifiedUpdateSquareMemberProfile->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->notifiedUpdateSquare !== null) {
            if (!is_object($this->notifiedUpdateSquare)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('notifiedUpdateSquare', TType::STRUCT, 9);
            $xfer += $this->notifiedUpdateSquare->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->notifiedUpdateSquareMember !== null) {
            if (!is_object($this->notifiedUpdateSquareMember)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('notifiedUpdateSquareMember', TType::STRUCT, 10);
            $xfer += $this->notifiedUpdateSquareMember->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->notifiedUpdateSquareChat !== null) {
            if (!is_object($this->notifiedUpdateSquareChat)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('notifiedUpdateSquareChat', TType::STRUCT, 11);
            $xfer += $this->notifiedUpdateSquareChat->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->notifiedUpdateSquareChatMember !== null) {
            if (!is_object($this->notifiedUpdateSquareChatMember)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('notifiedUpdateSquareChatMember', TType::STRUCT, 12);
            $xfer += $this->notifiedUpdateSquareChatMember->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->notifiedUpdateSquareAuthority !== null) {
            if (!is_object($this->notifiedUpdateSquareAuthority)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('notifiedUpdateSquareAuthority', TType::STRUCT, 13);
            $xfer += $this->notifiedUpdateSquareAuthority->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->notifiedUpdateSquareStatus !== null) {
            if (!is_object($this->notifiedUpdateSquareStatus)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('notifiedUpdateSquareStatus', TType::STRUCT, 14);
            $xfer += $this->notifiedUpdateSquareStatus->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->notifiedUpdateSquareChatStatus !== null) {
            if (!is_object($this->notifiedUpdateSquareChatStatus)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('notifiedUpdateSquareChatStatus', TType::STRUCT, 15);
            $xfer += $this->notifiedUpdateSquareChatStatus->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->notifiedCreateSquareMember !== null) {
            if (!is_object($this->notifiedCreateSquareMember)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('notifiedCreateSquareMember', TType::STRUCT, 16);
            $xfer += $this->notifiedCreateSquareMember->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->notifiedCreateSquareChatMember !== null) {
            if (!is_object($this->notifiedCreateSquareChatMember)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('notifiedCreateSquareChatMember', TType::STRUCT, 17);
            $xfer += $this->notifiedCreateSquareChatMember->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->notifiedUpdateSquareMemberRelation !== null) {
            if (!is_object($this->notifiedUpdateSquareMemberRelation)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('notifiedUpdateSquareMemberRelation', TType::STRUCT, 18);
            $xfer += $this->notifiedUpdateSquareMemberRelation->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->notifiedShutdownSquare !== null) {
            if (!is_object($this->notifiedShutdownSquare)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('notifiedShutdownSquare', TType::STRUCT, 19);
            $xfer += $this->notifiedShutdownSquare->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->notifiedKickoutFromSquare !== null) {
            if (!is_object($this->notifiedKickoutFromSquare)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('notifiedKickoutFromSquare', TType::STRUCT, 20);
            $xfer += $this->notifiedKickoutFromSquare->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->notifiedDeleteSquareChat !== null) {
            if (!is_object($this->notifiedDeleteSquareChat)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('notifiedDeleteSquareChat', TType::STRUCT, 21);
            $xfer += $this->notifiedDeleteSquareChat->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->notificationJoinRequest !== null) {
            if (!is_object($this->notificationJoinRequest)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('notificationJoinRequest', TType::STRUCT, 22);
            $xfer += $this->notificationJoinRequest->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->notificationJoined !== null) {
            if (!is_object($this->notificationJoined)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('notificationJoined', TType::STRUCT, 23);
            $xfer += $this->notificationJoined->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->notificationPromoteCoadmin !== null) {
            if (!is_object($this->notificationPromoteCoadmin)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('notificationPromoteCoadmin', TType::STRUCT, 24);
            $xfer += $this->notificationPromoteCoadmin->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->notificationPromoteAdmin !== null) {
            if (!is_object($this->notificationPromoteAdmin)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('notificationPromoteAdmin', TType::STRUCT, 25);
            $xfer += $this->notificationPromoteAdmin->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->notificationDemoteMember !== null) {
            if (!is_object($this->notificationDemoteMember)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('notificationDemoteMember', TType::STRUCT, 26);
            $xfer += $this->notificationDemoteMember->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->notificationKickedOut !== null) {
            if (!is_object($this->notificationKickedOut)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('notificationKickedOut', TType::STRUCT, 27);
            $xfer += $this->notificationKickedOut->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->notificationSquareDelete !== null) {
            if (!is_object($this->notificationSquareDelete)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('notificationSquareDelete', TType::STRUCT, 28);
            $xfer += $this->notificationSquareDelete->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->notificationSquareChatDelete !== null) {
            if (!is_object($this->notificationSquareChatDelete)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('notificationSquareChatDelete', TType::STRUCT, 29);
            $xfer += $this->notificationSquareChatDelete->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->notificationMessage !== null) {
            if (!is_object($this->notificationMessage)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('notificationMessage', TType::STRUCT, 30);
            $xfer += $this->notificationMessage->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->notifiedUpdateSquareChatProfileName !== null) {
            if (!is_object($this->notifiedUpdateSquareChatProfileName)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('notifiedUpdateSquareChatProfileName', TType::STRUCT, 31);
            $xfer += $this->notifiedUpdateSquareChatProfileName->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->notifiedUpdateSquareChatProfileImage !== null) {
            if (!is_object($this->notifiedUpdateSquareChatProfileImage)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('notifiedUpdateSquareChatProfileImage', TType::STRUCT, 32);
            $xfer += $this->notifiedUpdateSquareChatProfileImage->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->notifiedUpdateSquareFeatureSet !== null) {
            if (!is_object($this->notifiedUpdateSquareFeatureSet)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('notifiedUpdateSquareFeatureSet', TType::STRUCT, 33);
            $xfer += $this->notifiedUpdateSquareFeatureSet->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
