<?php
/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class ProductSimple
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'productId',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'packageId',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        3 => array(
            'var' => 'version',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        4 => array(
            'var' => 'onSale',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        5 => array(
            'var' => 'validUntil',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        10 => array(
            'var' => 'stickerIdRanges',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\StickerIdRange',
                ),
        ),
        41 => array(
            'var' => 'grantedByDefault',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        42 => array(
            'var' => 'displayOrder',
            'isRequired' => false,
            'type' => TType::I32,
        ),
    );

    /**
     * @var string
     */
    public $productId = null;
    /**
     * @var int
     */
    public $packageId = null;
    /**
     * @var int
     */
    public $version = null;
    /**
     * @var bool
     */
    public $onSale = null;
    /**
     * @var int
     */
    public $validUntil = null;
    /**
     * @var \StickerIdRange[]
     */
    public $stickerIdRanges = null;
    /**
     * @var bool
     */
    public $grantedByDefault = null;
    /**
     * @var int
     */
    public $displayOrder = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['productId'])) {
                $this->productId = $vals['productId'];
            }
            if (isset($vals['packageId'])) {
                $this->packageId = $vals['packageId'];
            }
            if (isset($vals['version'])) {
                $this->version = $vals['version'];
            }
            if (isset($vals['onSale'])) {
                $this->onSale = $vals['onSale'];
            }
            if (isset($vals['validUntil'])) {
                $this->validUntil = $vals['validUntil'];
            }
            if (isset($vals['stickerIdRanges'])) {
                $this->stickerIdRanges = $vals['stickerIdRanges'];
            }
            if (isset($vals['grantedByDefault'])) {
                $this->grantedByDefault = $vals['grantedByDefault'];
            }
            if (isset($vals['displayOrder'])) {
                $this->displayOrder = $vals['displayOrder'];
            }
        }
    }

    public function getName()
    {
        return 'ProductSimple';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->productId);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->packageId);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->version);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->onSale);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->validUntil);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::LST) {
                        $this->stickerIdRanges = array();
                        $_size357 = 0;
                        $_etype360 = 0;
                        $xfer += $input->readListBegin($_etype360, $_size357);
                        for ($_i361 = 0; $_i361 < $_size357; ++$_i361) {
                            $elem362 = null;
                            $elem362 = new \StickerIdRange();
                            $xfer += $elem362->read($input);
                            $this->stickerIdRanges []= $elem362;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 41:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->grantedByDefault);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 42:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->displayOrder);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('ProductSimple');
        if ($this->productId !== null) {
            $xfer += $output->writeFieldBegin('productId', TType::STRING, 1);
            $xfer += $output->writeString($this->productId);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->packageId !== null) {
            $xfer += $output->writeFieldBegin('packageId', TType::I64, 2);
            $xfer += $output->writeI64($this->packageId);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->version !== null) {
            $xfer += $output->writeFieldBegin('version', TType::I32, 3);
            $xfer += $output->writeI32($this->version);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->onSale !== null) {
            $xfer += $output->writeFieldBegin('onSale', TType::BOOL, 4);
            $xfer += $output->writeBool($this->onSale);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->validUntil !== null) {
            $xfer += $output->writeFieldBegin('validUntil', TType::I64, 5);
            $xfer += $output->writeI64($this->validUntil);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->stickerIdRanges !== null) {
            if (!is_array($this->stickerIdRanges)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('stickerIdRanges', TType::LST, 10);
            $output->writeListBegin(TType::STRUCT, count($this->stickerIdRanges));
            foreach ($this->stickerIdRanges as $iter363) {
                $xfer += $iter363->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->grantedByDefault !== null) {
            $xfer += $output->writeFieldBegin('grantedByDefault', TType::BOOL, 41);
            $xfer += $output->writeBool($this->grantedByDefault);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->displayOrder !== null) {
            $xfer += $output->writeFieldBegin('displayOrder', TType::I32, 42);
            $xfer += $output->writeI32($this->displayOrder);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
