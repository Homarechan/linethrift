<?php
/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class CallService_acquirePaidCallRoute_args
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        2 => array(
            'var' => 'paidCallType',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        3 => array(
            'var' => 'dialedNumber',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'language',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        5 => array(
            'var' => 'networkCode',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        6 => array(
            'var' => 'disableCallerId',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        7 => array(
            'var' => 'referer',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        8 => array(
            'var' => 'adSessionId',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
    );

    /**
     * @var int
     */
    public $paidCallType = null;
    /**
     * @var string
     */
    public $dialedNumber = null;
    /**
     * @var string
     */
    public $language = null;
    /**
     * @var string
     */
    public $networkCode = null;
    /**
     * @var bool
     */
    public $disableCallerId = null;
    /**
     * @var string
     */
    public $referer = null;
    /**
     * @var string
     */
    public $adSessionId = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['paidCallType'])) {
                $this->paidCallType = $vals['paidCallType'];
            }
            if (isset($vals['dialedNumber'])) {
                $this->dialedNumber = $vals['dialedNumber'];
            }
            if (isset($vals['language'])) {
                $this->language = $vals['language'];
            }
            if (isset($vals['networkCode'])) {
                $this->networkCode = $vals['networkCode'];
            }
            if (isset($vals['disableCallerId'])) {
                $this->disableCallerId = $vals['disableCallerId'];
            }
            if (isset($vals['referer'])) {
                $this->referer = $vals['referer'];
            }
            if (isset($vals['adSessionId'])) {
                $this->adSessionId = $vals['adSessionId'];
            }
        }
    }

    public function getName()
    {
        return 'CallService_acquirePaidCallRoute_args';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 2:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->paidCallType);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->dialedNumber);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->language);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->networkCode);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->disableCallerId);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->referer);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->adSessionId);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('CallService_acquirePaidCallRoute_args');
        if ($this->paidCallType !== null) {
            $xfer += $output->writeFieldBegin('paidCallType', TType::I32, 2);
            $xfer += $output->writeI32($this->paidCallType);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->dialedNumber !== null) {
            $xfer += $output->writeFieldBegin('dialedNumber', TType::STRING, 3);
            $xfer += $output->writeString($this->dialedNumber);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->language !== null) {
            $xfer += $output->writeFieldBegin('language', TType::STRING, 4);
            $xfer += $output->writeString($this->language);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->networkCode !== null) {
            $xfer += $output->writeFieldBegin('networkCode', TType::STRING, 5);
            $xfer += $output->writeString($this->networkCode);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->disableCallerId !== null) {
            $xfer += $output->writeFieldBegin('disableCallerId', TType::BOOL, 6);
            $xfer += $output->writeBool($this->disableCallerId);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->referer !== null) {
            $xfer += $output->writeFieldBegin('referer', TType::STRING, 7);
            $xfer += $output->writeString($this->referer);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->adSessionId !== null) {
            $xfer += $output->writeFieldBegin('adSessionId', TType::STRING, 8);
            $xfer += $output->writeString($this->adSessionId);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
