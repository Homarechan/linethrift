<?php
/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class CoinUseReservation
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'channelId',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'shopOrderId',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'appStoreCode',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        4 => array(
            'var' => 'items',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\CoinUseReservationItem',
                ),
        ),
        5 => array(
            'var' => 'country',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
    );

    /**
     * @var string
     */
    public $channelId = null;
    /**
     * @var string
     */
    public $shopOrderId = null;
    /**
     * @var int
     */
    public $appStoreCode = null;
    /**
     * @var \CoinUseReservationItem[]
     */
    public $items = null;
    /**
     * @var string
     */
    public $country = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['channelId'])) {
                $this->channelId = $vals['channelId'];
            }
            if (isset($vals['shopOrderId'])) {
                $this->shopOrderId = $vals['shopOrderId'];
            }
            if (isset($vals['appStoreCode'])) {
                $this->appStoreCode = $vals['appStoreCode'];
            }
            if (isset($vals['items'])) {
                $this->items = $vals['items'];
            }
            if (isset($vals['country'])) {
                $this->country = $vals['country'];
            }
        }
    }

    public function getName()
    {
        return 'CoinUseReservation';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->channelId);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->shopOrderId);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->appStoreCode);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::LST) {
                        $this->items = array();
                        $_size195 = 0;
                        $_etype198 = 0;
                        $xfer += $input->readListBegin($_etype198, $_size195);
                        for ($_i199 = 0; $_i199 < $_size195; ++$_i199) {
                            $elem200 = null;
                            $elem200 = new \CoinUseReservationItem();
                            $xfer += $elem200->read($input);
                            $this->items []= $elem200;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->country);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('CoinUseReservation');
        if ($this->channelId !== null) {
            $xfer += $output->writeFieldBegin('channelId', TType::STRING, 1);
            $xfer += $output->writeString($this->channelId);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->shopOrderId !== null) {
            $xfer += $output->writeFieldBegin('shopOrderId', TType::STRING, 2);
            $xfer += $output->writeString($this->shopOrderId);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->appStoreCode !== null) {
            $xfer += $output->writeFieldBegin('appStoreCode', TType::I32, 3);
            $xfer += $output->writeI32($this->appStoreCode);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->items !== null) {
            if (!is_array($this->items)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('items', TType::LST, 4);
            $output->writeListBegin(TType::STRUCT, count($this->items));
            foreach ($this->items as $iter201) {
                $xfer += $iter201->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->country !== null) {
            $xfer += $output->writeFieldBegin('country', TType::STRING, 5);
            $xfer += $output->writeString($this->country);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
