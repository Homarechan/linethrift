<?php
/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class UpdateSquareFeatureSetRequest
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        2 => array(
            'var' => 'updateAttributes',
            'isRequired' => false,
            'type' => TType::SET,
            'etype' => TType::I32,
            'elem' => array(
                'type' => TType::I32,
                ),
        ),
        3 => array(
            'var' => 'squareFeatureSet',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\SquareFeatureSet',
        ),
    );

    /**
     * @var int[]
     */
    public $updateAttributes = null;
    /**
     * @var \SquareFeatureSet
     */
    public $squareFeatureSet = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['updateAttributes'])) {
                $this->updateAttributes = $vals['updateAttributes'];
            }
            if (isset($vals['squareFeatureSet'])) {
                $this->squareFeatureSet = $vals['squareFeatureSet'];
            }
        }
    }

    public function getName()
    {
        return 'UpdateSquareFeatureSetRequest';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 2:
                    if ($ftype == TType::SET) {
                        $this->updateAttributes = array();
                        $_size728 = 0;
                        $_etype731 = 0;
                        $xfer += $input->readSetBegin($_etype731, $_size728);
                        for ($_i732 = 0; $_i732 < $_size728; ++$_i732) {
                            $elem733 = null;
                            $xfer += $input->readI32($elem733);
                            $this->updateAttributes[$elem733] = true;
                        }
                        $xfer += $input->readSetEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRUCT) {
                        $this->squareFeatureSet = new \SquareFeatureSet();
                        $xfer += $this->squareFeatureSet->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('UpdateSquareFeatureSetRequest');
        if ($this->updateAttributes !== null) {
            if (!is_array($this->updateAttributes)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('updateAttributes', TType::SET, 2);
            $output->writeSetBegin(TType::I32, count($this->updateAttributes));
            foreach ($this->updateAttributes as $iter734 => $iter735) {
                $xfer += $output->writeI32($iter734);
            }
            $output->writeSetEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->squareFeatureSet !== null) {
            if (!is_object($this->squareFeatureSet)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('squareFeatureSet', TType::STRUCT, 3);
            $xfer += $this->squareFeatureSet->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
