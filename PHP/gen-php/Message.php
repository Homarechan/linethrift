<?php
/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class Message
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => '_from',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'to',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'toType',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        4 => array(
            'var' => 'id',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        5 => array(
            'var' => 'createdTime',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        6 => array(
            'var' => 'deliveredTime',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        10 => array(
            'var' => 'text',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        11 => array(
            'var' => 'location',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Location',
        ),
        14 => array(
            'var' => 'hasContent',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        15 => array(
            'var' => 'contentType',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        17 => array(
            'var' => 'contentPreview',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        18 => array(
            'var' => 'contentMetadata',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRING,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::STRING,
                ),
        ),
        19 => array(
            'var' => 'sessionId',
            'isRequired' => false,
            'type' => TType::BYTE,
        ),
        20 => array(
            'var' => 'chunks',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        21 => array(
            'var' => 'relatedMessageId',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        22 => array(
            'var' => 'messageRelationType',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        23 => array(
            'var' => 'readCount',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        24 => array(
            'var' => 'relatedMessageServiceCode',
            'isRequired' => false,
            'type' => TType::I32,
        ),
    );

    /**
     * @var string
     */
    public $_from = null;
    /**
     * @var string
     */
    public $to = null;
    /**
     * @var int
     */
    public $toType = null;
    /**
     * @var string
     */
    public $id = null;
    /**
     * @var int
     */
    public $createdTime = null;
    /**
     * @var int
     */
    public $deliveredTime = null;
    /**
     * @var string
     */
    public $text = null;
    /**
     * @var \Location
     */
    public $location = null;
    /**
     * @var bool
     */
    public $hasContent = null;
    /**
     * @var int
     */
    public $contentType = null;
    /**
     * @var string
     */
    public $contentPreview = null;
    /**
     * @var array
     */
    public $contentMetadata = null;
    /**
     * @var int
     */
    public $sessionId = null;
    /**
     * @var string[]
     */
    public $chunks = null;
    /**
     * @var string
     */
    public $relatedMessageId = null;
    /**
     * @var int
     */
    public $messageRelationType = null;
    /**
     * @var int
     */
    public $readCount = null;
    /**
     * @var int
     */
    public $relatedMessageServiceCode = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['_from'])) {
                $this->_from = $vals['_from'];
            }
            if (isset($vals['to'])) {
                $this->to = $vals['to'];
            }
            if (isset($vals['toType'])) {
                $this->toType = $vals['toType'];
            }
            if (isset($vals['id'])) {
                $this->id = $vals['id'];
            }
            if (isset($vals['createdTime'])) {
                $this->createdTime = $vals['createdTime'];
            }
            if (isset($vals['deliveredTime'])) {
                $this->deliveredTime = $vals['deliveredTime'];
            }
            if (isset($vals['text'])) {
                $this->text = $vals['text'];
            }
            if (isset($vals['location'])) {
                $this->location = $vals['location'];
            }
            if (isset($vals['hasContent'])) {
                $this->hasContent = $vals['hasContent'];
            }
            if (isset($vals['contentType'])) {
                $this->contentType = $vals['contentType'];
            }
            if (isset($vals['contentPreview'])) {
                $this->contentPreview = $vals['contentPreview'];
            }
            if (isset($vals['contentMetadata'])) {
                $this->contentMetadata = $vals['contentMetadata'];
            }
            if (isset($vals['sessionId'])) {
                $this->sessionId = $vals['sessionId'];
            }
            if (isset($vals['chunks'])) {
                $this->chunks = $vals['chunks'];
            }
            if (isset($vals['relatedMessageId'])) {
                $this->relatedMessageId = $vals['relatedMessageId'];
            }
            if (isset($vals['messageRelationType'])) {
                $this->messageRelationType = $vals['messageRelationType'];
            }
            if (isset($vals['readCount'])) {
                $this->readCount = $vals['readCount'];
            }
            if (isset($vals['relatedMessageServiceCode'])) {
                $this->relatedMessageServiceCode = $vals['relatedMessageServiceCode'];
            }
        }
    }

    public function getName()
    {
        return 'Message';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->_from);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->to);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->toType);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->createdTime);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->deliveredTime);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->text);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::STRUCT) {
                        $this->location = new \Location();
                        $xfer += $this->location->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 14:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->hasContent);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 15:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->contentType);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 17:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->contentPreview);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 18:
                    if ($ftype == TType::MAP) {
                        $this->contentMetadata = array();
                        $_size279 = 0;
                        $_ktype280 = 0;
                        $_vtype281 = 0;
                        $xfer += $input->readMapBegin($_ktype280, $_vtype281, $_size279);
                        for ($_i283 = 0; $_i283 < $_size279; ++$_i283) {
                            $key284 = '';
                            $val285 = '';
                            $xfer += $input->readString($key284);
                            $xfer += $input->readString($val285);
                            $this->contentMetadata[$key284] = $val285;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 19:
                    if ($ftype == TType::BYTE) {
                        $xfer += $input->readByte($this->sessionId);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 20:
                    if ($ftype == TType::LST) {
                        $this->chunks = array();
                        $_size286 = 0;
                        $_etype289 = 0;
                        $xfer += $input->readListBegin($_etype289, $_size286);
                        for ($_i290 = 0; $_i290 < $_size286; ++$_i290) {
                            $elem291 = null;
                            $xfer += $input->readString($elem291);
                            $this->chunks []= $elem291;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 21:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->relatedMessageId);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 22:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->messageRelationType);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 23:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->readCount);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 24:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->relatedMessageServiceCode);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('Message');
        if ($this->_from !== null) {
            $xfer += $output->writeFieldBegin('_from', TType::STRING, 1);
            $xfer += $output->writeString($this->_from);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->to !== null) {
            $xfer += $output->writeFieldBegin('to', TType::STRING, 2);
            $xfer += $output->writeString($this->to);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->toType !== null) {
            $xfer += $output->writeFieldBegin('toType', TType::I32, 3);
            $xfer += $output->writeI32($this->toType);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->id !== null) {
            $xfer += $output->writeFieldBegin('id', TType::STRING, 4);
            $xfer += $output->writeString($this->id);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->createdTime !== null) {
            $xfer += $output->writeFieldBegin('createdTime', TType::I64, 5);
            $xfer += $output->writeI64($this->createdTime);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->deliveredTime !== null) {
            $xfer += $output->writeFieldBegin('deliveredTime', TType::I64, 6);
            $xfer += $output->writeI64($this->deliveredTime);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->text !== null) {
            $xfer += $output->writeFieldBegin('text', TType::STRING, 10);
            $xfer += $output->writeString($this->text);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->location !== null) {
            if (!is_object($this->location)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('location', TType::STRUCT, 11);
            $xfer += $this->location->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->hasContent !== null) {
            $xfer += $output->writeFieldBegin('hasContent', TType::BOOL, 14);
            $xfer += $output->writeBool($this->hasContent);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->contentType !== null) {
            $xfer += $output->writeFieldBegin('contentType', TType::I32, 15);
            $xfer += $output->writeI32($this->contentType);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->contentPreview !== null) {
            $xfer += $output->writeFieldBegin('contentPreview', TType::STRING, 17);
            $xfer += $output->writeString($this->contentPreview);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->contentMetadata !== null) {
            if (!is_array($this->contentMetadata)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('contentMetadata', TType::MAP, 18);
            $output->writeMapBegin(TType::STRING, TType::STRING, count($this->contentMetadata));
            foreach ($this->contentMetadata as $kiter292 => $viter293) {
                $xfer += $output->writeString($kiter292);
                $xfer += $output->writeString($viter293);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->sessionId !== null) {
            $xfer += $output->writeFieldBegin('sessionId', TType::BYTE, 19);
            $xfer += $output->writeByte($this->sessionId);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->chunks !== null) {
            if (!is_array($this->chunks)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('chunks', TType::LST, 20);
            $output->writeListBegin(TType::STRING, count($this->chunks));
            foreach ($this->chunks as $iter294) {
                $xfer += $output->writeString($iter294);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->relatedMessageId !== null) {
            $xfer += $output->writeFieldBegin('relatedMessageId', TType::STRING, 21);
            $xfer += $output->writeString($this->relatedMessageId);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->messageRelationType !== null) {
            $xfer += $output->writeFieldBegin('messageRelationType', TType::I32, 22);
            $xfer += $output->writeI32($this->messageRelationType);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->readCount !== null) {
            $xfer += $output->writeFieldBegin('readCount', TType::I64, 23);
            $xfer += $output->writeI64($this->readCount);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->relatedMessageServiceCode !== null) {
            $xfer += $output->writeFieldBegin('relatedMessageServiceCode', TType::I32, 24);
            $xfer += $output->writeI32($this->relatedMessageServiceCode);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
