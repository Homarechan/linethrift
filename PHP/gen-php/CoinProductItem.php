<?php
/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class CoinProductItem
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'itemId',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'coin',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        3 => array(
            'var' => 'freeCoin',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        5 => array(
            'var' => 'currency',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        6 => array(
            'var' => 'price',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        7 => array(
            'var' => 'displayPrice',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        8 => array(
            'var' => 'name',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        9 => array(
            'var' => 'desc',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
    );

    /**
     * @var string
     */
    public $itemId = null;
    /**
     * @var int
     */
    public $coin = null;
    /**
     * @var int
     */
    public $freeCoin = null;
    /**
     * @var string
     */
    public $currency = null;
    /**
     * @var string
     */
    public $price = null;
    /**
     * @var string
     */
    public $displayPrice = null;
    /**
     * @var string
     */
    public $name = null;
    /**
     * @var string
     */
    public $desc = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['itemId'])) {
                $this->itemId = $vals['itemId'];
            }
            if (isset($vals['coin'])) {
                $this->coin = $vals['coin'];
            }
            if (isset($vals['freeCoin'])) {
                $this->freeCoin = $vals['freeCoin'];
            }
            if (isset($vals['currency'])) {
                $this->currency = $vals['currency'];
            }
            if (isset($vals['price'])) {
                $this->price = $vals['price'];
            }
            if (isset($vals['displayPrice'])) {
                $this->displayPrice = $vals['displayPrice'];
            }
            if (isset($vals['name'])) {
                $this->name = $vals['name'];
            }
            if (isset($vals['desc'])) {
                $this->desc = $vals['desc'];
            }
        }
    }

    public function getName()
    {
        return 'CoinProductItem';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->itemId);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->coin);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->freeCoin);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->currency);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->price);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->displayPrice);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->name);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->desc);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('CoinProductItem');
        if ($this->itemId !== null) {
            $xfer += $output->writeFieldBegin('itemId', TType::STRING, 1);
            $xfer += $output->writeString($this->itemId);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->coin !== null) {
            $xfer += $output->writeFieldBegin('coin', TType::I32, 2);
            $xfer += $output->writeI32($this->coin);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->freeCoin !== null) {
            $xfer += $output->writeFieldBegin('freeCoin', TType::I32, 3);
            $xfer += $output->writeI32($this->freeCoin);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->currency !== null) {
            $xfer += $output->writeFieldBegin('currency', TType::STRING, 5);
            $xfer += $output->writeString($this->currency);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->price !== null) {
            $xfer += $output->writeFieldBegin('price', TType::STRING, 6);
            $xfer += $output->writeString($this->price);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->displayPrice !== null) {
            $xfer += $output->writeFieldBegin('displayPrice', TType::STRING, 7);
            $xfer += $output->writeString($this->displayPrice);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->name !== null) {
            $xfer += $output->writeFieldBegin('name', TType::STRING, 8);
            $xfer += $output->writeString($this->name);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->desc !== null) {
            $xfer += $output->writeFieldBegin('desc', TType::STRING, 9);
            $xfer += $output->writeString($this->desc);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
