<?php
/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class SystemConfiguration
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'endpoint',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'endpointSsl',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'updateUrl',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        11 => array(
            'var' => 'c2dmAccount',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        12 => array(
            'var' => 'nniServer',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
    );

    /**
     * @var string
     */
    public $endpoint = null;
    /**
     * @var string
     */
    public $endpointSsl = null;
    /**
     * @var string
     */
    public $updateUrl = null;
    /**
     * @var string
     */
    public $c2dmAccount = null;
    /**
     * @var string
     */
    public $nniServer = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['endpoint'])) {
                $this->endpoint = $vals['endpoint'];
            }
            if (isset($vals['endpointSsl'])) {
                $this->endpointSsl = $vals['endpointSsl'];
            }
            if (isset($vals['updateUrl'])) {
                $this->updateUrl = $vals['updateUrl'];
            }
            if (isset($vals['c2dmAccount'])) {
                $this->c2dmAccount = $vals['c2dmAccount'];
            }
            if (isset($vals['nniServer'])) {
                $this->nniServer = $vals['nniServer'];
            }
        }
    }

    public function getName()
    {
        return 'SystemConfiguration';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->endpoint);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->endpointSsl);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->updateUrl);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->c2dmAccount);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 12:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->nniServer);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('SystemConfiguration');
        if ($this->endpoint !== null) {
            $xfer += $output->writeFieldBegin('endpoint', TType::STRING, 1);
            $xfer += $output->writeString($this->endpoint);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->endpointSsl !== null) {
            $xfer += $output->writeFieldBegin('endpointSsl', TType::STRING, 2);
            $xfer += $output->writeString($this->endpointSsl);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->updateUrl !== null) {
            $xfer += $output->writeFieldBegin('updateUrl', TType::STRING, 3);
            $xfer += $output->writeString($this->updateUrl);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->c2dmAccount !== null) {
            $xfer += $output->writeFieldBegin('c2dmAccount', TType::STRING, 11);
            $xfer += $output->writeString($this->c2dmAccount);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->nniServer !== null) {
            $xfer += $output->writeFieldBegin('nniServer', TType::STRING, 12);
            $xfer += $output->writeString($this->nniServer);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
