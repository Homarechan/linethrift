<?php
/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class ContactRegistration
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'contact',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Contact',
        ),
        10 => array(
            'var' => 'luid',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        11 => array(
            'var' => 'contactType',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        12 => array(
            'var' => 'contactKey',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
    );

    /**
     * @var \Contact
     */
    public $contact = null;
    /**
     * @var string
     */
    public $luid = null;
    /**
     * @var int
     */
    public $contactType = null;
    /**
     * @var string
     */
    public $contactKey = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['contact'])) {
                $this->contact = $vals['contact'];
            }
            if (isset($vals['luid'])) {
                $this->luid = $vals['luid'];
            }
            if (isset($vals['contactType'])) {
                $this->contactType = $vals['contactType'];
            }
            if (isset($vals['contactKey'])) {
                $this->contactKey = $vals['contactKey'];
            }
        }
    }

    public function getName()
    {
        return 'ContactRegistration';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->contact = new \Contact();
                        $xfer += $this->contact->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->luid);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->contactType);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 12:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->contactKey);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('ContactRegistration');
        if ($this->contact !== null) {
            if (!is_object($this->contact)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('contact', TType::STRUCT, 1);
            $xfer += $this->contact->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->luid !== null) {
            $xfer += $output->writeFieldBegin('luid', TType::STRING, 10);
            $xfer += $output->writeString($this->luid);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->contactType !== null) {
            $xfer += $output->writeFieldBegin('contactType', TType::I32, 11);
            $xfer += $output->writeI32($this->contactType);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->contactKey !== null) {
            $xfer += $output->writeFieldBegin('contactKey', TType::STRING, 12);
            $xfer += $output->writeString($this->contactKey);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
