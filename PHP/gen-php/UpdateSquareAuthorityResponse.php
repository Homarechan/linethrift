<?php
/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class UpdateSquareAuthorityResponse
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'updatdAttributes',
            'isRequired' => false,
            'type' => TType::SET,
            'etype' => TType::I32,
            'elem' => array(
                'type' => TType::I32,
                ),
        ),
        2 => array(
            'var' => 'authority',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\SquareAuthority',
        ),
    );

    /**
     * @var int[]
     */
    public $updatdAttributes = null;
    /**
     * @var \SquareAuthority
     */
    public $authority = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['updatdAttributes'])) {
                $this->updatdAttributes = $vals['updatdAttributes'];
            }
            if (isset($vals['authority'])) {
                $this->authority = $vals['authority'];
            }
        }
    }

    public function getName()
    {
        return 'UpdateSquareAuthorityResponse';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::SET) {
                        $this->updatdAttributes = array();
                        $_size877 = 0;
                        $_etype880 = 0;
                        $xfer += $input->readSetBegin($_etype880, $_size877);
                        for ($_i881 = 0; $_i881 < $_size877; ++$_i881) {
                            $elem882 = null;
                            $xfer += $input->readI32($elem882);
                            $this->updatdAttributes[$elem882] = true;
                        }
                        $xfer += $input->readSetEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRUCT) {
                        $this->authority = new \SquareAuthority();
                        $xfer += $this->authority->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('UpdateSquareAuthorityResponse');
        if ($this->updatdAttributes !== null) {
            if (!is_array($this->updatdAttributes)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('updatdAttributes', TType::SET, 1);
            $output->writeSetBegin(TType::I32, count($this->updatdAttributes));
            foreach ($this->updatdAttributes as $iter883 => $iter884) {
                $xfer += $output->writeI32($iter883);
            }
            $output->writeSetEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->authority !== null) {
            if (!is_object($this->authority)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('authority', TType::STRUCT, 2);
            $xfer += $this->authority->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
