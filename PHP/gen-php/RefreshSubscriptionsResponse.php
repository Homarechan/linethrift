<?php
/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class RefreshSubscriptionsResponse
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'ttlMillis',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        2 => array(
            'var' => 'subscriptionStates',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::I64,
            'vtype' => TType::STRUCT,
            'key' => array(
                'type' => TType::I64,
            ),
            'val' => array(
                'type' => TType::STRUCT,
                'class' => '\SubscriptionState',
                ),
        ),
    );

    /**
     * @var int
     */
    public $ttlMillis = null;
    /**
     * @var array
     */
    public $subscriptionStates = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['ttlMillis'])) {
                $this->ttlMillis = $vals['ttlMillis'];
            }
            if (isset($vals['subscriptionStates'])) {
                $this->subscriptionStates = $vals['subscriptionStates'];
            }
        }
    }

    public function getName()
    {
        return 'RefreshSubscriptionsResponse';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->ttlMillis);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::MAP) {
                        $this->subscriptionStates = array();
                        $_size836 = 0;
                        $_ktype837 = 0;
                        $_vtype838 = 0;
                        $xfer += $input->readMapBegin($_ktype837, $_vtype838, $_size836);
                        for ($_i840 = 0; $_i840 < $_size836; ++$_i840) {
                            $key841 = 0;
                            $val842 = new \SubscriptionState();
                            $xfer += $input->readI64($key841);
                            $val842 = new \SubscriptionState();
                            $xfer += $val842->read($input);
                            $this->subscriptionStates[$key841] = $val842;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('RefreshSubscriptionsResponse');
        if ($this->ttlMillis !== null) {
            $xfer += $output->writeFieldBegin('ttlMillis', TType::I64, 1);
            $xfer += $output->writeI64($this->ttlMillis);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->subscriptionStates !== null) {
            if (!is_array($this->subscriptionStates)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('subscriptionStates', TType::MAP, 2);
            $output->writeMapBegin(TType::I64, TType::STRUCT, count($this->subscriptionStates));
            foreach ($this->subscriptionStates as $kiter843 => $viter844) {
                $xfer += $output->writeI64($kiter843);
                $xfer += $viter844->write($output);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
