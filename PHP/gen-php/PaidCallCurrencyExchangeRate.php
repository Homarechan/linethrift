<?php
/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class PaidCallCurrencyExchangeRate
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'currencyCode',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'currencyName',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'currencySign',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'preferred',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        5 => array(
            'var' => 'coinRate',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        6 => array(
            'var' => 'creditRate',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
    );

    /**
     * @var string
     */
    public $currencyCode = null;
    /**
     * @var string
     */
    public $currencyName = null;
    /**
     * @var string
     */
    public $currencySign = null;
    /**
     * @var bool
     */
    public $preferred = null;
    /**
     * @var string
     */
    public $coinRate = null;
    /**
     * @var string
     */
    public $creditRate = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['currencyCode'])) {
                $this->currencyCode = $vals['currencyCode'];
            }
            if (isset($vals['currencyName'])) {
                $this->currencyName = $vals['currencyName'];
            }
            if (isset($vals['currencySign'])) {
                $this->currencySign = $vals['currencySign'];
            }
            if (isset($vals['preferred'])) {
                $this->preferred = $vals['preferred'];
            }
            if (isset($vals['coinRate'])) {
                $this->coinRate = $vals['coinRate'];
            }
            if (isset($vals['creditRate'])) {
                $this->creditRate = $vals['creditRate'];
            }
        }
    }

    public function getName()
    {
        return 'PaidCallCurrencyExchangeRate';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->currencyCode);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->currencyName);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->currencySign);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->preferred);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->coinRate);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->creditRate);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('PaidCallCurrencyExchangeRate');
        if ($this->currencyCode !== null) {
            $xfer += $output->writeFieldBegin('currencyCode', TType::STRING, 1);
            $xfer += $output->writeString($this->currencyCode);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->currencyName !== null) {
            $xfer += $output->writeFieldBegin('currencyName', TType::STRING, 2);
            $xfer += $output->writeString($this->currencyName);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->currencySign !== null) {
            $xfer += $output->writeFieldBegin('currencySign', TType::STRING, 3);
            $xfer += $output->writeString($this->currencySign);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->preferred !== null) {
            $xfer += $output->writeFieldBegin('preferred', TType::BOOL, 4);
            $xfer += $output->writeBool($this->preferred);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->coinRate !== null) {
            $xfer += $output->writeFieldBegin('coinRate', TType::STRING, 5);
            $xfer += $output->writeString($this->coinRate);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->creditRate !== null) {
            $xfer += $output->writeFieldBegin('creditRate', TType::STRING, 6);
            $xfer += $output->writeString($this->creditRate);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
