<?php
/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class TalkService_updateCustomModeSettings_args
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        2 => array(
            'var' => 'customMode',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        3 => array(
            'var' => 'paramMap',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRING,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::STRING,
                ),
        ),
    );

    /**
     * @var int
     */
    public $customMode = null;
    /**
     * @var array
     */
    public $paramMap = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['customMode'])) {
                $this->customMode = $vals['customMode'];
            }
            if (isset($vals['paramMap'])) {
                $this->paramMap = $vals['paramMap'];
            }
        }
    }

    public function getName()
    {
        return 'TalkService_updateCustomModeSettings_args';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 2:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->customMode);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::MAP) {
                        $this->paramMap = array();
                        $_size2118 = 0;
                        $_ktype2119 = 0;
                        $_vtype2120 = 0;
                        $xfer += $input->readMapBegin($_ktype2119, $_vtype2120, $_size2118);
                        for ($_i2122 = 0; $_i2122 < $_size2118; ++$_i2122) {
                            $key2123 = '';
                            $val2124 = '';
                            $xfer += $input->readString($key2123);
                            $xfer += $input->readString($val2124);
                            $this->paramMap[$key2123] = $val2124;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('TalkService_updateCustomModeSettings_args');
        if ($this->customMode !== null) {
            $xfer += $output->writeFieldBegin('customMode', TType::I32, 2);
            $xfer += $output->writeI32($this->customMode);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->paramMap !== null) {
            if (!is_array($this->paramMap)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('paramMap', TType::MAP, 3);
            $output->writeMapBegin(TType::STRING, TType::STRING, count($this->paramMap));
            foreach ($this->paramMap as $kiter2125 => $viter2126) {
                $xfer += $output->writeString($kiter2125);
                $xfer += $output->writeString($viter2126);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
