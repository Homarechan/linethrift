<?php
/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class NotiCenterEventData
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'id',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'to',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'from_',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'toChannel',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        5 => array(
            'var' => 'fromChannel',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        6 => array(
            'var' => 'eventType',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        7 => array(
            'var' => 'createdTime',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        8 => array(
            'var' => 'operationRevision',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        9 => array(
            'var' => 'content',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRING,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::STRING,
                ),
        ),
        10 => array(
            'var' => 'push',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRING,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::STRING,
                ),
        ),
    );

    /**
     * @var string
     */
    public $id = null;
    /**
     * @var string
     */
    public $to = null;
    /**
     * @var string
     */
    public $from_ = null;
    /**
     * @var string
     */
    public $toChannel = null;
    /**
     * @var string
     */
    public $fromChannel = null;
    /**
     * @var string
     */
    public $eventType = null;
    /**
     * @var int
     */
    public $createdTime = null;
    /**
     * @var int
     */
    public $operationRevision = null;
    /**
     * @var array
     */
    public $content = null;
    /**
     * @var array
     */
    public $push = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['id'])) {
                $this->id = $vals['id'];
            }
            if (isset($vals['to'])) {
                $this->to = $vals['to'];
            }
            if (isset($vals['from_'])) {
                $this->from_ = $vals['from_'];
            }
            if (isset($vals['toChannel'])) {
                $this->toChannel = $vals['toChannel'];
            }
            if (isset($vals['fromChannel'])) {
                $this->fromChannel = $vals['fromChannel'];
            }
            if (isset($vals['eventType'])) {
                $this->eventType = $vals['eventType'];
            }
            if (isset($vals['createdTime'])) {
                $this->createdTime = $vals['createdTime'];
            }
            if (isset($vals['operationRevision'])) {
                $this->operationRevision = $vals['operationRevision'];
            }
            if (isset($vals['content'])) {
                $this->content = $vals['content'];
            }
            if (isset($vals['push'])) {
                $this->push = $vals['push'];
            }
        }
    }

    public function getName()
    {
        return 'NotiCenterEventData';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->to);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->from_);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->toChannel);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->fromChannel);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->eventType);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->createdTime);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->operationRevision);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::MAP) {
                        $this->content = array();
                        $_size170 = 0;
                        $_ktype171 = 0;
                        $_vtype172 = 0;
                        $xfer += $input->readMapBegin($_ktype171, $_vtype172, $_size170);
                        for ($_i174 = 0; $_i174 < $_size170; ++$_i174) {
                            $key175 = '';
                            $val176 = '';
                            $xfer += $input->readString($key175);
                            $xfer += $input->readString($val176);
                            $this->content[$key175] = $val176;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::MAP) {
                        $this->push = array();
                        $_size177 = 0;
                        $_ktype178 = 0;
                        $_vtype179 = 0;
                        $xfer += $input->readMapBegin($_ktype178, $_vtype179, $_size177);
                        for ($_i181 = 0; $_i181 < $_size177; ++$_i181) {
                            $key182 = '';
                            $val183 = '';
                            $xfer += $input->readString($key182);
                            $xfer += $input->readString($val183);
                            $this->push[$key182] = $val183;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('NotiCenterEventData');
        if ($this->id !== null) {
            $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
            $xfer += $output->writeString($this->id);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->to !== null) {
            $xfer += $output->writeFieldBegin('to', TType::STRING, 2);
            $xfer += $output->writeString($this->to);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->from_ !== null) {
            $xfer += $output->writeFieldBegin('from_', TType::STRING, 3);
            $xfer += $output->writeString($this->from_);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->toChannel !== null) {
            $xfer += $output->writeFieldBegin('toChannel', TType::STRING, 4);
            $xfer += $output->writeString($this->toChannel);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->fromChannel !== null) {
            $xfer += $output->writeFieldBegin('fromChannel', TType::STRING, 5);
            $xfer += $output->writeString($this->fromChannel);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->eventType !== null) {
            $xfer += $output->writeFieldBegin('eventType', TType::STRING, 6);
            $xfer += $output->writeString($this->eventType);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->createdTime !== null) {
            $xfer += $output->writeFieldBegin('createdTime', TType::I64, 7);
            $xfer += $output->writeI64($this->createdTime);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->operationRevision !== null) {
            $xfer += $output->writeFieldBegin('operationRevision', TType::I64, 8);
            $xfer += $output->writeI64($this->operationRevision);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->content !== null) {
            if (!is_array($this->content)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('content', TType::MAP, 9);
            $output->writeMapBegin(TType::STRING, TType::STRING, count($this->content));
            foreach ($this->content as $kiter184 => $viter185) {
                $xfer += $output->writeString($kiter184);
                $xfer += $output->writeString($viter185);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->push !== null) {
            if (!is_array($this->push)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('push', TType::MAP, 10);
            $output->writeMapBegin(TType::STRING, TType::STRING, count($this->push));
            foreach ($this->push as $kiter186 => $viter187) {
                $xfer += $output->writeString($kiter186);
                $xfer += $output->writeString($viter187);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
