<?php
/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class AuthService_verifyQrcodeWithE2EE_args
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        2 => array(
            'var' => 'verifier',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'pinCode',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'errorCode',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        5 => array(
            'var' => 'publicKey',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\E2EEPublicKey',
        ),
        6 => array(
            'var' => 'encryptedKeyChain',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        7 => array(
            'var' => 'hashKeyChain',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
    );

    /**
     * @var string
     */
    public $verifier = null;
    /**
     * @var string
     */
    public $pinCode = null;
    /**
     * @var int
     */
    public $errorCode = null;
    /**
     * @var \E2EEPublicKey
     */
    public $publicKey = null;
    /**
     * @var string
     */
    public $encryptedKeyChain = null;
    /**
     * @var string
     */
    public $hashKeyChain = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['verifier'])) {
                $this->verifier = $vals['verifier'];
            }
            if (isset($vals['pinCode'])) {
                $this->pinCode = $vals['pinCode'];
            }
            if (isset($vals['errorCode'])) {
                $this->errorCode = $vals['errorCode'];
            }
            if (isset($vals['publicKey'])) {
                $this->publicKey = $vals['publicKey'];
            }
            if (isset($vals['encryptedKeyChain'])) {
                $this->encryptedKeyChain = $vals['encryptedKeyChain'];
            }
            if (isset($vals['hashKeyChain'])) {
                $this->hashKeyChain = $vals['hashKeyChain'];
            }
        }
    }

    public function getName()
    {
        return 'AuthService_verifyQrcodeWithE2EE_args';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->verifier);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->pinCode);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->errorCode);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRUCT) {
                        $this->publicKey = new \E2EEPublicKey();
                        $xfer += $this->publicKey->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->encryptedKeyChain);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->hashKeyChain);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('AuthService_verifyQrcodeWithE2EE_args');
        if ($this->verifier !== null) {
            $xfer += $output->writeFieldBegin('verifier', TType::STRING, 2);
            $xfer += $output->writeString($this->verifier);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->pinCode !== null) {
            $xfer += $output->writeFieldBegin('pinCode', TType::STRING, 3);
            $xfer += $output->writeString($this->pinCode);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->errorCode !== null) {
            $xfer += $output->writeFieldBegin('errorCode', TType::I32, 4);
            $xfer += $output->writeI32($this->errorCode);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->publicKey !== null) {
            if (!is_object($this->publicKey)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('publicKey', TType::STRUCT, 5);
            $xfer += $this->publicKey->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->encryptedKeyChain !== null) {
            $xfer += $output->writeFieldBegin('encryptedKeyChain', TType::STRING, 6);
            $xfer += $output->writeString($this->encryptedKeyChain);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->hashKeyChain !== null) {
            $xfer += $output->writeFieldBegin('hashKeyChain', TType::STRING, 7);
            $xfer += $output->writeString($this->hashKeyChain);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
