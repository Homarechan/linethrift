<?php
/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class ShopService_getProductListWithCarrier_args
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        2 => array(
            'var' => 'productIdList',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        3 => array(
            'var' => 'language',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'country',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        5 => array(
            'var' => 'carrierCode',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
    );

    /**
     * @var string[]
     */
    public $productIdList = null;
    /**
     * @var string
     */
    public $language = null;
    /**
     * @var string
     */
    public $country = null;
    /**
     * @var string
     */
    public $carrierCode = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['productIdList'])) {
                $this->productIdList = $vals['productIdList'];
            }
            if (isset($vals['language'])) {
                $this->language = $vals['language'];
            }
            if (isset($vals['country'])) {
                $this->country = $vals['country'];
            }
            if (isset($vals['carrierCode'])) {
                $this->carrierCode = $vals['carrierCode'];
            }
        }
    }

    public function getName()
    {
        return 'ShopService_getProductListWithCarrier_args';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 2:
                    if ($ftype == TType::LST) {
                        $this->productIdList = array();
                        $_size1363 = 0;
                        $_etype1366 = 0;
                        $xfer += $input->readListBegin($_etype1366, $_size1363);
                        for ($_i1367 = 0; $_i1367 < $_size1363; ++$_i1367) {
                            $elem1368 = null;
                            $xfer += $input->readString($elem1368);
                            $this->productIdList []= $elem1368;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->language);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->country);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->carrierCode);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('ShopService_getProductListWithCarrier_args');
        if ($this->productIdList !== null) {
            if (!is_array($this->productIdList)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('productIdList', TType::LST, 2);
            $output->writeListBegin(TType::STRING, count($this->productIdList));
            foreach ($this->productIdList as $iter1369) {
                $xfer += $output->writeString($iter1369);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->language !== null) {
            $xfer += $output->writeFieldBegin('language', TType::STRING, 3);
            $xfer += $output->writeString($this->language);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->country !== null) {
            $xfer += $output->writeFieldBegin('country', TType::STRING, 4);
            $xfer += $output->writeString($this->country);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->carrierCode !== null) {
            $xfer += $output->writeFieldBegin('carrierCode', TType::STRING, 5);
            $xfer += $output->writeString($this->carrierCode);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
