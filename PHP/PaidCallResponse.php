<?php
/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class PaidCallResponse
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'host',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\CallHost',
        ),
        2 => array(
            'var' => 'dialing',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\PaidCallDialing',
        ),
        3 => array(
            'var' => 'token',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'spotItems',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\SpotItem',
                ),
        ),
    );

    /**
     * @var \CallHost
     */
    public $host = null;
    /**
     * @var \PaidCallDialing
     */
    public $dialing = null;
    /**
     * @var string
     */
    public $token = null;
    /**
     * @var \SpotItem[]
     */
    public $spotItems = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['host'])) {
                $this->host = $vals['host'];
            }
            if (isset($vals['dialing'])) {
                $this->dialing = $vals['dialing'];
            }
            if (isset($vals['token'])) {
                $this->token = $vals['token'];
            }
            if (isset($vals['spotItems'])) {
                $this->spotItems = $vals['spotItems'];
            }
        }
    }

    public function getName()
    {
        return 'PaidCallResponse';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->host = new \CallHost();
                        $xfer += $this->host->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRUCT) {
                        $this->dialing = new \PaidCallDialing();
                        $xfer += $this->dialing->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->token);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::LST) {
                        $this->spotItems = array();
                        $_size57 = 0;
                        $_etype60 = 0;
                        $xfer += $input->readListBegin($_etype60, $_size57);
                        for ($_i61 = 0; $_i61 < $_size57; ++$_i61) {
                            $elem62 = null;
                            $elem62 = new \SpotItem();
                            $xfer += $elem62->read($input);
                            $this->spotItems []= $elem62;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('PaidCallResponse');
        if ($this->host !== null) {
            if (!is_object($this->host)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('host', TType::STRUCT, 1);
            $xfer += $this->host->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->dialing !== null) {
            if (!is_object($this->dialing)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('dialing', TType::STRUCT, 2);
            $xfer += $this->dialing->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->token !== null) {
            $xfer += $output->writeFieldBegin('token', TType::STRING, 3);
            $xfer += $output->writeString($this->token);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->spotItems !== null) {
            if (!is_array($this->spotItems)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('spotItems', TType::LST, 4);
            $output->writeListBegin(TType::STRUCT, count($this->spotItems));
            foreach ($this->spotItems as $iter63) {
                $xfer += $iter63->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
