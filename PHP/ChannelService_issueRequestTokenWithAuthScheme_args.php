<?php
/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class ChannelService_issueRequestTokenWithAuthScheme_args
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'channelId',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'otpId',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'authScheme',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        4 => array(
            'var' => 'returnUrl',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
    );

    /**
     * @var string
     */
    public $channelId = null;
    /**
     * @var string
     */
    public $otpId = null;
    /**
     * @var string[]
     */
    public $authScheme = null;
    /**
     * @var string
     */
    public $returnUrl = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['channelId'])) {
                $this->channelId = $vals['channelId'];
            }
            if (isset($vals['otpId'])) {
                $this->otpId = $vals['otpId'];
            }
            if (isset($vals['authScheme'])) {
                $this->authScheme = $vals['authScheme'];
            }
            if (isset($vals['returnUrl'])) {
                $this->returnUrl = $vals['returnUrl'];
            }
        }
    }

    public function getName()
    {
        return 'ChannelService_issueRequestTokenWithAuthScheme_args';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->channelId);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->otpId);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::LST) {
                        $this->authScheme = array();
                        $_size1300 = 0;
                        $_etype1303 = 0;
                        $xfer += $input->readListBegin($_etype1303, $_size1300);
                        for ($_i1304 = 0; $_i1304 < $_size1300; ++$_i1304) {
                            $elem1305 = null;
                            $xfer += $input->readString($elem1305);
                            $this->authScheme []= $elem1305;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->returnUrl);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('ChannelService_issueRequestTokenWithAuthScheme_args');
        if ($this->channelId !== null) {
            $xfer += $output->writeFieldBegin('channelId', TType::STRING, 1);
            $xfer += $output->writeString($this->channelId);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->otpId !== null) {
            $xfer += $output->writeFieldBegin('otpId', TType::STRING, 2);
            $xfer += $output->writeString($this->otpId);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->authScheme !== null) {
            if (!is_array($this->authScheme)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('authScheme', TType::LST, 3);
            $output->writeListBegin(TType::STRING, count($this->authScheme));
            foreach ($this->authScheme as $iter1306) {
                $xfer += $output->writeString($iter1306);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->returnUrl !== null) {
            $xfer += $output->writeFieldBegin('returnUrl', TType::STRING, 4);
            $xfer += $output->writeString($this->returnUrl);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
