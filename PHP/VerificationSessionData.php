<?php
/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class VerificationSessionData
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'sessionId',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'method',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        3 => array(
            'var' => 'callback',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'normalizedPhone',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        5 => array(
            'var' => 'countryCode',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        6 => array(
            'var' => 'nationalSignificantNumber',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        7 => array(
            'var' => 'availableVerificationMethods',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::I32,
            'elem' => array(
                'type' => TType::I32,
                ),
        ),
    );

    /**
     * @var string
     */
    public $sessionId = null;
    /**
     * @var int
     */
    public $method = null;
    /**
     * @var string
     */
    public $callback = null;
    /**
     * @var string
     */
    public $normalizedPhone = null;
    /**
     * @var string
     */
    public $countryCode = null;
    /**
     * @var string
     */
    public $nationalSignificantNumber = null;
    /**
     * @var int[]
     */
    public $availableVerificationMethods = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['sessionId'])) {
                $this->sessionId = $vals['sessionId'];
            }
            if (isset($vals['method'])) {
                $this->method = $vals['method'];
            }
            if (isset($vals['callback'])) {
                $this->callback = $vals['callback'];
            }
            if (isset($vals['normalizedPhone'])) {
                $this->normalizedPhone = $vals['normalizedPhone'];
            }
            if (isset($vals['countryCode'])) {
                $this->countryCode = $vals['countryCode'];
            }
            if (isset($vals['nationalSignificantNumber'])) {
                $this->nationalSignificantNumber = $vals['nationalSignificantNumber'];
            }
            if (isset($vals['availableVerificationMethods'])) {
                $this->availableVerificationMethods = $vals['availableVerificationMethods'];
            }
        }
    }

    public function getName()
    {
        return 'VerificationSessionData';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->sessionId);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->method);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->callback);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->normalizedPhone);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->countryCode);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->nationalSignificantNumber);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::LST) {
                        $this->availableVerificationMethods = array();
                        $_size272 = 0;
                        $_etype275 = 0;
                        $xfer += $input->readListBegin($_etype275, $_size272);
                        for ($_i276 = 0; $_i276 < $_size272; ++$_i276) {
                            $elem277 = null;
                            $xfer += $input->readI32($elem277);
                            $this->availableVerificationMethods []= $elem277;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('VerificationSessionData');
        if ($this->sessionId !== null) {
            $xfer += $output->writeFieldBegin('sessionId', TType::STRING, 1);
            $xfer += $output->writeString($this->sessionId);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->method !== null) {
            $xfer += $output->writeFieldBegin('method', TType::I32, 2);
            $xfer += $output->writeI32($this->method);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->callback !== null) {
            $xfer += $output->writeFieldBegin('callback', TType::STRING, 3);
            $xfer += $output->writeString($this->callback);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->normalizedPhone !== null) {
            $xfer += $output->writeFieldBegin('normalizedPhone', TType::STRING, 4);
            $xfer += $output->writeString($this->normalizedPhone);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->countryCode !== null) {
            $xfer += $output->writeFieldBegin('countryCode', TType::STRING, 5);
            $xfer += $output->writeString($this->countryCode);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->nationalSignificantNumber !== null) {
            $xfer += $output->writeFieldBegin('nationalSignificantNumber', TType::STRING, 6);
            $xfer += $output->writeString($this->nationalSignificantNumber);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->availableVerificationMethods !== null) {
            if (!is_array($this->availableVerificationMethods)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('availableVerificationMethods', TType::LST, 7);
            $output->writeListBegin(TType::I32, count($this->availableVerificationMethods));
            foreach ($this->availableVerificationMethods as $iter278) {
                $xfer += $output->writeI32($iter278);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
