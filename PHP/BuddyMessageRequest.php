<?php
/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class BuddyMessageRequest
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'contentType',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        2 => array(
            'var' => 'text',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'location',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Location',
        ),
        4 => array(
            'var' => 'content',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        5 => array(
            'var' => 'contentMetadata',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRING,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::STRING,
                ),
        ),
    );

    /**
     * @var int
     */
    public $contentType = null;
    /**
     * @var string
     */
    public $text = null;
    /**
     * @var \Location
     */
    public $location = null;
    /**
     * @var string
     */
    public $content = null;
    /**
     * @var array
     */
    public $contentMetadata = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['contentType'])) {
                $this->contentType = $vals['contentType'];
            }
            if (isset($vals['text'])) {
                $this->text = $vals['text'];
            }
            if (isset($vals['location'])) {
                $this->location = $vals['location'];
            }
            if (isset($vals['content'])) {
                $this->content = $vals['content'];
            }
            if (isset($vals['contentMetadata'])) {
                $this->contentMetadata = $vals['contentMetadata'];
            }
        }
    }

    public function getName()
    {
        return 'BuddyMessageRequest';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->contentType);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->text);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRUCT) {
                        $this->location = new \Location();
                        $xfer += $this->location->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->content);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::MAP) {
                        $this->contentMetadata = array();
                        $_size115 = 0;
                        $_ktype116 = 0;
                        $_vtype117 = 0;
                        $xfer += $input->readMapBegin($_ktype116, $_vtype117, $_size115);
                        for ($_i119 = 0; $_i119 < $_size115; ++$_i119) {
                            $key120 = '';
                            $val121 = '';
                            $xfer += $input->readString($key120);
                            $xfer += $input->readString($val121);
                            $this->contentMetadata[$key120] = $val121;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('BuddyMessageRequest');
        if ($this->contentType !== null) {
            $xfer += $output->writeFieldBegin('contentType', TType::I32, 1);
            $xfer += $output->writeI32($this->contentType);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->text !== null) {
            $xfer += $output->writeFieldBegin('text', TType::STRING, 2);
            $xfer += $output->writeString($this->text);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->location !== null) {
            if (!is_object($this->location)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('location', TType::STRUCT, 3);
            $xfer += $this->location->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->content !== null) {
            $xfer += $output->writeFieldBegin('content', TType::STRING, 4);
            $xfer += $output->writeString($this->content);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->contentMetadata !== null) {
            if (!is_array($this->contentMetadata)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('contentMetadata', TType::MAP, 5);
            $output->writeMapBegin(TType::STRING, TType::STRING, count($this->contentMetadata));
            foreach ($this->contentMetadata as $kiter122 => $viter123) {
                $xfer += $output->writeString($kiter122);
                $xfer += $output->writeString($viter123);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
