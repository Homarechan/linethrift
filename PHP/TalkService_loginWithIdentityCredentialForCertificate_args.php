<?php
/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class TalkService_loginWithIdentityCredentialForCertificate_args
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        8 => array(
            'var' => 'identityProvider',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        3 => array(
            'var' => 'identifier',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'password',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        5 => array(
            'var' => 'keepLoggedIn',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        6 => array(
            'var' => 'accessLocation',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        7 => array(
            'var' => 'systemName',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        9 => array(
            'var' => 'certificate',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
    );

    /**
     * @var int
     */
    public $identityProvider = null;
    /**
     * @var string
     */
    public $identifier = null;
    /**
     * @var string
     */
    public $password = null;
    /**
     * @var bool
     */
    public $keepLoggedIn = null;
    /**
     * @var string
     */
    public $accessLocation = null;
    /**
     * @var string
     */
    public $systemName = null;
    /**
     * @var string
     */
    public $certificate = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['identityProvider'])) {
                $this->identityProvider = $vals['identityProvider'];
            }
            if (isset($vals['identifier'])) {
                $this->identifier = $vals['identifier'];
            }
            if (isset($vals['password'])) {
                $this->password = $vals['password'];
            }
            if (isset($vals['keepLoggedIn'])) {
                $this->keepLoggedIn = $vals['keepLoggedIn'];
            }
            if (isset($vals['accessLocation'])) {
                $this->accessLocation = $vals['accessLocation'];
            }
            if (isset($vals['systemName'])) {
                $this->systemName = $vals['systemName'];
            }
            if (isset($vals['certificate'])) {
                $this->certificate = $vals['certificate'];
            }
        }
    }

    public function getName()
    {
        return 'TalkService_loginWithIdentityCredentialForCertificate_args';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 8:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->identityProvider);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->identifier);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->password);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->keepLoggedIn);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->accessLocation);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->systemName);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->certificate);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('TalkService_loginWithIdentityCredentialForCertificate_args');
        if ($this->identifier !== null) {
            $xfer += $output->writeFieldBegin('identifier', TType::STRING, 3);
            $xfer += $output->writeString($this->identifier);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->password !== null) {
            $xfer += $output->writeFieldBegin('password', TType::STRING, 4);
            $xfer += $output->writeString($this->password);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->keepLoggedIn !== null) {
            $xfer += $output->writeFieldBegin('keepLoggedIn', TType::BOOL, 5);
            $xfer += $output->writeBool($this->keepLoggedIn);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->accessLocation !== null) {
            $xfer += $output->writeFieldBegin('accessLocation', TType::STRING, 6);
            $xfer += $output->writeString($this->accessLocation);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->systemName !== null) {
            $xfer += $output->writeFieldBegin('systemName', TType::STRING, 7);
            $xfer += $output->writeString($this->systemName);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->identityProvider !== null) {
            $xfer += $output->writeFieldBegin('identityProvider', TType::I32, 8);
            $xfer += $output->writeI32($this->identityProvider);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->certificate !== null) {
            $xfer += $output->writeFieldBegin('certificate', TType::STRING, 9);
            $xfer += $output->writeString($this->certificate);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
