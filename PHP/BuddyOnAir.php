<?php
/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class BuddyOnAir
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'mid',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'freshnessLifetime',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        4 => array(
            'var' => 'onAirId',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        5 => array(
            'var' => 'onAir',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        11 => array(
            'var' => 'text',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        12 => array(
            'var' => 'viewerCount',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        13 => array(
            'var' => 'targetCount',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        31 => array(
            'var' => 'onAirType',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        32 => array(
            'var' => 'onAirUrls',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\BuddyOnAirUrls',
        ),
    );

    /**
     * @var string
     */
    public $mid = null;
    /**
     * @var int
     */
    public $freshnessLifetime = null;
    /**
     * @var string
     */
    public $onAirId = null;
    /**
     * @var bool
     */
    public $onAir = null;
    /**
     * @var string
     */
    public $text = null;
    /**
     * @var int
     */
    public $viewerCount = null;
    /**
     * @var int
     */
    public $targetCount = null;
    /**
     * @var int
     */
    public $onAirType = null;
    /**
     * @var \BuddyOnAirUrls
     */
    public $onAirUrls = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['mid'])) {
                $this->mid = $vals['mid'];
            }
            if (isset($vals['freshnessLifetime'])) {
                $this->freshnessLifetime = $vals['freshnessLifetime'];
            }
            if (isset($vals['onAirId'])) {
                $this->onAirId = $vals['onAirId'];
            }
            if (isset($vals['onAir'])) {
                $this->onAir = $vals['onAir'];
            }
            if (isset($vals['text'])) {
                $this->text = $vals['text'];
            }
            if (isset($vals['viewerCount'])) {
                $this->viewerCount = $vals['viewerCount'];
            }
            if (isset($vals['targetCount'])) {
                $this->targetCount = $vals['targetCount'];
            }
            if (isset($vals['onAirType'])) {
                $this->onAirType = $vals['onAirType'];
            }
            if (isset($vals['onAirUrls'])) {
                $this->onAirUrls = $vals['onAirUrls'];
            }
        }
    }

    public function getName()
    {
        return 'BuddyOnAir';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->mid);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->freshnessLifetime);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->onAirId);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->onAir);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->text);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 12:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->viewerCount);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 13:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->targetCount);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 31:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->onAirType);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 32:
                    if ($ftype == TType::STRUCT) {
                        $this->onAirUrls = new \BuddyOnAirUrls();
                        $xfer += $this->onAirUrls->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('BuddyOnAir');
        if ($this->mid !== null) {
            $xfer += $output->writeFieldBegin('mid', TType::STRING, 1);
            $xfer += $output->writeString($this->mid);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->freshnessLifetime !== null) {
            $xfer += $output->writeFieldBegin('freshnessLifetime', TType::I64, 3);
            $xfer += $output->writeI64($this->freshnessLifetime);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->onAirId !== null) {
            $xfer += $output->writeFieldBegin('onAirId', TType::STRING, 4);
            $xfer += $output->writeString($this->onAirId);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->onAir !== null) {
            $xfer += $output->writeFieldBegin('onAir', TType::BOOL, 5);
            $xfer += $output->writeBool($this->onAir);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->text !== null) {
            $xfer += $output->writeFieldBegin('text', TType::STRING, 11);
            $xfer += $output->writeString($this->text);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->viewerCount !== null) {
            $xfer += $output->writeFieldBegin('viewerCount', TType::I64, 12);
            $xfer += $output->writeI64($this->viewerCount);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->targetCount !== null) {
            $xfer += $output->writeFieldBegin('targetCount', TType::I64, 13);
            $xfer += $output->writeI64($this->targetCount);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->onAirType !== null) {
            $xfer += $output->writeFieldBegin('onAirType', TType::I32, 31);
            $xfer += $output->writeI32($this->onAirType);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->onAirUrls !== null) {
            if (!is_object($this->onAirUrls)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('onAirUrls', TType::STRUCT, 32);
            $xfer += $this->onAirUrls->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
