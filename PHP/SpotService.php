<?php
/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


interface SpotServiceIf {
  /**
   * @param string $countryAreaCode
   * @param string $phoneNumber
   * @return \SpotPhoneNumberResponse
   * @throws \TalkException
   */
  public function lookupByPhoneNumber($countryAreaCode, $phoneNumber);
  /**
   * @param \Location $location
   * @param int $category
   * @param string $query
   * @param string $countryAreaCode
   * @return \SpotNearbyResponse
   * @throws \TalkException
   */
  public function lookupNearby(\Location $location, $category, $query, $countryAreaCode);
}


class SpotServiceClient implements \SpotServiceIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function lookupByPhoneNumber($countryAreaCode, $phoneNumber)
  {
    $this->send_lookupByPhoneNumber($countryAreaCode, $phoneNumber);
    return $this->recv_lookupByPhoneNumber();
  }

  public function send_lookupByPhoneNumber($countryAreaCode, $phoneNumber)
  {
    $args = new \SpotService_lookupByPhoneNumber_args();
    $args->countryAreaCode = $countryAreaCode;
    $args->phoneNumber = $phoneNumber;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'lookupByPhoneNumber', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('lookupByPhoneNumber', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_lookupByPhoneNumber()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SpotService_lookupByPhoneNumber_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SpotService_lookupByPhoneNumber_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    throw new \Exception("lookupByPhoneNumber failed: unknown result");
  }

  public function lookupNearby(\Location $location, $category, $query, $countryAreaCode)
  {
    $this->send_lookupNearby($location, $category, $query, $countryAreaCode);
    return $this->recv_lookupNearby();
  }

  public function send_lookupNearby(\Location $location, $category, $query, $countryAreaCode)
  {
    $args = new \SpotService_lookupNearby_args();
    $args->location = $location;
    $args->category = $category;
    $args->query = $query;
    $args->countryAreaCode = $countryAreaCode;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'lookupNearby', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('lookupNearby', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_lookupNearby()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SpotService_lookupNearby_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SpotService_lookupNearby_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    throw new \Exception("lookupNearby failed: unknown result");
  }

}


// HELPER FUNCTIONS AND STRUCTURES

class SpotService_lookupByPhoneNumber_args {
  static $isValidate = false;

  static $_TSPEC = array(
    2 => array(
      'var' => 'countryAreaCode',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'phoneNumber',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $countryAreaCode = null;
  /**
   * @var string
   */
  public $phoneNumber = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['countryAreaCode'])) {
        $this->countryAreaCode = $vals['countryAreaCode'];
      }
      if (isset($vals['phoneNumber'])) {
        $this->phoneNumber = $vals['phoneNumber'];
      }
    }
  }

  public function getName() {
    return 'SpotService_lookupByPhoneNumber_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->countryAreaCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->phoneNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SpotService_lookupByPhoneNumber_args');
    if ($this->countryAreaCode !== null) {
      $xfer += $output->writeFieldBegin('countryAreaCode', TType::STRING, 2);
      $xfer += $output->writeString($this->countryAreaCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->phoneNumber !== null) {
      $xfer += $output->writeFieldBegin('phoneNumber', TType::STRING, 3);
      $xfer += $output->writeString($this->phoneNumber);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SpotService_lookupByPhoneNumber_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SpotPhoneNumberResponse',
      ),
    1 => array(
      'var' => 'e',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\TalkException',
      ),
    );

  /**
   * @var \SpotPhoneNumberResponse
   */
  public $success = null;
  /**
   * @var \TalkException
   */
  public $e = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'SpotService_lookupByPhoneNumber_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \SpotPhoneNumberResponse();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \TalkException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SpotService_lookupByPhoneNumber_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SpotService_lookupNearby_args {
  static $isValidate = false;

  static $_TSPEC = array(
    2 => array(
      'var' => 'location',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Location',
      ),
    3 => array(
      'var' => 'category',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    4 => array(
      'var' => 'query',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'countryAreaCode',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var \Location
   */
  public $location = null;
  /**
   * @var int
   */
  public $category = null;
  /**
   * @var string
   */
  public $query = null;
  /**
   * @var string
   */
  public $countryAreaCode = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['location'])) {
        $this->location = $vals['location'];
      }
      if (isset($vals['category'])) {
        $this->category = $vals['category'];
      }
      if (isset($vals['query'])) {
        $this->query = $vals['query'];
      }
      if (isset($vals['countryAreaCode'])) {
        $this->countryAreaCode = $vals['countryAreaCode'];
      }
    }
  }

  public function getName() {
    return 'SpotService_lookupNearby_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->location = new \Location();
            $xfer += $this->location->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->category);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->query);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->countryAreaCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SpotService_lookupNearby_args');
    if ($this->location !== null) {
      if (!is_object($this->location)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('location', TType::STRUCT, 2);
      $xfer += $this->location->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->category !== null) {
      $xfer += $output->writeFieldBegin('category', TType::I32, 3);
      $xfer += $output->writeI32($this->category);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->query !== null) {
      $xfer += $output->writeFieldBegin('query', TType::STRING, 4);
      $xfer += $output->writeString($this->query);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->countryAreaCode !== null) {
      $xfer += $output->writeFieldBegin('countryAreaCode', TType::STRING, 5);
      $xfer += $output->writeString($this->countryAreaCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SpotService_lookupNearby_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\SpotNearbyResponse',
      ),
    1 => array(
      'var' => 'e',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\TalkException',
      ),
    );

  /**
   * @var \SpotNearbyResponse
   */
  public $success = null;
  /**
   * @var \TalkException
   */
  public $e = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'SpotService_lookupNearby_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \SpotNearbyResponse();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \TalkException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SpotService_lookupNearby_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


