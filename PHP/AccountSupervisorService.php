<?php
/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


interface AccountSupervisorServiceIf {
  /**
   * @return \RSAKey
   * @throws \TalkException
   */
  public function getRSAKey();
  /**
   * @param array $parameterMap
   * @throws \TalkException
   */
  public function notifyEmailConfirmationResult(array $parameterMap);
  /**
   * @param string $locale
   * @param string $encryptedVirtualUserId
   * @param string $encryptedPassword
   * @return string
   * @throws \TalkException
   */
  public function registerVirtualAccount($locale, $encryptedVirtualUserId, $encryptedPassword);
  /**
   * @param string $virtualMid
   * @param string $encryptedVirtualUserId
   * @param string $encryptedOldPassword
   * @param string $encryptedNewPassword
   * @throws \TalkException
   */
  public function requestVirtualAccountPasswordChange($virtualMid, $encryptedVirtualUserId, $encryptedOldPassword, $encryptedNewPassword);
  /**
   * @param string $virtualMid
   * @param string $encryptedVirtualUserId
   * @param string $encryptedNewPassword
   * @throws \TalkException
   */
  public function requestVirtualAccountPasswordSet($virtualMid, $encryptedVirtualUserId, $encryptedNewPassword);
  /**
   * @param string $virtualMid
   * @throws \TalkException
   */
  public function unregisterVirtualAccount($virtualMid);
}


class AccountSupervisorServiceClient implements \AccountSupervisorServiceIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function getRSAKey()
  {
    $this->send_getRSAKey();
    return $this->recv_getRSAKey();
  }

  public function send_getRSAKey()
  {
    $args = new \AccountSupervisorService_getRSAKey_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getRSAKey', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getRSAKey', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getRSAKey()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\AccountSupervisorService_getRSAKey_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \AccountSupervisorService_getRSAKey_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    throw new \Exception("getRSAKey failed: unknown result");
  }

  public function notifyEmailConfirmationResult(array $parameterMap)
  {
    $this->send_notifyEmailConfirmationResult($parameterMap);
    $this->recv_notifyEmailConfirmationResult();
  }

  public function send_notifyEmailConfirmationResult(array $parameterMap)
  {
    $args = new \AccountSupervisorService_notifyEmailConfirmationResult_args();
    $args->parameterMap = $parameterMap;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'notifyEmailConfirmationResult', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('notifyEmailConfirmationResult', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_notifyEmailConfirmationResult()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\AccountSupervisorService_notifyEmailConfirmationResult_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \AccountSupervisorService_notifyEmailConfirmationResult_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    return;
  }

  public function registerVirtualAccount($locale, $encryptedVirtualUserId, $encryptedPassword)
  {
    $this->send_registerVirtualAccount($locale, $encryptedVirtualUserId, $encryptedPassword);
    return $this->recv_registerVirtualAccount();
  }

  public function send_registerVirtualAccount($locale, $encryptedVirtualUserId, $encryptedPassword)
  {
    $args = new \AccountSupervisorService_registerVirtualAccount_args();
    $args->locale = $locale;
    $args->encryptedVirtualUserId = $encryptedVirtualUserId;
    $args->encryptedPassword = $encryptedPassword;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'registerVirtualAccount', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('registerVirtualAccount', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_registerVirtualAccount()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\AccountSupervisorService_registerVirtualAccount_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \AccountSupervisorService_registerVirtualAccount_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    throw new \Exception("registerVirtualAccount failed: unknown result");
  }

  public function requestVirtualAccountPasswordChange($virtualMid, $encryptedVirtualUserId, $encryptedOldPassword, $encryptedNewPassword)
  {
    $this->send_requestVirtualAccountPasswordChange($virtualMid, $encryptedVirtualUserId, $encryptedOldPassword, $encryptedNewPassword);
    $this->recv_requestVirtualAccountPasswordChange();
  }

  public function send_requestVirtualAccountPasswordChange($virtualMid, $encryptedVirtualUserId, $encryptedOldPassword, $encryptedNewPassword)
  {
    $args = new \AccountSupervisorService_requestVirtualAccountPasswordChange_args();
    $args->virtualMid = $virtualMid;
    $args->encryptedVirtualUserId = $encryptedVirtualUserId;
    $args->encryptedOldPassword = $encryptedOldPassword;
    $args->encryptedNewPassword = $encryptedNewPassword;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'requestVirtualAccountPasswordChange', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('requestVirtualAccountPasswordChange', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_requestVirtualAccountPasswordChange()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\AccountSupervisorService_requestVirtualAccountPasswordChange_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \AccountSupervisorService_requestVirtualAccountPasswordChange_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    return;
  }

  public function requestVirtualAccountPasswordSet($virtualMid, $encryptedVirtualUserId, $encryptedNewPassword)
  {
    $this->send_requestVirtualAccountPasswordSet($virtualMid, $encryptedVirtualUserId, $encryptedNewPassword);
    $this->recv_requestVirtualAccountPasswordSet();
  }

  public function send_requestVirtualAccountPasswordSet($virtualMid, $encryptedVirtualUserId, $encryptedNewPassword)
  {
    $args = new \AccountSupervisorService_requestVirtualAccountPasswordSet_args();
    $args->virtualMid = $virtualMid;
    $args->encryptedVirtualUserId = $encryptedVirtualUserId;
    $args->encryptedNewPassword = $encryptedNewPassword;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'requestVirtualAccountPasswordSet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('requestVirtualAccountPasswordSet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_requestVirtualAccountPasswordSet()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\AccountSupervisorService_requestVirtualAccountPasswordSet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \AccountSupervisorService_requestVirtualAccountPasswordSet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    return;
  }

  public function unregisterVirtualAccount($virtualMid)
  {
    $this->send_unregisterVirtualAccount($virtualMid);
    $this->recv_unregisterVirtualAccount();
  }

  public function send_unregisterVirtualAccount($virtualMid)
  {
    $args = new \AccountSupervisorService_unregisterVirtualAccount_args();
    $args->virtualMid = $virtualMid;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'unregisterVirtualAccount', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('unregisterVirtualAccount', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_unregisterVirtualAccount()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\AccountSupervisorService_unregisterVirtualAccount_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \AccountSupervisorService_unregisterVirtualAccount_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    return;
  }

}


// HELPER FUNCTIONS AND STRUCTURES

class AccountSupervisorService_getRSAKey_args {
  static $isValidate = false;

  static $_TSPEC = array(
    );


  public function __construct() {
  }

  public function getName() {
    return 'AccountSupervisorService_getRSAKey_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AccountSupervisorService_getRSAKey_args');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AccountSupervisorService_getRSAKey_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\RSAKey',
      ),
    1 => array(
      'var' => 'e',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\TalkException',
      ),
    );

  /**
   * @var \RSAKey
   */
  public $success = null;
  /**
   * @var \TalkException
   */
  public $e = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'AccountSupervisorService_getRSAKey_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \RSAKey();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \TalkException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AccountSupervisorService_getRSAKey_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AccountSupervisorService_notifyEmailConfirmationResult_args {
  static $isValidate = false;

  static $_TSPEC = array(
    2 => array(
      'var' => 'parameterMap',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRING,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRING,
        ),
      ),
    );

  /**
   * @var array
   */
  public $parameterMap = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['parameterMap'])) {
        $this->parameterMap = $vals['parameterMap'];
      }
    }
  }

  public function getName() {
    return 'AccountSupervisorService_notifyEmailConfirmationResult_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 2:
          if ($ftype == TType::MAP) {
            $this->parameterMap = array();
            $_size1141 = 0;
            $_ktype1142 = 0;
            $_vtype1143 = 0;
            $xfer += $input->readMapBegin($_ktype1142, $_vtype1143, $_size1141);
            for ($_i1145 = 0; $_i1145 < $_size1141; ++$_i1145)
            {
              $key1146 = '';
              $val1147 = '';
              $xfer += $input->readString($key1146);
              $xfer += $input->readString($val1147);
              $this->parameterMap[$key1146] = $val1147;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AccountSupervisorService_notifyEmailConfirmationResult_args');
    if ($this->parameterMap !== null) {
      if (!is_array($this->parameterMap)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('parameterMap', TType::MAP, 2);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->parameterMap));
        {
          foreach ($this->parameterMap as $kiter1148 => $viter1149)
          {
            $xfer += $output->writeString($kiter1148);
            $xfer += $output->writeString($viter1149);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AccountSupervisorService_notifyEmailConfirmationResult_result {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'e',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\TalkException',
      ),
    );

  /**
   * @var \TalkException
   */
  public $e = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'AccountSupervisorService_notifyEmailConfirmationResult_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \TalkException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AccountSupervisorService_notifyEmailConfirmationResult_result');
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AccountSupervisorService_registerVirtualAccount_args {
  static $isValidate = false;

  static $_TSPEC = array(
    2 => array(
      'var' => 'locale',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'encryptedVirtualUserId',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'encryptedPassword',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $locale = null;
  /**
   * @var string
   */
  public $encryptedVirtualUserId = null;
  /**
   * @var string
   */
  public $encryptedPassword = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['locale'])) {
        $this->locale = $vals['locale'];
      }
      if (isset($vals['encryptedVirtualUserId'])) {
        $this->encryptedVirtualUserId = $vals['encryptedVirtualUserId'];
      }
      if (isset($vals['encryptedPassword'])) {
        $this->encryptedPassword = $vals['encryptedPassword'];
      }
    }
  }

  public function getName() {
    return 'AccountSupervisorService_registerVirtualAccount_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->locale);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->encryptedVirtualUserId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->encryptedPassword);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AccountSupervisorService_registerVirtualAccount_args');
    if ($this->locale !== null) {
      $xfer += $output->writeFieldBegin('locale', TType::STRING, 2);
      $xfer += $output->writeString($this->locale);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->encryptedVirtualUserId !== null) {
      $xfer += $output->writeFieldBegin('encryptedVirtualUserId', TType::STRING, 3);
      $xfer += $output->writeString($this->encryptedVirtualUserId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->encryptedPassword !== null) {
      $xfer += $output->writeFieldBegin('encryptedPassword', TType::STRING, 4);
      $xfer += $output->writeString($this->encryptedPassword);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AccountSupervisorService_registerVirtualAccount_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    1 => array(
      'var' => 'e',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\TalkException',
      ),
    );

  /**
   * @var string
   */
  public $success = null;
  /**
   * @var \TalkException
   */
  public $e = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'AccountSupervisorService_registerVirtualAccount_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \TalkException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AccountSupervisorService_registerVirtualAccount_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AccountSupervisorService_requestVirtualAccountPasswordChange_args {
  static $isValidate = false;

  static $_TSPEC = array(
    2 => array(
      'var' => 'virtualMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'encryptedVirtualUserId',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'encryptedOldPassword',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'encryptedNewPassword',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $virtualMid = null;
  /**
   * @var string
   */
  public $encryptedVirtualUserId = null;
  /**
   * @var string
   */
  public $encryptedOldPassword = null;
  /**
   * @var string
   */
  public $encryptedNewPassword = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['virtualMid'])) {
        $this->virtualMid = $vals['virtualMid'];
      }
      if (isset($vals['encryptedVirtualUserId'])) {
        $this->encryptedVirtualUserId = $vals['encryptedVirtualUserId'];
      }
      if (isset($vals['encryptedOldPassword'])) {
        $this->encryptedOldPassword = $vals['encryptedOldPassword'];
      }
      if (isset($vals['encryptedNewPassword'])) {
        $this->encryptedNewPassword = $vals['encryptedNewPassword'];
      }
    }
  }

  public function getName() {
    return 'AccountSupervisorService_requestVirtualAccountPasswordChange_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->virtualMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->encryptedVirtualUserId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->encryptedOldPassword);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->encryptedNewPassword);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AccountSupervisorService_requestVirtualAccountPasswordChange_args');
    if ($this->virtualMid !== null) {
      $xfer += $output->writeFieldBegin('virtualMid', TType::STRING, 2);
      $xfer += $output->writeString($this->virtualMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->encryptedVirtualUserId !== null) {
      $xfer += $output->writeFieldBegin('encryptedVirtualUserId', TType::STRING, 3);
      $xfer += $output->writeString($this->encryptedVirtualUserId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->encryptedOldPassword !== null) {
      $xfer += $output->writeFieldBegin('encryptedOldPassword', TType::STRING, 4);
      $xfer += $output->writeString($this->encryptedOldPassword);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->encryptedNewPassword !== null) {
      $xfer += $output->writeFieldBegin('encryptedNewPassword', TType::STRING, 5);
      $xfer += $output->writeString($this->encryptedNewPassword);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AccountSupervisorService_requestVirtualAccountPasswordChange_result {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'e',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\TalkException',
      ),
    );

  /**
   * @var \TalkException
   */
  public $e = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'AccountSupervisorService_requestVirtualAccountPasswordChange_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \TalkException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AccountSupervisorService_requestVirtualAccountPasswordChange_result');
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AccountSupervisorService_requestVirtualAccountPasswordSet_args {
  static $isValidate = false;

  static $_TSPEC = array(
    2 => array(
      'var' => 'virtualMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'encryptedVirtualUserId',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'encryptedNewPassword',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $virtualMid = null;
  /**
   * @var string
   */
  public $encryptedVirtualUserId = null;
  /**
   * @var string
   */
  public $encryptedNewPassword = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['virtualMid'])) {
        $this->virtualMid = $vals['virtualMid'];
      }
      if (isset($vals['encryptedVirtualUserId'])) {
        $this->encryptedVirtualUserId = $vals['encryptedVirtualUserId'];
      }
      if (isset($vals['encryptedNewPassword'])) {
        $this->encryptedNewPassword = $vals['encryptedNewPassword'];
      }
    }
  }

  public function getName() {
    return 'AccountSupervisorService_requestVirtualAccountPasswordSet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->virtualMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->encryptedVirtualUserId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->encryptedNewPassword);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AccountSupervisorService_requestVirtualAccountPasswordSet_args');
    if ($this->virtualMid !== null) {
      $xfer += $output->writeFieldBegin('virtualMid', TType::STRING, 2);
      $xfer += $output->writeString($this->virtualMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->encryptedVirtualUserId !== null) {
      $xfer += $output->writeFieldBegin('encryptedVirtualUserId', TType::STRING, 3);
      $xfer += $output->writeString($this->encryptedVirtualUserId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->encryptedNewPassword !== null) {
      $xfer += $output->writeFieldBegin('encryptedNewPassword', TType::STRING, 4);
      $xfer += $output->writeString($this->encryptedNewPassword);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AccountSupervisorService_requestVirtualAccountPasswordSet_result {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'e',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\TalkException',
      ),
    );

  /**
   * @var \TalkException
   */
  public $e = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'AccountSupervisorService_requestVirtualAccountPasswordSet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \TalkException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AccountSupervisorService_requestVirtualAccountPasswordSet_result');
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AccountSupervisorService_unregisterVirtualAccount_args {
  static $isValidate = false;

  static $_TSPEC = array(
    2 => array(
      'var' => 'virtualMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $virtualMid = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['virtualMid'])) {
        $this->virtualMid = $vals['virtualMid'];
      }
    }
  }

  public function getName() {
    return 'AccountSupervisorService_unregisterVirtualAccount_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->virtualMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AccountSupervisorService_unregisterVirtualAccount_args');
    if ($this->virtualMid !== null) {
      $xfer += $output->writeFieldBegin('virtualMid', TType::STRING, 2);
      $xfer += $output->writeString($this->virtualMid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AccountSupervisorService_unregisterVirtualAccount_result {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'e',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\TalkException',
      ),
    );

  /**
   * @var \TalkException
   */
  public $e = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'AccountSupervisorService_unregisterVirtualAccount_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \TalkException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AccountSupervisorService_unregisterVirtualAccount_result');
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


