<?php
/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class GetJoinedSquaresResponse
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'squares',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\Square',
                ),
        ),
        2 => array(
            'var' => 'members',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRUCT,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::STRUCT,
                'class' => '\SquareMember',
                ),
        ),
        3 => array(
            'var' => 'authorities',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRUCT,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::STRUCT,
                'class' => '\SquareAuthority',
                ),
        ),
        4 => array(
            'var' => 'statuses',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRUCT,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::STRUCT,
                'class' => '\SquareStatus',
                ),
        ),
        5 => array(
            'var' => 'continuationToken',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        6 => array(
            'var' => 'noteStatuses',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRUCT,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::STRUCT,
                'class' => '\NoteStatus',
                ),
        ),
    );

    /**
     * @var \Square[]
     */
    public $squares = null;
    /**
     * @var array
     */
    public $members = null;
    /**
     * @var array
     */
    public $authorities = null;
    /**
     * @var array
     */
    public $statuses = null;
    /**
     * @var string
     */
    public $continuationToken = null;
    /**
     * @var array
     */
    public $noteStatuses = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['squares'])) {
                $this->squares = $vals['squares'];
            }
            if (isset($vals['members'])) {
                $this->members = $vals['members'];
            }
            if (isset($vals['authorities'])) {
                $this->authorities = $vals['authorities'];
            }
            if (isset($vals['statuses'])) {
                $this->statuses = $vals['statuses'];
            }
            if (isset($vals['continuationToken'])) {
                $this->continuationToken = $vals['continuationToken'];
            }
            if (isset($vals['noteStatuses'])) {
                $this->noteStatuses = $vals['noteStatuses'];
            }
        }
    }

    public function getName()
    {
        return 'GetJoinedSquaresResponse';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::LST) {
                        $this->squares = array();
                        $_size524 = 0;
                        $_etype527 = 0;
                        $xfer += $input->readListBegin($_etype527, $_size524);
                        for ($_i528 = 0; $_i528 < $_size524; ++$_i528) {
                            $elem529 = null;
                            $elem529 = new \Square();
                            $xfer += $elem529->read($input);
                            $this->squares []= $elem529;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::MAP) {
                        $this->members = array();
                        $_size530 = 0;
                        $_ktype531 = 0;
                        $_vtype532 = 0;
                        $xfer += $input->readMapBegin($_ktype531, $_vtype532, $_size530);
                        for ($_i534 = 0; $_i534 < $_size530; ++$_i534) {
                            $key535 = '';
                            $val536 = new \SquareMember();
                            $xfer += $input->readString($key535);
                            $val536 = new \SquareMember();
                            $xfer += $val536->read($input);
                            $this->members[$key535] = $val536;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::MAP) {
                        $this->authorities = array();
                        $_size537 = 0;
                        $_ktype538 = 0;
                        $_vtype539 = 0;
                        $xfer += $input->readMapBegin($_ktype538, $_vtype539, $_size537);
                        for ($_i541 = 0; $_i541 < $_size537; ++$_i541) {
                            $key542 = '';
                            $val543 = new \SquareAuthority();
                            $xfer += $input->readString($key542);
                            $val543 = new \SquareAuthority();
                            $xfer += $val543->read($input);
                            $this->authorities[$key542] = $val543;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::MAP) {
                        $this->statuses = array();
                        $_size544 = 0;
                        $_ktype545 = 0;
                        $_vtype546 = 0;
                        $xfer += $input->readMapBegin($_ktype545, $_vtype546, $_size544);
                        for ($_i548 = 0; $_i548 < $_size544; ++$_i548) {
                            $key549 = '';
                            $val550 = new \SquareStatus();
                            $xfer += $input->readString($key549);
                            $val550 = new \SquareStatus();
                            $xfer += $val550->read($input);
                            $this->statuses[$key549] = $val550;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->continuationToken);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::MAP) {
                        $this->noteStatuses = array();
                        $_size551 = 0;
                        $_ktype552 = 0;
                        $_vtype553 = 0;
                        $xfer += $input->readMapBegin($_ktype552, $_vtype553, $_size551);
                        for ($_i555 = 0; $_i555 < $_size551; ++$_i555) {
                            $key556 = '';
                            $val557 = new \NoteStatus();
                            $xfer += $input->readString($key556);
                            $val557 = new \NoteStatus();
                            $xfer += $val557->read($input);
                            $this->noteStatuses[$key556] = $val557;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('GetJoinedSquaresResponse');
        if ($this->squares !== null) {
            if (!is_array($this->squares)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('squares', TType::LST, 1);
            $output->writeListBegin(TType::STRUCT, count($this->squares));
            foreach ($this->squares as $iter558) {
                $xfer += $iter558->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->members !== null) {
            if (!is_array($this->members)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('members', TType::MAP, 2);
            $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->members));
            foreach ($this->members as $kiter559 => $viter560) {
                $xfer += $output->writeString($kiter559);
                $xfer += $viter560->write($output);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->authorities !== null) {
            if (!is_array($this->authorities)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('authorities', TType::MAP, 3);
            $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->authorities));
            foreach ($this->authorities as $kiter561 => $viter562) {
                $xfer += $output->writeString($kiter561);
                $xfer += $viter562->write($output);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->statuses !== null) {
            if (!is_array($this->statuses)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('statuses', TType::MAP, 4);
            $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->statuses));
            foreach ($this->statuses as $kiter563 => $viter564) {
                $xfer += $output->writeString($kiter563);
                $xfer += $viter564->write($output);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->continuationToken !== null) {
            $xfer += $output->writeFieldBegin('continuationToken', TType::STRING, 5);
            $xfer += $output->writeString($this->continuationToken);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->noteStatuses !== null) {
            if (!is_array($this->noteStatuses)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('noteStatuses', TType::MAP, 6);
            $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->noteStatuses));
            foreach ($this->noteStatuses as $kiter565 => $viter566) {
                $xfer += $output->writeString($kiter565);
                $xfer += $viter566->write($output);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
