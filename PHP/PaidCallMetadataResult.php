<?php
/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class PaidCallMetadataResult
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'currencyExchangeRates',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\PaidCallCurrencyExchangeRate',
                ),
        ),
        2 => array(
            'var' => 'recommendedCountryCodes',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        3 => array(
            'var' => 'adCountries',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\PaidCallAdCountry',
                ),
        ),
    );

    /**
     * @var \PaidCallCurrencyExchangeRate[]
     */
    public $currencyExchangeRates = null;
    /**
     * @var string[]
     */
    public $recommendedCountryCodes = null;
    /**
     * @var \PaidCallAdCountry[]
     */
    public $adCountries = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['currencyExchangeRates'])) {
                $this->currencyExchangeRates = $vals['currencyExchangeRates'];
            }
            if (isset($vals['recommendedCountryCodes'])) {
                $this->recommendedCountryCodes = $vals['recommendedCountryCodes'];
            }
            if (isset($vals['adCountries'])) {
                $this->adCountries = $vals['adCountries'];
            }
        }
    }

    public function getName()
    {
        return 'PaidCallMetadataResult';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::LST) {
                        $this->currencyExchangeRates = array();
                        $_size36 = 0;
                        $_etype39 = 0;
                        $xfer += $input->readListBegin($_etype39, $_size36);
                        for ($_i40 = 0; $_i40 < $_size36; ++$_i40) {
                            $elem41 = null;
                            $elem41 = new \PaidCallCurrencyExchangeRate();
                            $xfer += $elem41->read($input);
                            $this->currencyExchangeRates []= $elem41;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::LST) {
                        $this->recommendedCountryCodes = array();
                        $_size42 = 0;
                        $_etype45 = 0;
                        $xfer += $input->readListBegin($_etype45, $_size42);
                        for ($_i46 = 0; $_i46 < $_size42; ++$_i46) {
                            $elem47 = null;
                            $xfer += $input->readString($elem47);
                            $this->recommendedCountryCodes []= $elem47;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::LST) {
                        $this->adCountries = array();
                        $_size48 = 0;
                        $_etype51 = 0;
                        $xfer += $input->readListBegin($_etype51, $_size48);
                        for ($_i52 = 0; $_i52 < $_size48; ++$_i52) {
                            $elem53 = null;
                            $elem53 = new \PaidCallAdCountry();
                            $xfer += $elem53->read($input);
                            $this->adCountries []= $elem53;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('PaidCallMetadataResult');
        if ($this->currencyExchangeRates !== null) {
            if (!is_array($this->currencyExchangeRates)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('currencyExchangeRates', TType::LST, 1);
            $output->writeListBegin(TType::STRUCT, count($this->currencyExchangeRates));
            foreach ($this->currencyExchangeRates as $iter54) {
                $xfer += $iter54->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->recommendedCountryCodes !== null) {
            if (!is_array($this->recommendedCountryCodes)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('recommendedCountryCodes', TType::LST, 2);
            $output->writeListBegin(TType::STRING, count($this->recommendedCountryCodes));
            foreach ($this->recommendedCountryCodes as $iter55) {
                $xfer += $output->writeString($iter55);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->adCountries !== null) {
            if (!is_array($this->adCountries)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('adCountries', TType::LST, 3);
            $output->writeListBegin(TType::STRUCT, count($this->adCountries));
            foreach ($this->adCountries as $iter56) {
                $xfer += $iter56->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
