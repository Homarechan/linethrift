<?php
/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class PaidCallDialing
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'type',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        2 => array(
            'var' => 'dialedNumber',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'serviceDomain',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'productType',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        5 => array(
            'var' => 'productName',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        6 => array(
            'var' => 'multipleProduct',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        7 => array(
            'var' => 'callerIdStatus',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        10 => array(
            'var' => 'balance',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        11 => array(
            'var' => 'unit',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        12 => array(
            'var' => 'rate',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        13 => array(
            'var' => 'displayCode',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        14 => array(
            'var' => 'calledNumber',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        15 => array(
            'var' => 'calleeNationalNumber',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        16 => array(
            'var' => 'calleeCallingCode',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        17 => array(
            'var' => 'rateDivision',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        20 => array(
            'var' => 'adMaxMin',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        21 => array(
            'var' => 'adRemains',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        22 => array(
            'var' => 'adSessionId',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
    );

    /**
     * @var int
     */
    public $type = null;
    /**
     * @var string
     */
    public $dialedNumber = null;
    /**
     * @var string
     */
    public $serviceDomain = null;
    /**
     * @var int
     */
    public $productType = null;
    /**
     * @var string
     */
    public $productName = null;
    /**
     * @var bool
     */
    public $multipleProduct = null;
    /**
     * @var int
     */
    public $callerIdStatus = null;
    /**
     * @var int
     */
    public $balance = null;
    /**
     * @var string
     */
    public $unit = null;
    /**
     * @var int
     */
    public $rate = null;
    /**
     * @var string
     */
    public $displayCode = null;
    /**
     * @var string
     */
    public $calledNumber = null;
    /**
     * @var string
     */
    public $calleeNationalNumber = null;
    /**
     * @var string
     */
    public $calleeCallingCode = null;
    /**
     * @var string
     */
    public $rateDivision = null;
    /**
     * @var int
     */
    public $adMaxMin = null;
    /**
     * @var int
     */
    public $adRemains = null;
    /**
     * @var string
     */
    public $adSessionId = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['type'])) {
                $this->type = $vals['type'];
            }
            if (isset($vals['dialedNumber'])) {
                $this->dialedNumber = $vals['dialedNumber'];
            }
            if (isset($vals['serviceDomain'])) {
                $this->serviceDomain = $vals['serviceDomain'];
            }
            if (isset($vals['productType'])) {
                $this->productType = $vals['productType'];
            }
            if (isset($vals['productName'])) {
                $this->productName = $vals['productName'];
            }
            if (isset($vals['multipleProduct'])) {
                $this->multipleProduct = $vals['multipleProduct'];
            }
            if (isset($vals['callerIdStatus'])) {
                $this->callerIdStatus = $vals['callerIdStatus'];
            }
            if (isset($vals['balance'])) {
                $this->balance = $vals['balance'];
            }
            if (isset($vals['unit'])) {
                $this->unit = $vals['unit'];
            }
            if (isset($vals['rate'])) {
                $this->rate = $vals['rate'];
            }
            if (isset($vals['displayCode'])) {
                $this->displayCode = $vals['displayCode'];
            }
            if (isset($vals['calledNumber'])) {
                $this->calledNumber = $vals['calledNumber'];
            }
            if (isset($vals['calleeNationalNumber'])) {
                $this->calleeNationalNumber = $vals['calleeNationalNumber'];
            }
            if (isset($vals['calleeCallingCode'])) {
                $this->calleeCallingCode = $vals['calleeCallingCode'];
            }
            if (isset($vals['rateDivision'])) {
                $this->rateDivision = $vals['rateDivision'];
            }
            if (isset($vals['adMaxMin'])) {
                $this->adMaxMin = $vals['adMaxMin'];
            }
            if (isset($vals['adRemains'])) {
                $this->adRemains = $vals['adRemains'];
            }
            if (isset($vals['adSessionId'])) {
                $this->adSessionId = $vals['adSessionId'];
            }
        }
    }

    public function getName()
    {
        return 'PaidCallDialing';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->type);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->dialedNumber);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->serviceDomain);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->productType);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->productName);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->multipleProduct);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->callerIdStatus);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->balance);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->unit);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 12:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->rate);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 13:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->displayCode);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 14:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->calledNumber);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 15:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->calleeNationalNumber);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 16:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->calleeCallingCode);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 17:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->rateDivision);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 20:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->adMaxMin);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 21:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->adRemains);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 22:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->adSessionId);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('PaidCallDialing');
        if ($this->type !== null) {
            $xfer += $output->writeFieldBegin('type', TType::I32, 1);
            $xfer += $output->writeI32($this->type);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->dialedNumber !== null) {
            $xfer += $output->writeFieldBegin('dialedNumber', TType::STRING, 2);
            $xfer += $output->writeString($this->dialedNumber);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->serviceDomain !== null) {
            $xfer += $output->writeFieldBegin('serviceDomain', TType::STRING, 3);
            $xfer += $output->writeString($this->serviceDomain);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->productType !== null) {
            $xfer += $output->writeFieldBegin('productType', TType::I32, 4);
            $xfer += $output->writeI32($this->productType);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->productName !== null) {
            $xfer += $output->writeFieldBegin('productName', TType::STRING, 5);
            $xfer += $output->writeString($this->productName);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->multipleProduct !== null) {
            $xfer += $output->writeFieldBegin('multipleProduct', TType::BOOL, 6);
            $xfer += $output->writeBool($this->multipleProduct);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->callerIdStatus !== null) {
            $xfer += $output->writeFieldBegin('callerIdStatus', TType::I32, 7);
            $xfer += $output->writeI32($this->callerIdStatus);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->balance !== null) {
            $xfer += $output->writeFieldBegin('balance', TType::I32, 10);
            $xfer += $output->writeI32($this->balance);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->unit !== null) {
            $xfer += $output->writeFieldBegin('unit', TType::STRING, 11);
            $xfer += $output->writeString($this->unit);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->rate !== null) {
            $xfer += $output->writeFieldBegin('rate', TType::I32, 12);
            $xfer += $output->writeI32($this->rate);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->displayCode !== null) {
            $xfer += $output->writeFieldBegin('displayCode', TType::STRING, 13);
            $xfer += $output->writeString($this->displayCode);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->calledNumber !== null) {
            $xfer += $output->writeFieldBegin('calledNumber', TType::STRING, 14);
            $xfer += $output->writeString($this->calledNumber);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->calleeNationalNumber !== null) {
            $xfer += $output->writeFieldBegin('calleeNationalNumber', TType::STRING, 15);
            $xfer += $output->writeString($this->calleeNationalNumber);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->calleeCallingCode !== null) {
            $xfer += $output->writeFieldBegin('calleeCallingCode', TType::STRING, 16);
            $xfer += $output->writeString($this->calleeCallingCode);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->rateDivision !== null) {
            $xfer += $output->writeFieldBegin('rateDivision', TType::STRING, 17);
            $xfer += $output->writeString($this->rateDivision);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->adMaxMin !== null) {
            $xfer += $output->writeFieldBegin('adMaxMin', TType::I32, 20);
            $xfer += $output->writeI32($this->adMaxMin);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->adRemains !== null) {
            $xfer += $output->writeFieldBegin('adRemains', TType::I32, 21);
            $xfer += $output->writeI32($this->adRemains);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->adSessionId !== null) {
            $xfer += $output->writeFieldBegin('adSessionId', TType::STRING, 22);
            $xfer += $output->writeString($this->adSessionId);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
