<?php
/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

interface ChannelServiceIf
{
    /**
     * @param string $channelId
     * @return \OTPResult
     * @throws \ChannelException
     */
    public function issueOTP($channelId);
    /**
     * @param string $channelId
     * @return \ChannelToken
     * @throws \ChannelException
     */
    public function approveChannelAndIssueChannelToken($channelId);
    /**
     * @param string $channelId
     * @param string $otpId
     * @return string
     * @throws \ChannelException
     */
    public function approveChannelAndIssueRequestToken($channelId, $otpId);
    /**
     * @param int $localRev
     * @return \NotificationFetchResult
     * @throws \ChannelException
     */
    public function fetchNotificationItems($localRev);
    /**
     * @param int $lastSynced
     * @param string $locale
     * @return \ApprovedChannelInfos
     * @throws \ChannelException
     */
    public function getApprovedChannels($lastSynced, $locale);
    /**
     * @param string $channelId
     * @param string $locale
     * @return \ChannelInfo
     * @throws \ChannelException
     */
    public function getChannelInfo($channelId, $locale);
    /**
     * @param string $channelId
     * @param string $locale
     * @return \ChannelNotificationSetting
     * @throws \ChannelException
     */
    public function getChannelNotificationSetting($channelId, $locale);
    /**
     * @param string $locale
     * @return \ChannelNotificationSetting[]
     * @throws \ChannelException
     */
    public function getChannelNotificationSettings($locale);
    /**
     * @param int $lastSynced
     * @param string $locale
     * @return \ChannelInfos
     * @throws \ChannelException
     */
    public function getChannels($lastSynced, $locale);
    /**
     * @param int $lastSynced
     * @return \ChannelDomains
     * @throws \ChannelException
     */
    public function getDomains($lastSynced);
    /**
     * @param string[] $channelIds
     * @return \FriendChannelMatricesResponse
     * @throws \ChannelException
     */
    public function getFriendChannelMatrices(array $channelIds);
    /**
     * @param \ChannelSettings $channelSettings
     * @return bool
     * @throws \ChannelException
     */
    public function updateChannelSettings(\ChannelSettings $channelSettings);
    /**
     * @param int $lastSynced
     * @return \ChannelDomains
     * @throws \ChannelException
     */
    public function getCommonDomains($lastSynced);
    /**
     * @param int $localRev
     * @return int
     * @throws \ChannelException
     */
    public function getNotificationBadgeCount($localRev);
    /**
     * @param string $channelId
     * @return \ChannelToken
     * @throws \ChannelException
     */
    public function issueChannelToken($channelId);
    /**
     * @param string $channelId
     * @param string $otpId
     * @return string
     * @throws \ChannelException
     */
    public function issueRequestToken($channelId, $otpId);
    /**
     * @param string $channelId
     * @param string $otpId
     * @param string[] $authScheme
     * @param string $returnUrl
     * @return \RequestTokenResponse
     * @throws \ChannelException
     */
    public function issueRequestTokenWithAuthScheme($channelId, $otpId, array $authScheme, $returnUrl);
    /**
     * @param string $channelId
     * @param string $otpId
     * @param string $redirectUrl
     * @return string
     * @throws \ChannelException
     */
    public function issueRequestTokenForAutoLogin($channelId, $otpId, $redirectUrl);
    /**
     * @param \ChannelIdWithLastUpdated[] $channelIds
     * @return string[]
     * @throws \ChannelException
     */
    public function getUpdatedChannelIds(array $channelIds);
    /**
     * @param \CoinUseReservation $request
     * @param string $locale
     * @return string
     * @throws \ChannelException
     */
    public function reserveCoinUse(\CoinUseReservation $request, $locale);
    /**
     * @param string $channelId
     * @throws \ChannelException
     */
    public function revokeChannel($channelId);
    /**
     * @param int $lastSynced
     * @param string $locale
     * @return \ChannelSyncDatas
     * @throws \ChannelException
     */
    public function syncChannelData($lastSynced, $locale);
    /**
     * @param \ChannelNotificationSetting[] $setting
     * @throws \ChannelException
     */
    public function updateChannelNotificationSetting(array $setting);
}
