<?php
/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

interface TalkServiceIf
{
    /**
     * @param string[] $chatRoomMids
     * @return array
     * @throws \TalkException
     */
    public function getChatRoomAnnouncementsBulk(array $chatRoomMids);
    /**
     * @param string $chatRoomMid
     * @return \ChatRoomAnnouncement[]
     * @throws \TalkException
     */
    public function getChatRoomAnnouncements($chatRoomMid);
    /**
     * @param int $reqSeq
     * @param string $chatRoomMid
     * @param int $type
     * @param \ChatRoomAnnouncementContents $contents
     * @return \ChatRoomAnnouncement
     * @throws \TalkException
     */
    public function createChatRoomAnnouncement($reqSeq, $chatRoomMid, $type, \ChatRoomAnnouncementContents $contents);
    /**
     * @param int $reqSeq
     * @param string $chatRoomMid
     * @param int $announcementSeq
     * @throws \TalkException
     */
    public function removeChatRoomAnnouncement($reqSeq, $chatRoomMid, $announcementSeq);
    /**
     * @param int $seq
     * @param string $messageId
     * @throws \TalkException
     */
    public function unsendMessage($seq, $messageId);
    /**
     * @param string $groupId
     * @return \Group
     * @throws \TalkException
     */
    public function getGroupWithoutMembers($groupId);
    /**
     * @param int $reqSeq
     * @param string $senderMid
     * @param string $messageId
     * @throws \TalkException
     */
    public function requestResendMessage($reqSeq, $senderMid, $messageId);
    /**
     * @param int $reqSeq
     * @param string $receiverMid
     * @param string $originalMessageId
     * @param \Message $resendMessage
     * @param int $errorCode
     * @throws \TalkException
     */
    public function respondResendMessage($reqSeq, $receiverMid, $originalMessageId, \Message $resendMessage, $errorCode);
    /**
     * @param int $reqSeq
     * @param string $groupId
     * @throws \TalkException
     */
    public function acceptGroupInvitation($reqSeq, $groupId);
    /**
     * @param int $reqSeq
     * @param string $GroupMid
     * @param string $ticketId
     * @throws \TalkException
     */
    public function acceptGroupInvitationByTicket($reqSeq, $GroupMid, $ticketId);
    /**
     * @param string $sessionId
     * @param string[] $ids
     * @throws \TalkException
     */
    public function acceptProximityMatches($sessionId, array $ids);
    /**
     * @param string $to
     * @return string[]
     * @throws \TalkException
     */
    public function acquireCallRoute($to);
    /**
     * @param string $to
     * @return string
     * @throws \TalkException
     */
    public function acquireCallTicket($to);
    /**
     * @param int $featureType
     * @return string
     * @throws \TalkException
     */
    public function acquireEncryptedAccessToken($featureType);
    /**
     * @param int $snsIdType
     * @param string $snsAccessToken
     * @return string
     * @throws \TalkException
     */
    public function addSnsId($snsIdType, $snsAccessToken);
    /**
     * @param int $reqSeq
     * @param string $id
     * @throws \TalkException
     */
    public function blockContact($reqSeq, $id);
    /**
     * @param int $reqSeq
     * @param string $id
     * @throws \TalkException
     */
    public function blockRecommendation($reqSeq, $id);
    /**
     * @param int $reqSeq
     * @param string $groupId
     * @param string[] $contactIds
     * @throws \TalkException
     */
    public function cancelGroupInvitation($reqSeq, $groupId, array $contactIds);
    /**
     * @param string $sessionId
     * @param int $method
     * @return \VerificationSessionData
     * @throws \TalkException
     */
    public function changeVerificationMethod($sessionId, $method);
    /**
     * @throws \TalkException
     */
    public function clearIdentityCredential();
    /**
     * @param string $channelId
     * @param string $messageBoxId
     * @throws \TalkException
     */
    public function clearMessageBox($channelId, $messageBoxId);
    /**
     * @param string $sessionId
     * @throws \TalkException
     */
    public function closeProximityMatch($sessionId);
    /**
     * @param int $seq
     * @param string $messageId
     * @param string[] $receiverMids
     * @return array
     * @throws \TalkException
     */
    public function commitSendMessage($seq, $messageId, array $receiverMids);
    /**
     * @param int $seq
     * @param string[] $messageIds
     * @param string[] $receiverMids
     * @return array
     * @throws \TalkException
     */
    public function commitSendMessages($seq, array $messageIds, array $receiverMids);
    /**
     * @param int $seq
     * @param int[] $attrs
     * @param string[] $receiverMids
     * @return array
     * @throws \TalkException
     */
    public function commitUpdateProfile($seq, array $attrs, array $receiverMids);
    /**
     * @param string $verifier
     * @param string $pinCode
     * @throws \TalkException
     */
    public function confirmEmail($verifier, $pinCode);
    /**
     * @param int $seq
     * @param string $name
     * @param string[] $contactIds
     * @return \Group
     * @throws \TalkException
     */
    public function createGroup($seq, $name, array $contactIds);
    /**
     * @param string $url
     * @param string $characterSet
     * @param int $imageSize
     * @param int $x
     * @param int $y
     * @param int $width
     * @param int $height
     * @return string
     * @throws \TalkException
     */
    public function createQrcodeBase64Image($url, $characterSet, $imageSize, $x, $y, $width, $height);
    /**
     * @param int $reqSeq
     * @param string[] $contactIds
     * @return \Room
     * @throws \TalkException
     */
    public function createRoom($reqSeq, array $contactIds);
    /**
     * @return string
     * @throws \TalkException
     */
    public function createSession();
    /**
     * @param int $lastFetchedIndex
     * @return \Announcement[]
     * @throws \TalkException
     */
    public function fetchAnnouncements($lastFetchedIndex);
    /**
     * @param int $localTs
     * @param int $count
     * @return \Message[]
     * @throws \TalkException
     */
    public function fetchMessages($localTs, $count);
    /**
     * @param int $localRev
     * @param int $count
     * @return \Operation[]
     * @throws \ShouldSyncException
     */
    public function fetchOperations($localRev, $count);
    /**
     * @param int $localRev
     * @param int $count
     * @param int $globalRev
     * @param int $individualRev
     * @return \Operation[]
     * @throws \ShouldSyncException
     */
    public function fetchOps($localRev, $count, $globalRev, $individualRev);
    /**
     * @param int $reqSeq
     * @param string[] $emails
     * @return array
     * @throws \TalkException
     */
    public function findAndAddContactsByEmail($reqSeq, array $emails);
    /**
     * @param int $reqSeq
     * @param string $mid
     * @param int $type
     * @param string $reference
     * @return array
     * @throws \TalkException
     */
    public function findAndAddContactsByMid($reqSeq, $mid, $type, $reference);
    /**
     * @param string $ticketId
     * @return \Group
     * @throws \TalkException
     */
    public function findGroupByTicketV2($ticketId);
    /**
     * @param int $reqSeq
     * @param string[] $phones
     * @return array
     * @throws \TalkException
     */
    public function findAndAddContactsByPhone($reqSeq, array $phones);
    /**
     * @param int $direction
     * @param int $lastSeenSeqId
     * @return \FriendRequest[]
     * @throws \TalkException
     */
    public function getFriendRequests($direction, $lastSeenSeqId);
    /**
     * @param int $direction
     * @param string $midOrEMid
     * @throws \TalkException
     */
    public function removeFriendRequest($direction, $midOrEMid);
    /**
     * @param int $reqSeq
     * @param string $userid
     * @return array
     * @throws \TalkException
     */
    public function findAndAddContactsByUserid($reqSeq, $userid);
    /**
     * @param string $userid
     * @return \Contact
     * @throws \TalkException
     */
    public function findContactByUserid($userid);
    /**
     * @param string $ticketIdWithTag
     * @return \Contact
     * @throws \TalkException
     */
    public function findContactByUserTicket($ticketIdWithTag);
    /**
     * @param string[] $emails
     * @return array
     * @throws \TalkException
     */
    public function findContactsByEmail(array $emails);
    /**
     * @param string[] $phones
     * @return array
     * @throws \TalkException
     */
    public function findContactsByPhone(array $phones);
    /**
     * @param int $snsIdType
     * @param string $snsAccessToken
     * @param string $udidHash
     * @return \SnsIdUserStatus
     * @throws \TalkException
     */
    public function findSnsIdUserStatus($snsIdType, $snsAccessToken, $udidHash);
    /**
     * @param string $sessionId
     * @throws \TalkException
     */
    public function finishUpdateVerification($sessionId);
    /**
     * @param int $expirationTime
     * @param int $maxUseCount
     * @return \Ticket
     * @throws \TalkException
     */
    public function generateUserTicket($expirationTime, $maxUseCount);
    /**
     * @param int $seq
     * @param string $chatId
     * @param string $messageId
     * @param int $sessionId
     * @throws \TalkException
     */
    public function destroyMessage($seq, $chatId, $messageId, $sessionId);
    /**
     * @param string $sessionId
     * @return string[]
     * @throws \TalkException
     */
    public function getAcceptedProximityMatches($sessionId);
    /**
     * @return string[]
     * @throws \TalkException
     */
    public function getActiveBuddySubscriberIds();
    /**
     * @return string[]
     * @throws \TalkException
     */
    public function getAllContactIds();
    /**
     * @param bool $keepLoggedIn
     * @param string $systemName
     * @return \AuthQrcode
     * @throws \TalkException
     */
    public function getAuthQrcode($keepLoggedIn, $systemName);
    /**
     * @return string[]
     * @throws \TalkException
     */
    public function getBlockedContactIds();
    /**
     * @param string $sessionId
     * @param string $migrationPincodeSessionId
     * @return \RegisterWithPhoneNumberResult
     * @throws \TalkException
     */
    public function registerWithPhoneNumber($sessionId, $migrationPincodeSessionId);
    /**
     * @param string $sessionId
     * @param string $keynm
     * @param string $encrypted
     * @return \RegisterWithPhoneNumberResult
     * @throws \TalkException
     */
    public function registerWithPhoneNumberAndPassword($sessionId, $keynm, $encrypted);
    /**
     * @return \AnalyticsInfo
     * @throws \TalkException
     */
    public function getAnalyticsInfo();
    /**
     * @param int $reqSeq
     * @param int $category
     * @param int $count
     * @throws \TalkException
     */
    public function reportClientStatistics($reqSeq, $category, $count);
    /**
     * @param string $verifierFromPhone
     * @param string $pinCodeForPhone
     * @param string $verifierFromLogin
     * @return string
     * @throws \TalkException
     */
    public function verifyPhoneNumberForLogin($verifierFromPhone, $pinCodeForPhone, $verifierFromLogin);
    /**
     * @param string $sessionId
     * @param string $pinCode
     * @param string $udidHash
     * @param string $migrationPincodeSessionId
     * @param string $oldUdidHash
     * @return \PhoneVerificationResult
     * @throws \TalkException
     */
    public function verifyPhoneNumber($sessionId, $pinCode, $udidHash, $migrationPincodeSessionId, $oldUdidHash);
    /**
     * @param int $start
     * @param int $count
     * @return string[]
     * @throws \TalkException
     */
    public function getBlockedContactIdsByRange($start, $count);
    /**
     * @return string[]
     * @throws \TalkException
     */
    public function getBlockedRecommendationIds();
    /**
     * @return string[]
     * @throws \TalkException
     */
    public function getBuddyBlockerIds();
    /**
     * @param string $mid
     * @param int $index
     * @return \Geolocation
     * @throws \TalkException
     */
    public function getBuddyLocation($mid, $index);
    /**
     * @param int $timestamp
     * @return \CompactContact[]
     * @throws \TalkException
     */
    public function getCompactContactsModifiedSince($timestamp);
    /**
     * @param string $groupId
     * @return \Group
     * @throws \TalkException
     */
    public function getCompactGroup($groupId);
    /**
     * @param string $roomId
     * @return \Room
     * @throws \TalkException
     */
    public function getCompactRoom($roomId);
    /**
     * @param string $id
     * @return \Contact
     * @throws \TalkException
     */
    public function getContact($id);
    /**
     * @param string[] $ids
     * @return \Contact[]
     * @throws \TalkException
     */
    public function getContacts(array $ids);
    /**
     * @param string $id
     * @return \Contact
     * @throws \TalkException
     */
    public function getContactWithFriendRequestStatus($id);
    /**
     * @return string
     * @throws \TalkException
     */
    public function getCountryWithRequestIp();
    /**
     * @return string[]
     * @throws \TalkException
     */
    public function getFavoriteMids();
    /**
     * @param string $groupId
     * @return \Group
     * @throws \TalkException
     */
    public function getGroup($groupId);
    /**
     * @return string[]
     * @throws \TalkException
     */
    public function getGroupIdsInvited();
    /**
     * @return string[]
     * @throws \TalkException
     */
    public function getGroupIdsJoined();
    /**
     * @param string[] $groupIds
     * @return \Group[]
     * @throws \TalkException
     */
    public function getGroups(array $groupIds);
    /**
     * @return string[]
     * @throws \TalkException
     */
    public function getHiddenContactMids();
    /**
     * @return string
     * @throws \TalkException
     */
    public function getIdentityIdentifier();
    /**
     * @return int
     * @throws \TalkException
     */
    public function getLastAnnouncementIndex();
    /**
     * @return int
     * @throws \TalkException
     */
    public function getLastOpRevision();
    /**
     * @return \SuggestDictionaryRevisions
     * @throws \TalkException
     */
    public function getSuggestRevisions();
    /**
     * @param string $messageBoxId
     * @param \MessageBoxV2MessageId $endMessageId
     * @param int $messagesCount
     * @return \Message[]
     * @throws \TalkException
     */
    public function getPreviousMessagesV2WithReadCount($messageBoxId, \MessageBoxV2MessageId $endMessageId, $messagesCount);
    /**
     * @param string $channelId
     * @param string $messageBoxId
     * @param int $lastMessagesCount
     * @return \TMessageBox
     * @throws \TalkException
     */
    public function getMessageBox($channelId, $messageBoxId, $lastMessagesCount);
    /**
     * @param string $mid
     * @return \TMessageBoxWrapUp
     * @throws \TalkException
     */
    public function getMessageBoxCompactWrapUp($mid);
    /**
     * @param int $start
     * @param int $messageBoxCount
     * @return \TMessageBoxWrapUpResponse
     * @throws \TalkException
     */
    public function getMessageBoxCompactWrapUpList($start, $messageBoxCount);
    /**
     * @param string $channelId
     * @param int $lastMessagesCount
     * @return \TMessageBox[]
     * @throws \TalkException
     */
    public function getMessageBoxList($channelId, $lastMessagesCount);
    /**
     * @param string $channelId
     * @param int $lastMessagesCount
     * @param int $status
     * @return \TMessageBox[]
     * @throws \TalkException
     */
    public function getMessageBoxListByStatus($channelId, $lastMessagesCount, $status);
    /**
     * @param string $mid
     * @return \TMessageBoxWrapUp
     * @throws \TalkException
     */
    public function getMessageBoxWrapUp($mid);
    /**
     * @param int $start
     * @param int $messageBoxCount
     * @return \TMessageBoxWrapUpResponse
     * @throws \TalkException
     */
    public function getMessageBoxWrapUpList($start, $messageBoxCount);
    /**
     * @param string $channelId
     * @param string $messageBoxId
     * @param int $startSeq
     * @param int $endSeq
     * @return \Message[]
     * @throws \TalkException
     */
    public function getMessagesBySequenceNumber($channelId, $messageBoxId, $startSeq, $endSeq);
    /**
     * @param string $messageBoxId
     * @param int $startSeq
     * @param int $messagesCount
     * @return \Message[]
     * @throws \TalkException
     */
    public function getNextMessages($messageBoxId, $startSeq, $messagesCount);
    /**
     * @param int $carrier
     * @return int[]
     * @throws \TalkException
     */
    public function getNotificationPolicy($carrier);
    /**
     * @param string $messageBoxId
     * @param int $endSeq
     * @param int $messagesCount
     * @return \Message[]
     * @throws \TalkException
     */
    public function getPreviousMessages($messageBoxId, $endSeq, $messagesCount);
    /**
     * @return \Profile
     * @throws \TalkException
     */
    public function getProfile();
    /**
     * @param string $sessionId
     * @return \ProximityMatchCandidateResult
     * @throws \TalkException
     */
    public function getProximityMatchCandidateList($sessionId);
    /**
     * @param string $sessionId
     * @return \Contact[]
     * @throws \TalkException
     */
    public function getProximityMatchCandidates($sessionId);
    /**
     * @param string $messageBoxId
     * @param int $messagesCount
     * @return \Message[]
     * @throws \TalkException
     */
    public function getRecentMessages($messageBoxId, $messagesCount);
    /**
     * @return string[]
     * @throws \TalkException
     */
    public function getRecommendationIds();
    /**
     * @param string $roomId
     * @return \Room
     * @throws \TalkException
     */
    public function getRoom($roomId);
    /**
     * @param int $provider
     * @return \RSAKey
     * @throws \TalkException
     */
    public function getRSAKeyInfo($provider);
    /**
     * @return int
     * @throws \TalkException
     */
    public function getServerTime();
    /**
     * @return \LoginSession[]
     * @throws \TalkException
     */
    public function getSessions();
    /**
     * @return \Settings
     * @throws \TalkException
     */
    public function getSettings();
    /**
     * @param string[] $groupIds
     * @return \Group[]
     * @throws \TalkException
     */
    public function getGroupsV2(array $groupIds);
    /**
     * @param int $attrBitset
     * @return \Settings
     * @throws \TalkException
     */
    public function getSettingsAttributes($attrBitset);
    /**
     * @return \SystemConfiguration
     * @throws \TalkException
     */
    public function getSystemConfiguration();
    /**
     * @return \Ticket
     * @throws \TalkException
     */
    public function getUserTicket();
    /**
     * @param string $invitationHash
     * @return \WapInvitation
     * @throws \TalkException
     */
    public function getWapInvitation($invitationHash);
    /**
     * @throws \TalkException
     */
    public function invalidateUserTicket();
    /**
     * @param string[] $phoneNumberList
     * @throws \TalkException
     */
    public function inviteFriendsBySms(array $phoneNumberList);
    /**
     * @param int $reqSeq
     * @param string $groupId
     * @param string[] $contactIds
     * @throws \TalkException
     */
    public function inviteIntoGroup($reqSeq, $groupId, array $contactIds);
    /**
     * @param int $reqSeq
     * @param string $roomId
     * @param string[] $contactIds
     * @throws \TalkException
     */
    public function inviteIntoRoom($reqSeq, $roomId, array $contactIds);
    /**
     * @param int $reqSeq
     * @param string $email
     * @param string $name
     * @throws \TalkException
     */
    public function inviteViaEmail($reqSeq, $email, $name);
    /**
     * @param int $provider
     * @param string $identifier
     * @return bool
     * @throws \TalkException
     */
    public function isIdentityIdentifierAvailable($provider, $identifier);
    /**
     * @param string $userid
     * @return bool
     * @throws \TalkException
     */
    public function isUseridAvailable($userid);
    /**
     * @param int $reqSeq
     * @param string $groupId
     * @param string[] $contactIds
     * @throws \TalkException
     */
    public function kickoutFromGroup($reqSeq, $groupId, array $contactIds);
    /**
     * @param string $groupMid
     * @return string
     * @throws \TalkException
     */
    public function reissueGroupTicket($groupMid);
    /**
     * @param string $ticketId
     * @return \Group
     * @throws \TalkException
     */
    public function findGroupByTicket($ticketId);
    /**
     * @param int $reqSeq
     * @param string $groupId
     * @throws \TalkException
     */
    public function leaveGroup($reqSeq, $groupId);
    /**
     * @param int $reqSeq
     * @param string $roomId
     * @throws \TalkException
     */
    public function leaveRoom($reqSeq, $roomId);
    /**
     * @param int $identityProvider
     * @param string $identifier
     * @param string $password
     * @param bool $keepLoggedIn
     * @param string $accessLocation
     * @param string $systemName
     * @param string $certificate
     * @return string
     * @throws \TalkException
     */
    public function loginWithIdentityCredential($identityProvider, $identifier, $password, $keepLoggedIn, $accessLocation, $systemName, $certificate);
    /**
     * @param int $identityProvider
     * @param string $identifier
     * @param string $password
     * @param bool $keepLoggedIn
     * @param string $accessLocation
     * @param string $systemName
     * @param string $certificate
     * @return \LoginResult
     * @throws \TalkException
     */
    public function loginWithIdentityCredentialForCertificate($identityProvider, $identifier, $password, $keepLoggedIn, $accessLocation, $systemName, $certificate);
    /**
     * @param string $verifier
     * @return string
     * @throws \TalkException
     */
    public function loginWithVerifier($verifier);
    /**
     * @param string $verifier
     * @return \LoginResult
     * @throws \TalkException
     */
    public function loginWithVerifierForCerificate($verifier);
    /**
     * @param string $verifier
     * @return \LoginResult
     * @throws \TalkException
     */
    public function loginWithVerifierForCertificate($verifier);
    /**
     * @throws \TalkException
     */
    public function logout();
    /**
     * @param string $tokenKey
     * @throws \TalkException
     */
    public function logoutSession($tokenKey);
    /**
     * @throws \TalkException
     */
    public function noop();
    /**
     * @param array $paramMap
     * @throws \TalkException
     */
    public function notifiedRedirect(array $paramMap);
    /**
     * @param int $seq
     * @param string[] $receiverMids
     * @return array
     * @throws \TalkException
     */
    public function notifyBuddyOnAir($seq, array $receiverMids);
    /**
     * @param int $notificationStatus
     * @param string[] $receiverMids
     * @throws \TalkException
     */
    public function notifyIndividualEvent($notificationStatus, array $receiverMids);
    /**
     * @param string $udidHash
     * @param string $applicationTypeWithExtensions
     * @throws \TalkException
     */
    public function notifyInstalled($udidHash, $applicationTypeWithExtensions);
    /**
     * @param string $udidHash
     * @param string $applicationTypeWithExtensions
     * @throws \TalkException
     */
    public function notifyRegistrationComplete($udidHash, $applicationTypeWithExtensions);
    /**
     * @param int $lastRev
     * @param int $badge
     * @throws \TalkException
     */
    public function notifySleep($lastRev, $badge);
    /**
     * @param int $lastRev
     * @param \DeviceInfo $deviceInfo
     * @throws \TalkException
     */
    public function notifyUpdated($lastRev, \DeviceInfo $deviceInfo);
    /**
     * @param \Location $location
     * @return string
     * @throws \TalkException
     */
    public function openProximityMatch(\Location $location);
    /**
     * @param string $buddyId
     * @param string $registrarPassword
     * @return string
     * @throws \TalkException
     */
    public function registerBuddyUser($buddyId, $registrarPassword);
    /**
     * @param int $seq
     * @param string $userid
     * @throws \TalkException
     */
    public function registerBuddyUserid($seq, $userid);
    /**
     * @param string $sessionId
     * @return string
     * @throws \TalkException
     */
    public function registerDevice($sessionId);
    /**
     * @param string $sessionId
     * @param int $provider
     * @param string $identifier
     * @param string $verifier
     * @return string
     * @throws \TalkException
     */
    public function registerDeviceWithIdentityCredential($sessionId, $provider, $identifier, $verifier);
    /**
     * @param string $region
     * @param string $udidHash
     * @param \DeviceInfo $deviceInfo
     * @return string
     * @throws \TalkException
     */
    public function registerDeviceWithoutPhoneNumber($region, $udidHash, \DeviceInfo $deviceInfo);
    /**
     * @param string $region
     * @param string $udidHash
     * @param \DeviceInfo $deviceInfo
     * @param int $provider
     * @param string $identifier
     * @param string $verifier
     * @param string $mid
     * @param string $migrationPincodeSessionId
     * @return string
     * @throws \TalkException
     */
    public function registerDeviceWithoutPhoneNumberWithIdentityCredential($region, $udidHash, \DeviceInfo $deviceInfo, $provider, $identifier, $verifier, $mid, $migrationPincodeSessionId);
    /**
     * @param int $reqSeq
     * @param string $userid
     * @return bool
     * @throws \TalkException
     */
    public function registerUserid($reqSeq, $userid);
    /**
     * @param string $invitationHash
     * @param string $guidHash
     * @param string $email
     * @param \DeviceInfo $deviceInfo
     * @return string
     * @throws \TalkException
     */
    public function registerWapDevice($invitationHash, $guidHash, $email, \DeviceInfo $deviceInfo);
    /**
     * @param \IdentityCredential $identityCredential
     * @param string $region
     * @param string $udidHash
     * @param \DeviceInfo $deviceInfo
     * @return string
     * @throws \TalkException
     */
    public function registerWithExistingSnsIdAndIdentityCredential(\IdentityCredential $identityCredential, $region, $udidHash, \DeviceInfo $deviceInfo);
    /**
     * @param int $snsIdType
     * @param string $snsAccessToken
     * @param string $region
     * @param string $udidHash
     * @param \DeviceInfo $deviceInfo
     * @param string $mid
     * @return \RegisterWithSnsIdResult
     * @throws \TalkException
     */
    public function registerWithSnsId($snsIdType, $snsAccessToken, $region, $udidHash, \DeviceInfo $deviceInfo, $mid);
    /**
     * @param int $snsIdType
     * @param string $snsAccessToken
     * @param \IdentityCredential $identityCredential
     * @param string $region
     * @param string $udidHash
     * @param \DeviceInfo $deviceInfo
     * @return string
     * @throws \TalkException
     */
    public function registerWithSnsIdAndIdentityCredential($snsIdType, $snsAccessToken, \IdentityCredential $identityCredential, $region, $udidHash, \DeviceInfo $deviceInfo);
    /**
     * @return string
     * @throws \TalkException
     */
    public function reissueDeviceCredential();
    /**
     * @param int $expirationTime
     * @param int $maxUseCount
     * @return string
     * @throws \TalkException
     */
    public function reissueUserTicket($expirationTime, $maxUseCount);
    /**
     * @param string[] $chatIds
     * @return \TMessageReadRange[]
     * @throws \TalkException
     */
    public function getMessageReadRange(array $chatIds);
    /**
     * @param int $reqSeq
     * @param string $groupId
     * @throws \TalkException
     */
    public function rejectGroupInvitation($reqSeq, $groupId);
    /**
     * @throws \TalkException
     */
    public function releaseSession();
    /**
     * @param int $seq
     * @param string $lastMessageId
     * @throws \TalkException
     */
    public function removeAllMessages($seq, $lastMessageId);
    /**
     * @param string $mid
     * @param int $index
     * @throws \TalkException
     */
    public function removeBuddyLocation($mid, $index);
    /**
     * @param string $messageId
     * @return bool
     * @throws \TalkException
     */
    public function removeMessage($messageId);
    /**
     * @param string $contactOwnerMid
     * @return \ContactTransition
     * @throws \TalkException
     */
    public function makeUserAddMyselfAsContact($contactOwnerMid);
    /**
     * @param string $messageId
     * @return bool
     * @throws \TalkException
     */
    public function removeMessageFromMyHome($messageId);
    /**
     * @param int $snsIdType
     * @return string
     * @throws \TalkException
     */
    public function removeSnsId($snsIdType);
    /**
     * @param int $syncOpRevision
     * @param int $category
     * @param string $report
     * @throws \TalkException
     */
    public function report($syncOpRevision, $category, $report);
    /**
     * @param int $syncOpRevision
     * @param int $category
     * @param \ContactReport[] $contactReports
     * @param int $actionType
     * @return \ContactReportResult[]
     * @throws \TalkException
     */
    public function reportContacts($syncOpRevision, $category, array $contactReports, $actionType);
    /**
     * @param int $syncOpRevision
     * @param \Group[] $groups
     * @throws \TalkException
     */
    public function reportGroups($syncOpRevision, array $groups);
    /**
     * @param int $syncOpRevision
     * @param \Profile $profile
     * @throws \TalkException
     */
    public function reportProfile($syncOpRevision, \Profile $profile);
    /**
     * @param int $syncOpRevision
     * @param \Room[] $rooms
     * @throws \TalkException
     */
    public function reportRooms($syncOpRevision, array $rooms);
    /**
     * @param int $reqSeq
     * @param string $userid
     * @param string $reference
     * @return \Contact
     * @throws \TalkException
     */
    public function findAndAddContactByMetaTag($reqSeq, $userid, $reference);
    /**
     * @param int $syncOpRevision
     * @param \Settings $settings
     * @throws \TalkException
     */
    public function reportSettings($syncOpRevision, \Settings $settings);
    /**
     * @param string $chatMid
     * @param string[] $memberMids
     * @param int[] $spammerReasons
     * @param string[] $senderMids
     * @param string[] $spamMessageIds
     * @param string[] $spamMessages
     * @throws \TalkException
     */
    public function reportSpam($chatMid, array $memberMids, array $spammerReasons, array $senderMids, array $spamMessageIds, array $spamMessages);
    /**
     * @param string $spammerMid
     * @param int[] $spammerReasons
     * @param string[] $spamMessageIds
     * @throws \TalkException
     */
    public function reportSpammer($spammerMid, array $spammerReasons, array $spamMessageIds);
    /**
     * @param int $provider
     * @param string $identifier
     * @param string $locale
     * @throws \TalkException
     */
    public function requestAccountPasswordReset($provider, $identifier, $locale);
    /**
     * @param \EmailConfirmation $emailConfirmation
     * @return \EmailConfirmationSession
     * @throws \TalkException
     */
    public function requestEmailConfirmation(\EmailConfirmation $emailConfirmation);
    /**
     * @param int $provider
     * @param string $identifier
     * @throws \TalkException
     */
    public function requestIdentityUnbind($provider, $identifier);
    /**
     * @param string $verifier
     * @return \EmailConfirmationSession
     * @throws \TalkException
     */
    public function resendEmailConfirmation($verifier);
    /**
     * @param string $sessionId
     * @throws \TalkException
     */
    public function resendPinCode($sessionId);
    /**
     * @param string $sessionId
     * @throws \TalkException
     */
    public function resendPinCodeBySMS($sessionId);
    /**
     * @param int $seq
     * @param string $consumer
     * @param string $lastMessageId
     * @throws \TalkException
     */
    public function sendChatChecked($seq, $consumer, $lastMessageId);
    /**
     * @param int $seq
     * @param \Message $message
     * @return \CommitMessageResult
     * @throws \TalkException
     */
    public function sendMessageAwaitCommit($seq, \Message $message);
    /**
     * @param int $seq
     * @param string $consumer
     * @param string $lastMessageId
     * @throws \TalkException
     */
    public function sendChatRemoved($seq, $consumer, $lastMessageId);
    /**
     * @param int $esq
     * @param string $messageId
     * @param string[] $receiverMids
     * @return array
     * @throws \TalkException
     */
    public function sendContentPreviewUpdated($esq, $messageId, array $receiverMids);
    /**
     * @param int $seq
     * @param string $consumer
     * @param string $messageId
     * @throws \TalkException
     */
    public function sendContentReceipt($seq, $consumer, $messageId);
    /**
     * @throws \TalkException
     */
    public function sendDummyPush();
    /**
     * @param \E2EEPublicKey $publicKey
     * @throws \TalkException
     */
    public function removeE2EEPublicKey(\E2EEPublicKey $publicKey);
    /**
     * @param string $mid
     * @return \E2EENegotiationResult
     * @throws \TalkException
     */
    public function negotiateE2EEPublicKey($mid);
    /**
     * @param string $mid
     * @param int $version
     * @param int $keyId
     * @return \E2EEPublicKey
     * @throws \TalkException
     */
    public function getE2EEPublicKey($mid, $version, $keyId);
    /**
     * @param int $reqSeq
     * @param string $temporalPublicKey
     * @param \E2EEPublicKey $publicKey
     * @param string $verifier
     * @throws \TalkException
     */
    public function requestE2EEKeyExchange($reqSeq, $temporalPublicKey, \E2EEPublicKey $publicKey, $verifier);
    /**
     * @param string $chatMid
     * @return array
     * @throws \TalkException
     */
    public function getLastE2EEPublicKeys($chatMid);
    /**
     * @param int $reqSeq
     * @param \E2EEPublicKey $publicKey
     * @return \E2EEPublicKey
     * @throws \TalkException
     */
    public function registerE2EEPublicKey($reqSeq, \E2EEPublicKey $publicKey);
    /**
     * @return \E2EEPublicKey[]
     * @throws \TalkException
     */
    public function getE2EEPublicKeys();
    /**
     * @param bool $ignoreE2EEStatus
     * @return \E2EEPublicKey[]
     * @throws \TalkException
     */
    public function getE2EEPublicKeysEx($ignoreE2EEStatus);
    /**
     * @param string[] $chatIds
     * @return \Operation[]
     * @throws \TalkException
     */
    public function getReadMessageOpsInBulk(array $chatIds);
    /**
     * @param int $seq
     * @param \Message $message
     * @return \Message
     * @throws \TalkException
     */
    public function sendEvent($seq, \Message $message);
    /**
     * @param int $seq
     * @param \Message $message
     * @return \Message
     * @throws \TalkException
     */
    public function sendMessage($seq, \Message $message);
    /**
     * @param int $seq
     * @param string $consumer
     * @param string[] $messageIds
     * @throws \TalkException
     */
    public function sendMessageIgnored($seq, $consumer, array $messageIds);
    /**
     * @param int $seq
     * @param string $consumer
     * @param string[] $messageIds
     * @throws \TalkException
     */
    public function sendMessageReceipt($seq, $consumer, array $messageIds);
    /**
     * @param string $userid
     * @param string $reference
     * @return \Contact
     * @throws \TalkException
     */
    public function findContactByMetaTag($userid, $reference);
    /**
     * @param int $seq
     * @param \Message $message
     * @return \Message
     * @throws \TalkException
     */
    public function sendMessageToMyHome($seq, \Message $message);
    /**
     * @param string $mid
     * @param int $index
     * @param \Geolocation $location
     * @throws \TalkException
     */
    public function setBuddyLocation($mid, $index, \Geolocation $location);
    /**
     * @param string $identifier
     * @param string $verifier
     * @param int $provider
     * @throws \TalkException
     */
    public function setIdentityCredential($identifier, $verifier, $provider);
    /**
     * @param int $reqSeq
     * @param int $type
     * @param string $target
     * @param bool $enablement
     * @throws \TalkException
     */
    public function setNotificationsEnabled($reqSeq, $type, $target, $enablement);
    /**
     * @param string $region
     * @param int $carrier
     * @param string $phone
     * @param string $udidHash
     * @param \DeviceInfo $deviceInfo
     * @param string $networkCode
     * @param string $locale
     * @return \VerificationSessionData
     * @throws \TalkException
     */
    public function startUpdateVerification($region, $carrier, $phone, $udidHash, \DeviceInfo $deviceInfo, $networkCode, $locale);
    /**
     * @param string $region
     * @param int $carrier
     * @param string $phone
     * @param string $udidHash
     * @param \DeviceInfo $deviceInfo
     * @param string $networkCode
     * @param string $mid
     * @param string $locale
     * @param \SIMInfo $simInfo
     * @param string $oldUdidHash
     * @return \VerificationSessionData
     * @throws \TalkException
     */
    public function startVerification($region, $carrier, $phone, $udidHash, \DeviceInfo $deviceInfo, $networkCode, $mid, $locale, \SIMInfo $simInfo, $oldUdidHash);
    /**
     * @param int $reqSeq
     * @param string $groupMid
     * @param array $updatedAttrs
     * @throws \TalkException
     */
    public function updateGroupPreferenceAttribute($reqSeq, $groupMid, array $updatedAttrs);
    /**
     * @param int $reqSeq
     * @param string[] $contactIds
     * @return \Room
     * @throws \TalkException
     */
    public function createRoomV2($reqSeq, array $contactIds);
    /**
     * @param int $seq
     * @param int $profileAttribute
     * @param string $value
     * @throws \TalkException
     */
    public function storeUpdateProfileAttribute($seq, $profileAttribute, $value);
    /**
     * @param int $reqSeq
     * @param \SnsFriendModification[] $modifications
     * @return \SnsFriendContactRegistration[]
     * @throws \TalkException
     */
    public function syncContactBySnsIds($reqSeq, array $modifications);
    /**
     * @param int $reqSeq
     * @param \ContactModification[] $localContacts
     * @return array
     * @throws \TalkException
     */
    public function syncContacts($reqSeq, array $localContacts);
    /**
     * @param int $seq
     * @param \Message $message
     * @return \Message
     * @throws \TalkException
     */
    public function trySendMessage($seq, \Message $message);
    /**
     * @param string $messageBoxId
     * @param \MessageBoxV2MessageId $startMessageId
     * @param int $messagesCount
     * @return \Message[]
     * @throws \TalkException
     */
    public function getNextMessagesV2($messageBoxId, \MessageBoxV2MessageId $startMessageId, $messagesCount);
    /**
     * @param string $messageBoxId
     * @return \TMessageBoxWrapUp
     * @throws \TalkException
     */
    public function getMessageBoxCompactWrapUpV2($messageBoxId);
    /**
     * @param string $messageBoxId
     * @param int $messagesCount
     * @return \Message[]
     * @throws \TalkException
     */
    public function getRecentMessagesV2($messageBoxId, $messagesCount);
    /**
     * @param string[] $contacts
     * @return array
     * @throws \TalkException
     */
    public function validateContactsOnBot(array $contacts);
    /**
     * @param string $midOrEMid
     * @param int $method
     * @param string $friendRequestParams
     * @throws \TalkException
     */
    public function tryFriendRequest($midOrEMid, $method, $friendRequestParams);
    /**
     * @param int $reqSeq
     * @param string $id
     * @throws \TalkException
     */
    public function unblockContact($reqSeq, $id);
    /**
     * @param int $reqSeq
     * @param string $id
     * @throws \TalkException
     */
    public function unblockRecommendation($reqSeq, $id);
    /**
     * @return string
     * @throws \TalkException
     */
    public function unregisterUserAndDevice();
    /**
     * @param string $apnsDeviceToken
     * @throws \TalkException
     */
    public function updateApnsDeviceToken($apnsDeviceToken);
    /**
     * @param string $key
     * @param string $value
     * @throws \TalkException
     */
    public function updateBuddySetting($key, $value);
    /**
     * @param string $registrationId
     * @throws \TalkException
     */
    public function updateC2DMRegistrationId($registrationId);
    /**
     * @param int $reqSeq
     * @param string $mid
     * @param int $flag
     * @param string $value
     * @throws \TalkException
     */
    public function updateContactSetting($reqSeq, $mid, $flag, $value);
    /**
     * @param int $customMode
     * @param array $paramMap
     * @throws \TalkException
     */
    public function updateCustomModeSettings($customMode, array $paramMap);
    /**
     * @param string $deviceUid
     * @param \DeviceInfo $deviceInfo
     * @throws \TalkException
     */
    public function updateDeviceInfo($deviceUid, \DeviceInfo $deviceInfo);
    /**
     * @param int $reqSeq
     * @param \Group $group
     * @throws \TalkException
     */
    public function updateGroup($reqSeq, \Group $group);
    /**
     * @param int $type
     * @param string $token
     * @throws \TalkException
     */
    public function updateNotificationToken($type, $token);
    /**
     * @param int $type
     * @param string $token
     * @throws \TalkException
     */
    public function updateNotificationTokenWithBytes($type, $token);
    /**
     * @param int $reqSeq
     * @param \Profile $profile
     * @throws \TalkException
     */
    public function updateProfile($reqSeq, \Profile $profile);
    /**
     * @param int $reqSeq
     * @param int $attr
     * @param string $value
     * @throws \TalkException
     */
    public function updateProfileAttribute($reqSeq, $attr, $value);
    /**
     * @param string $region
     * @throws \TalkException
     */
    public function updateRegion($region);
    /**
     * @param int $reqSeq
     * @param \Settings $settings
     * @throws \TalkException
     */
    public function updateSettings($reqSeq, \Settings $settings);
    /**
     * @param int $reqSeq
     * @param \Settings $settings
     * @return int
     * @throws \TalkException
     */
    public function updateSettings2($reqSeq, \Settings $settings);
    /**
     * @param int $reqSeq
     * @param int $attr
     * @param string $value
     * @throws \TalkException
     */
    public function updateSettingsAttribute($reqSeq, $attr, $value);
    /**
     * @param int $reqSeq
     * @param int $attrBitset
     * @param \Settings $settings
     * @return int
     * @throws \TalkException
     */
    public function updateSettingsAttributes($reqSeq, $attrBitset, \Settings $settings);
    /**
     * @param int $identityProvider
     * @param string $identifier
     * @param string $password
     * @throws \TalkException
     */
    public function verifyIdentityCredential($identityProvider, $identifier, $password);
    /**
     * @param \IdentityCredential $identityCredential
     * @return \UserAuthStatus
     * @throws \TalkException
     */
    public function verifyIdentityCredentialWithResult(\IdentityCredential $identityCredential);
    /**
     * @param string $sessionId
     * @param string $pinCode
     * @param string $udidHash
     * @return int
     * @throws \TalkException
     */
    public function verifyPhone($sessionId, $pinCode, $udidHash);
    /**
     * @param string $verifier
     * @param string $pinCode
     * @return string
     * @throws \TalkException
     */
    public function verifyQrcode($verifier, $pinCode);
}
