<?php
/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


interface BotServiceIf {
  /**
   * @param string $groupMid
   * @throws \TalkException
   */
  public function notifyLeaveGroup($groupMid);
  /**
   * @param string $roomMid
   * @throws \TalkException
   */
  public function notifyLeaveRoom($roomMid);
  /**
   * @param string $botMid
   * @return \BotUseInfo
   * @throws \TalkException
   */
  public function getBotUseInfo($botMid);
  /**
   * @param int $seq
   * @param string $mid
   * @param int $watermark
   * @param int $sessionId
   * @throws \TalkException
   */
  public function sendChatCheckedByWatermark($seq, $mid, $watermark, $sessionId);
}


class BotServiceClient implements \BotServiceIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function notifyLeaveGroup($groupMid)
  {
    $this->send_notifyLeaveGroup($groupMid);
    $this->recv_notifyLeaveGroup();
  }

  public function send_notifyLeaveGroup($groupMid)
  {
    $args = new \BotService_notifyLeaveGroup_args();
    $args->groupMid = $groupMid;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'notifyLeaveGroup', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('notifyLeaveGroup', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_notifyLeaveGroup()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\BotService_notifyLeaveGroup_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \BotService_notifyLeaveGroup_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    return;
  }

  public function notifyLeaveRoom($roomMid)
  {
    $this->send_notifyLeaveRoom($roomMid);
    $this->recv_notifyLeaveRoom();
  }

  public function send_notifyLeaveRoom($roomMid)
  {
    $args = new \BotService_notifyLeaveRoom_args();
    $args->roomMid = $roomMid;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'notifyLeaveRoom', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('notifyLeaveRoom', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_notifyLeaveRoom()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\BotService_notifyLeaveRoom_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \BotService_notifyLeaveRoom_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    return;
  }

  public function getBotUseInfo($botMid)
  {
    $this->send_getBotUseInfo($botMid);
    return $this->recv_getBotUseInfo();
  }

  public function send_getBotUseInfo($botMid)
  {
    $args = new \BotService_getBotUseInfo_args();
    $args->botMid = $botMid;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getBotUseInfo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getBotUseInfo', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getBotUseInfo()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\BotService_getBotUseInfo_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \BotService_getBotUseInfo_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    throw new \Exception("getBotUseInfo failed: unknown result");
  }

  public function sendChatCheckedByWatermark($seq, $mid, $watermark, $sessionId)
  {
    $this->send_sendChatCheckedByWatermark($seq, $mid, $watermark, $sessionId);
    $this->recv_sendChatCheckedByWatermark();
  }

  public function send_sendChatCheckedByWatermark($seq, $mid, $watermark, $sessionId)
  {
    $args = new \BotService_sendChatCheckedByWatermark_args();
    $args->seq = $seq;
    $args->mid = $mid;
    $args->watermark = $watermark;
    $args->sessionId = $sessionId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'sendChatCheckedByWatermark', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('sendChatCheckedByWatermark', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_sendChatCheckedByWatermark()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\BotService_sendChatCheckedByWatermark_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \BotService_sendChatCheckedByWatermark_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    return;
  }

}


// HELPER FUNCTIONS AND STRUCTURES

class BotService_notifyLeaveGroup_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'groupMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $groupMid = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['groupMid'])) {
        $this->groupMid = $vals['groupMid'];
      }
    }
  }

  public function getName() {
    return 'BotService_notifyLeaveGroup_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->groupMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BotService_notifyLeaveGroup_args');
    if ($this->groupMid !== null) {
      $xfer += $output->writeFieldBegin('groupMid', TType::STRING, 1);
      $xfer += $output->writeString($this->groupMid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BotService_notifyLeaveGroup_result {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'e',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\TalkException',
      ),
    );

  /**
   * @var \TalkException
   */
  public $e = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'BotService_notifyLeaveGroup_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \TalkException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BotService_notifyLeaveGroup_result');
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BotService_notifyLeaveRoom_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'roomMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $roomMid = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['roomMid'])) {
        $this->roomMid = $vals['roomMid'];
      }
    }
  }

  public function getName() {
    return 'BotService_notifyLeaveRoom_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->roomMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BotService_notifyLeaveRoom_args');
    if ($this->roomMid !== null) {
      $xfer += $output->writeFieldBegin('roomMid', TType::STRING, 1);
      $xfer += $output->writeString($this->roomMid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BotService_notifyLeaveRoom_result {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'e',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\TalkException',
      ),
    );

  /**
   * @var \TalkException
   */
  public $e = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'BotService_notifyLeaveRoom_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \TalkException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BotService_notifyLeaveRoom_result');
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BotService_getBotUseInfo_args {
  static $isValidate = false;

  static $_TSPEC = array(
    2 => array(
      'var' => 'botMid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $botMid = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['botMid'])) {
        $this->botMid = $vals['botMid'];
      }
    }
  }

  public function getName() {
    return 'BotService_getBotUseInfo_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->botMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BotService_getBotUseInfo_args');
    if ($this->botMid !== null) {
      $xfer += $output->writeFieldBegin('botMid', TType::STRING, 2);
      $xfer += $output->writeString($this->botMid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BotService_getBotUseInfo_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\BotUseInfo',
      ),
    1 => array(
      'var' => 'e',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\TalkException',
      ),
    );

  /**
   * @var \BotUseInfo
   */
  public $success = null;
  /**
   * @var \TalkException
   */
  public $e = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'BotService_getBotUseInfo_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \BotUseInfo();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \TalkException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BotService_getBotUseInfo_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BotService_sendChatCheckedByWatermark_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'seq',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'mid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'watermark',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    4 => array(
      'var' => 'sessionId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $seq = null;
  /**
   * @var string
   */
  public $mid = null;
  /**
   * @var int
   */
  public $watermark = null;
  /**
   * @var int
   */
  public $sessionId = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['seq'])) {
        $this->seq = $vals['seq'];
      }
      if (isset($vals['mid'])) {
        $this->mid = $vals['mid'];
      }
      if (isset($vals['watermark'])) {
        $this->watermark = $vals['watermark'];
      }
      if (isset($vals['sessionId'])) {
        $this->sessionId = $vals['sessionId'];
      }
    }
  }

  public function getName() {
    return 'BotService_sendChatCheckedByWatermark_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->seq);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->watermark);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sessionId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BotService_sendChatCheckedByWatermark_args');
    if ($this->seq !== null) {
      $xfer += $output->writeFieldBegin('seq', TType::I32, 1);
      $xfer += $output->writeI32($this->seq);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mid !== null) {
      $xfer += $output->writeFieldBegin('mid', TType::STRING, 2);
      $xfer += $output->writeString($this->mid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->watermark !== null) {
      $xfer += $output->writeFieldBegin('watermark', TType::I64, 3);
      $xfer += $output->writeI64($this->watermark);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionId !== null) {
      $xfer += $output->writeFieldBegin('sessionId', TType::I32, 4);
      $xfer += $output->writeI32($this->sessionId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BotService_sendChatCheckedByWatermark_result {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'e',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\TalkException',
      ),
    );

  /**
   * @var \TalkException
   */
  public $e = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'BotService_sendChatCheckedByWatermark_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \TalkException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BotService_sendChatCheckedByWatermark_result');
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


