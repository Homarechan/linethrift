<?php
/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class CommitMessageResult
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'message',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Message',
        ),
        2 => array(
            'var' => 'code',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        3 => array(
            'var' => 'reason',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'successCount',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        5 => array(
            'var' => 'failCount',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        6 => array(
            'var' => 'unregisterCount',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        7 => array(
            'var' => 'blockCount',
            'isRequired' => false,
            'type' => TType::I64,
        ),
    );

    /**
     * @var \Message
     */
    public $message = null;
    /**
     * @var int
     */
    public $code = null;
    /**
     * @var string
     */
    public $reason = null;
    /**
     * @var int
     */
    public $successCount = null;
    /**
     * @var int
     */
    public $failCount = null;
    /**
     * @var int
     */
    public $unregisterCount = null;
    /**
     * @var int
     */
    public $blockCount = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['message'])) {
                $this->message = $vals['message'];
            }
            if (isset($vals['code'])) {
                $this->code = $vals['code'];
            }
            if (isset($vals['reason'])) {
                $this->reason = $vals['reason'];
            }
            if (isset($vals['successCount'])) {
                $this->successCount = $vals['successCount'];
            }
            if (isset($vals['failCount'])) {
                $this->failCount = $vals['failCount'];
            }
            if (isset($vals['unregisterCount'])) {
                $this->unregisterCount = $vals['unregisterCount'];
            }
            if (isset($vals['blockCount'])) {
                $this->blockCount = $vals['blockCount'];
            }
        }
    }

    public function getName()
    {
        return 'CommitMessageResult';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->message = new \Message();
                        $xfer += $this->message->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->code);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->reason);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->successCount);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->failCount);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->unregisterCount);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->blockCount);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('CommitMessageResult');
        if ($this->message !== null) {
            if (!is_object($this->message)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('message', TType::STRUCT, 1);
            $xfer += $this->message->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->code !== null) {
            $xfer += $output->writeFieldBegin('code', TType::I32, 2);
            $xfer += $output->writeI32($this->code);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->reason !== null) {
            $xfer += $output->writeFieldBegin('reason', TType::STRING, 3);
            $xfer += $output->writeString($this->reason);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->successCount !== null) {
            $xfer += $output->writeFieldBegin('successCount', TType::I64, 4);
            $xfer += $output->writeI64($this->successCount);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->failCount !== null) {
            $xfer += $output->writeFieldBegin('failCount', TType::I64, 5);
            $xfer += $output->writeI64($this->failCount);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->unregisterCount !== null) {
            $xfer += $output->writeFieldBegin('unregisterCount', TType::I64, 6);
            $xfer += $output->writeI64($this->unregisterCount);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->blockCount !== null) {
            $xfer += $output->writeFieldBegin('blockCount', TType::I64, 7);
            $xfer += $output->writeI64($this->blockCount);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
