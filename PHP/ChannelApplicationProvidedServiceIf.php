<?php
/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

interface ChannelApplicationProvidedServiceIf
{
    /**
     * @return int
     * @throws \TalkException
     */
    public function activeBuddySubscriberCount();
    /**
     * @param int $opType
     * @param string $param1
     * @param string $param2
     * @param string $param3
     * @throws \TalkException
     */
    public function addOperationForChannel($opType, $param1, $param2, $param3);
    /**
     * @return int
     * @throws \TalkException
     */
    public function displayBuddySubscriberCount();
    /**
     * @param string $userid
     * @return \Contact
     * @throws \TalkException
     */
    public function findContactByUseridWithoutAbuseBlockForChannel($userid);
    /**
     * @return string[]
     * @throws \TalkException
     */
    public function getAllContactIdsForChannel();
    /**
     * @param int $lastModifiedTimestamp
     * @return \CompactContact[]
     * @throws \TalkException
     */
    public function getCompactContacts($lastModifiedTimestamp);
    /**
     * @param string[] $ids
     * @return \Contact[]
     * @throws \TalkException
     */
    public function getContactsForChannel(array $ids);
    /**
     * @param string $mid
     * @return string
     * @throws \TalkException
     */
    public function getDisplayName($mid);
    /**
     * @return string[]
     * @throws \TalkException
     */
    public function getFavoriteMidsForChannel();
    /**
     * @return string[]
     * @throws \TalkException
     */
    public function getFriendMids();
    /**
     * @param string $groupId
     * @return string[]
     * @throws \TalkException
     */
    public function getGroupMemberMids($groupId);
    /**
     * @param string[] $groupIds
     * @return \Group[]
     * @throws \TalkException
     */
    public function getGroupsForChannel(array $groupIds);
    /**
     * @return \IdentityCredential
     * @throws \TalkException
     */
    public function getIdentityCredential();
    /**
     * @return string[]
     * @throws \TalkException
     */
    public function getJoinedGroupIdsForChannel();
    /**
     * @return \MetaProfile
     * @throws \TalkException
     */
    public function getMetaProfile();
    /**
     * @return string
     * @throws \TalkException
     */
    public function getMid();
    /**
     * @return \SimpleChannelClient
     * @throws \TalkException
     */
    public function getPrimaryClientForChannel();
    /**
     * @return \Profile
     * @throws \TalkException
     */
    public function getProfileForChannel();
    /**
     * @param string[] $ids
     * @return \SimpleChannelContact[]
     * @throws \TalkException
     */
    public function getSimpleChannelContacts(array $ids);
    /**
     * @param string $country
     * @param string $remoteIp
     * @return string
     * @throws \TalkException
     */
    public function getUserCountryForBilling($country, $remoteIp);
    /**
     * @return int
     * @throws \TalkException
     */
    public function getUserCreateTime();
    /**
     * @return array
     * @throws \TalkException
     */
    public function getUserIdentities();
    /**
     * @return string
     * @throws \TalkException
     */
    public function getUserLanguage();
    /**
     * @return string[]
     * @throws \TalkException
     */
    public function getUserMidsWhoAddedMe();
    /**
     * @param string $groupId
     * @return bool
     * @throws \TalkException
     */
    public function isGroupMember($groupId);
    /**
     * @param string $mid
     * @return bool
     * @throws \TalkException
     */
    public function isInContact($mid);
    /**
     * @param string $cpId
     * @param string $registerPassword
     * @return string
     * @throws \TalkException
     */
    public function registerChannelCP($cpId, $registerPassword);
    /**
     * @param int $notificationStatus
     * @throws \TalkException
     */
    public function removeNotificationStatus($notificationStatus);
    /**
     * @param \Message $message
     * @return \Message
     * @throws \TalkException
     */
    public function sendMessageForChannel(\Message $message);
    /**
     * @param string $verifier
     * @throws \TalkException
     */
    public function sendPinCodeOperation($verifier);
    /**
     * @param int $profileAttribute
     * @param string $value
     * @throws \TalkException
     */
    public function updateProfileAttributeForChannel($profileAttribute, $value);
}
