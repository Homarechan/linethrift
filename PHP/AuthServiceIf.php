<?php
/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

interface AuthServiceIf
{
    /**
     * @param string $countryCode
     * @param string $phoneNumber
     * @param string $countryCodeHint
     * @return string
     * @throws \TalkException
     */
    public function normalizePhoneNumber($countryCode, $phoneNumber, $countryCodeHint);
    /**
     * @param string $verifier
     * @param \E2EEPublicKey $publicKey
     * @param string $encryptedKeyChain
     * @param string $hashKeyChain
     * @param int $errorCode
     * @throws \TalkException
     */
    public function respondE2EELoginRequest($verifier, \E2EEPublicKey $publicKey, $encryptedKeyChain, $hashKeyChain, $errorCode);
    /**
     * @param string $verifier
     * @param string $deviceSecret
     * @return string
     * @throws \TalkException
     */
    public function confirmE2EELogin($verifier, $deviceSecret);
    /**
     * @throws \TalkException
     */
    public function logoutZ();
    /**
     * @param \LoginRequest $loginRequest
     * @return \LoginResult
     * @throws \TalkException
     */
    public function loginZ(\LoginRequest $loginRequest);
    /**
     * @param bool $enforce
     * @return \SecurityCenterResult
     * @throws \TalkException
     */
    public function issueTokenForAccountMigrationSettings($enforce);
    /**
     * @param string $migrationSessionId
     * @return \SecurityCenterResult
     * @throws \TalkException
     */
    public function issueTokenForAccountMigration($migrationSessionId);
    /**
     * @param string $verifier
     * @param string $pinCode
     * @param int $errorCode
     * @param \E2EEPublicKey $publicKey
     * @param string $encryptedKeyChain
     * @param string $hashKeyChain
     * @return string
     * @throws \TalkException
     */
    public function verifyQrcodeWithE2EE($verifier, $pinCode, $errorCode, \E2EEPublicKey $publicKey, $encryptedKeyChain, $hashKeyChain);
}
