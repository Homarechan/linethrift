<?php
/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class MessageCommitResult
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'requestId',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'state',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        3 => array(
            'var' => 'messageStoreRequestId',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'messageIds',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        11 => array(
            'var' => 'receiverCount',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        12 => array(
            'var' => 'successCount',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        13 => array(
            'var' => 'failCount',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        14 => array(
            'var' => 'blockCount',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        15 => array(
            'var' => 'unregisteredCount',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        16 => array(
            'var' => 'unrelatedCount',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        21 => array(
            'var' => 'errorDescription',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
    );

    /**
     * @var string
     */
    public $requestId = null;
    /**
     * @var int
     */
    public $state = null;
    /**
     * @var string
     */
    public $messageStoreRequestId = null;
    /**
     * @var string[]
     */
    public $messageIds = null;
    /**
     * @var int
     */
    public $receiverCount = null;
    /**
     * @var int
     */
    public $successCount = null;
    /**
     * @var int
     */
    public $failCount = null;
    /**
     * @var int
     */
    public $blockCount = null;
    /**
     * @var int
     */
    public $unregisteredCount = null;
    /**
     * @var int
     */
    public $unrelatedCount = null;
    /**
     * @var string
     */
    public $errorDescription = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['requestId'])) {
                $this->requestId = $vals['requestId'];
            }
            if (isset($vals['state'])) {
                $this->state = $vals['state'];
            }
            if (isset($vals['messageStoreRequestId'])) {
                $this->messageStoreRequestId = $vals['messageStoreRequestId'];
            }
            if (isset($vals['messageIds'])) {
                $this->messageIds = $vals['messageIds'];
            }
            if (isset($vals['receiverCount'])) {
                $this->receiverCount = $vals['receiverCount'];
            }
            if (isset($vals['successCount'])) {
                $this->successCount = $vals['successCount'];
            }
            if (isset($vals['failCount'])) {
                $this->failCount = $vals['failCount'];
            }
            if (isset($vals['blockCount'])) {
                $this->blockCount = $vals['blockCount'];
            }
            if (isset($vals['unregisteredCount'])) {
                $this->unregisteredCount = $vals['unregisteredCount'];
            }
            if (isset($vals['unrelatedCount'])) {
                $this->unrelatedCount = $vals['unrelatedCount'];
            }
            if (isset($vals['errorDescription'])) {
                $this->errorDescription = $vals['errorDescription'];
            }
        }
    }

    public function getName()
    {
        return 'MessageCommitResult';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->requestId);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->state);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->messageStoreRequestId);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::LST) {
                        $this->messageIds = array();
                        $_size0 = 0;
                        $_etype3 = 0;
                        $xfer += $input->readListBegin($_etype3, $_size0);
                        for ($_i4 = 0; $_i4 < $_size0; ++$_i4) {
                            $elem5 = null;
                            $xfer += $input->readString($elem5);
                            $this->messageIds []= $elem5;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->receiverCount);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 12:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->successCount);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 13:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->failCount);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 14:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->blockCount);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 15:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->unregisteredCount);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 16:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->unrelatedCount);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 21:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->errorDescription);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('MessageCommitResult');
        if ($this->requestId !== null) {
            $xfer += $output->writeFieldBegin('requestId', TType::STRING, 1);
            $xfer += $output->writeString($this->requestId);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->state !== null) {
            $xfer += $output->writeFieldBegin('state', TType::I32, 2);
            $xfer += $output->writeI32($this->state);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->messageStoreRequestId !== null) {
            $xfer += $output->writeFieldBegin('messageStoreRequestId', TType::STRING, 3);
            $xfer += $output->writeString($this->messageStoreRequestId);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->messageIds !== null) {
            if (!is_array($this->messageIds)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('messageIds', TType::LST, 4);
            $output->writeListBegin(TType::STRING, count($this->messageIds));
            foreach ($this->messageIds as $iter6) {
                $xfer += $output->writeString($iter6);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->receiverCount !== null) {
            $xfer += $output->writeFieldBegin('receiverCount', TType::I64, 11);
            $xfer += $output->writeI64($this->receiverCount);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->successCount !== null) {
            $xfer += $output->writeFieldBegin('successCount', TType::I64, 12);
            $xfer += $output->writeI64($this->successCount);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->failCount !== null) {
            $xfer += $output->writeFieldBegin('failCount', TType::I64, 13);
            $xfer += $output->writeI64($this->failCount);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->blockCount !== null) {
            $xfer += $output->writeFieldBegin('blockCount', TType::I64, 14);
            $xfer += $output->writeI64($this->blockCount);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->unregisteredCount !== null) {
            $xfer += $output->writeFieldBegin('unregisteredCount', TType::I64, 15);
            $xfer += $output->writeI64($this->unregisteredCount);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->unrelatedCount !== null) {
            $xfer += $output->writeFieldBegin('unrelatedCount', TType::I64, 16);
            $xfer += $output->writeI64($this->unrelatedCount);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->errorDescription !== null) {
            $xfer += $output->writeFieldBegin('errorDescription', TType::STRING, 21);
            $xfer += $output->writeString($this->errorDescription);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
