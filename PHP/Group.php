<?php
/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class Group
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'id',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'createdTime',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        10 => array(
            'var' => 'name',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        11 => array(
            'var' => 'pictureStatus',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        12 => array(
            'var' => 'preventedJoinByTicket',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        13 => array(
            'var' => 'groupPreference',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\GroupPreference',
        ),
        20 => array(
            'var' => 'members',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\Contact',
                ),
        ),
        21 => array(
            'var' => 'creator',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Contact',
        ),
        22 => array(
            'var' => 'invitee',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\Contact',
                ),
        ),
        31 => array(
            'var' => 'notificationDisabled',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
    );

    /**
     * @var string
     */
    public $id = null;
    /**
     * @var int
     */
    public $createdTime = null;
    /**
     * @var string
     */
    public $name = null;
    /**
     * @var string
     */
    public $pictureStatus = null;
    /**
     * @var bool
     */
    public $preventedJoinByTicket = null;
    /**
     * @var \GroupPreference
     */
    public $groupPreference = null;
    /**
     * @var \Contact[]
     */
    public $members = null;
    /**
     * @var \Contact
     */
    public $creator = null;
    /**
     * @var \Contact[]
     */
    public $invitee = null;
    /**
     * @var bool
     */
    public $notificationDisabled = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['id'])) {
                $this->id = $vals['id'];
            }
            if (isset($vals['createdTime'])) {
                $this->createdTime = $vals['createdTime'];
            }
            if (isset($vals['name'])) {
                $this->name = $vals['name'];
            }
            if (isset($vals['pictureStatus'])) {
                $this->pictureStatus = $vals['pictureStatus'];
            }
            if (isset($vals['preventedJoinByTicket'])) {
                $this->preventedJoinByTicket = $vals['preventedJoinByTicket'];
            }
            if (isset($vals['groupPreference'])) {
                $this->groupPreference = $vals['groupPreference'];
            }
            if (isset($vals['members'])) {
                $this->members = $vals['members'];
            }
            if (isset($vals['creator'])) {
                $this->creator = $vals['creator'];
            }
            if (isset($vals['invitee'])) {
                $this->invitee = $vals['invitee'];
            }
            if (isset($vals['notificationDisabled'])) {
                $this->notificationDisabled = $vals['notificationDisabled'];
            }
        }
    }

    public function getName()
    {
        return 'Group';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->createdTime);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->name);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->pictureStatus);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 12:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->preventedJoinByTicket);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 13:
                    if ($ftype == TType::STRUCT) {
                        $this->groupPreference = new \GroupPreference();
                        $xfer += $this->groupPreference->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 20:
                    if ($ftype == TType::LST) {
                        $this->members = array();
                        $_size251 = 0;
                        $_etype254 = 0;
                        $xfer += $input->readListBegin($_etype254, $_size251);
                        for ($_i255 = 0; $_i255 < $_size251; ++$_i255) {
                            $elem256 = null;
                            $elem256 = new \Contact();
                            $xfer += $elem256->read($input);
                            $this->members []= $elem256;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 21:
                    if ($ftype == TType::STRUCT) {
                        $this->creator = new \Contact();
                        $xfer += $this->creator->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 22:
                    if ($ftype == TType::LST) {
                        $this->invitee = array();
                        $_size257 = 0;
                        $_etype260 = 0;
                        $xfer += $input->readListBegin($_etype260, $_size257);
                        for ($_i261 = 0; $_i261 < $_size257; ++$_i261) {
                            $elem262 = null;
                            $elem262 = new \Contact();
                            $xfer += $elem262->read($input);
                            $this->invitee []= $elem262;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 31:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->notificationDisabled);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('Group');
        if ($this->id !== null) {
            $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
            $xfer += $output->writeString($this->id);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->createdTime !== null) {
            $xfer += $output->writeFieldBegin('createdTime', TType::I64, 2);
            $xfer += $output->writeI64($this->createdTime);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->name !== null) {
            $xfer += $output->writeFieldBegin('name', TType::STRING, 10);
            $xfer += $output->writeString($this->name);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->pictureStatus !== null) {
            $xfer += $output->writeFieldBegin('pictureStatus', TType::STRING, 11);
            $xfer += $output->writeString($this->pictureStatus);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->preventedJoinByTicket !== null) {
            $xfer += $output->writeFieldBegin('preventedJoinByTicket', TType::BOOL, 12);
            $xfer += $output->writeBool($this->preventedJoinByTicket);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->groupPreference !== null) {
            if (!is_object($this->groupPreference)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('groupPreference', TType::STRUCT, 13);
            $xfer += $this->groupPreference->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->members !== null) {
            if (!is_array($this->members)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('members', TType::LST, 20);
            $output->writeListBegin(TType::STRUCT, count($this->members));
            foreach ($this->members as $iter263) {
                $xfer += $iter263->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->creator !== null) {
            if (!is_object($this->creator)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('creator', TType::STRUCT, 21);
            $xfer += $this->creator->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->invitee !== null) {
            if (!is_array($this->invitee)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('invitee', TType::LST, 22);
            $output->writeListBegin(TType::STRUCT, count($this->invitee));
            foreach ($this->invitee as $iter264) {
                $xfer += $iter264->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->notificationDisabled !== null) {
            $xfer += $output->writeFieldBegin('notificationDisabled', TType::BOOL, 31);
            $xfer += $output->writeBool($this->notificationDisabled);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
