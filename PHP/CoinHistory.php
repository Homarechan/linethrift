<?php
/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class CoinHistory
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'payDate',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        2 => array(
            'var' => 'coinBalance',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        3 => array(
            'var' => 'coin',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        4 => array(
            'var' => 'price',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        5 => array(
            'var' => 'title',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        6 => array(
            'var' => 'refund',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        7 => array(
            'var' => 'paySeq',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        8 => array(
            'var' => 'currency',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        9 => array(
            'var' => 'currencySign',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        10 => array(
            'var' => 'displayPrice',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        11 => array(
            'var' => 'payload',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\CoinPayLoad',
        ),
        12 => array(
            'var' => 'channelId',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
    );

    /**
     * @var int
     */
    public $payDate = null;
    /**
     * @var int
     */
    public $coinBalance = null;
    /**
     * @var int
     */
    public $coin = null;
    /**
     * @var string
     */
    public $price = null;
    /**
     * @var string
     */
    public $title = null;
    /**
     * @var bool
     */
    public $refund = null;
    /**
     * @var string
     */
    public $paySeq = null;
    /**
     * @var string
     */
    public $currency = null;
    /**
     * @var string
     */
    public $currencySign = null;
    /**
     * @var string
     */
    public $displayPrice = null;
    /**
     * @var \CoinPayLoad
     */
    public $payload = null;
    /**
     * @var string
     */
    public $channelId = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['payDate'])) {
                $this->payDate = $vals['payDate'];
            }
            if (isset($vals['coinBalance'])) {
                $this->coinBalance = $vals['coinBalance'];
            }
            if (isset($vals['coin'])) {
                $this->coin = $vals['coin'];
            }
            if (isset($vals['price'])) {
                $this->price = $vals['price'];
            }
            if (isset($vals['title'])) {
                $this->title = $vals['title'];
            }
            if (isset($vals['refund'])) {
                $this->refund = $vals['refund'];
            }
            if (isset($vals['paySeq'])) {
                $this->paySeq = $vals['paySeq'];
            }
            if (isset($vals['currency'])) {
                $this->currency = $vals['currency'];
            }
            if (isset($vals['currencySign'])) {
                $this->currencySign = $vals['currencySign'];
            }
            if (isset($vals['displayPrice'])) {
                $this->displayPrice = $vals['displayPrice'];
            }
            if (isset($vals['payload'])) {
                $this->payload = $vals['payload'];
            }
            if (isset($vals['channelId'])) {
                $this->channelId = $vals['channelId'];
            }
        }
    }

    public function getName()
    {
        return 'CoinHistory';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->payDate);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->coinBalance);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->coin);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->price);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->title);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->refund);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->paySeq);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->currency);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->currencySign);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->displayPrice);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::STRUCT) {
                        $this->payload = new \CoinPayLoad();
                        $xfer += $this->payload->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 12:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->channelId);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('CoinHistory');
        if ($this->payDate !== null) {
            $xfer += $output->writeFieldBegin('payDate', TType::I64, 1);
            $xfer += $output->writeI64($this->payDate);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->coinBalance !== null) {
            $xfer += $output->writeFieldBegin('coinBalance', TType::I32, 2);
            $xfer += $output->writeI32($this->coinBalance);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->coin !== null) {
            $xfer += $output->writeFieldBegin('coin', TType::I32, 3);
            $xfer += $output->writeI32($this->coin);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->price !== null) {
            $xfer += $output->writeFieldBegin('price', TType::STRING, 4);
            $xfer += $output->writeString($this->price);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->title !== null) {
            $xfer += $output->writeFieldBegin('title', TType::STRING, 5);
            $xfer += $output->writeString($this->title);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->refund !== null) {
            $xfer += $output->writeFieldBegin('refund', TType::BOOL, 6);
            $xfer += $output->writeBool($this->refund);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->paySeq !== null) {
            $xfer += $output->writeFieldBegin('paySeq', TType::STRING, 7);
            $xfer += $output->writeString($this->paySeq);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->currency !== null) {
            $xfer += $output->writeFieldBegin('currency', TType::STRING, 8);
            $xfer += $output->writeString($this->currency);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->currencySign !== null) {
            $xfer += $output->writeFieldBegin('currencySign', TType::STRING, 9);
            $xfer += $output->writeString($this->currencySign);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->displayPrice !== null) {
            $xfer += $output->writeFieldBegin('displayPrice', TType::STRING, 10);
            $xfer += $output->writeString($this->displayPrice);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->payload !== null) {
            if (!is_object($this->payload)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('payload', TType::STRUCT, 11);
            $xfer += $this->payload->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->channelId !== null) {
            $xfer += $output->writeFieldBegin('channelId', TType::STRING, 12);
            $xfer += $output->writeString($this->channelId);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
