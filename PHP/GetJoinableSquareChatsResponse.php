<?php
/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class GetJoinableSquareChatsResponse
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'squareChats',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\SquareChat',
                ),
        ),
        2 => array(
            'var' => 'continuationToken',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'totalSquareChatCount',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        4 => array(
            'var' => 'squareChatStatuses',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRUCT,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::STRUCT,
                'class' => '\SquareChatStatus',
                ),
        ),
    );

    /**
     * @var \SquareChat[]
     */
    public $squareChats = null;
    /**
     * @var string
     */
    public $continuationToken = null;
    /**
     * @var int
     */
    public $totalSquareChatCount = null;
    /**
     * @var array
     */
    public $squareChatStatuses = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['squareChats'])) {
                $this->squareChats = $vals['squareChats'];
            }
            if (isset($vals['continuationToken'])) {
                $this->continuationToken = $vals['continuationToken'];
            }
            if (isset($vals['totalSquareChatCount'])) {
                $this->totalSquareChatCount = $vals['totalSquareChatCount'];
            }
            if (isset($vals['squareChatStatuses'])) {
                $this->squareChatStatuses = $vals['squareChatStatuses'];
            }
        }
    }

    public function getName()
    {
        return 'GetJoinableSquareChatsResponse';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::LST) {
                        $this->squareChats = array();
                        $_size567 = 0;
                        $_etype570 = 0;
                        $xfer += $input->readListBegin($_etype570, $_size567);
                        for ($_i571 = 0; $_i571 < $_size567; ++$_i571) {
                            $elem572 = null;
                            $elem572 = new \SquareChat();
                            $xfer += $elem572->read($input);
                            $this->squareChats []= $elem572;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->continuationToken);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->totalSquareChatCount);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::MAP) {
                        $this->squareChatStatuses = array();
                        $_size573 = 0;
                        $_ktype574 = 0;
                        $_vtype575 = 0;
                        $xfer += $input->readMapBegin($_ktype574, $_vtype575, $_size573);
                        for ($_i577 = 0; $_i577 < $_size573; ++$_i577) {
                            $key578 = '';
                            $val579 = new \SquareChatStatus();
                            $xfer += $input->readString($key578);
                            $val579 = new \SquareChatStatus();
                            $xfer += $val579->read($input);
                            $this->squareChatStatuses[$key578] = $val579;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('GetJoinableSquareChatsResponse');
        if ($this->squareChats !== null) {
            if (!is_array($this->squareChats)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('squareChats', TType::LST, 1);
            $output->writeListBegin(TType::STRUCT, count($this->squareChats));
            foreach ($this->squareChats as $iter580) {
                $xfer += $iter580->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->continuationToken !== null) {
            $xfer += $output->writeFieldBegin('continuationToken', TType::STRING, 2);
            $xfer += $output->writeString($this->continuationToken);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->totalSquareChatCount !== null) {
            $xfer += $output->writeFieldBegin('totalSquareChatCount', TType::I32, 3);
            $xfer += $output->writeI32($this->totalSquareChatCount);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->squareChatStatuses !== null) {
            if (!is_array($this->squareChatStatuses)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('squareChatStatuses', TType::MAP, 4);
            $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->squareChatStatuses));
            foreach ($this->squareChatStatuses as $kiter581 => $viter582) {
                $xfer += $output->writeString($kiter581);
                $xfer += $viter582->write($output);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
