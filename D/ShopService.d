/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
module ShopService;

import thrift.base;
import thrift.codegen.base;
import thrift.util.hashset;

import line_types;

interface ShopService {
  void buyCoinProduct(ref const(PaymentReservation) paymentReservation);
  void buyFreeProduct(string receiverMid, string productId, int messageTemplate, string language, string country, long packageId);
  void buyMustbuyProduct(string receiverMid, string productId, int messageTemplate, string language, string country, long packageId, string serialNumber);
  void checkCanReceivePresent(string recipientMid, long packageId, string language, string country);
  ProductList getActivePurchases(long start, int size, string language, string country);
  ProductSimpleList getActivePurchaseVersions(long start, int size, string language, string country);
  CoinProductItem[] getCoinProducts(PaymentType appStoreCode, string country, string language);
  CoinProductItem[] getCoinProductsByPgCode(PaymentType appStoreCode, PaymentPgType pgCode, string country, string language);
  CoinHistoryResult getCoinPurchaseHistory(ref const(CoinHistoryCondition) request);
  CoinHistoryResult getCoinUseAndRefundHistory(ref const(CoinHistoryCondition) request);
  ProductList getDownloads(long start, int size, string language, string country);
  ProductList getEventPackages(long start, int size, string language, string country);
  ProductList getNewlyReleasedPackages(long start, int size, string language, string country);
  ProductList getPopularPackages(long start, int size, string language, string country);
  ProductList getPresentsReceived(long start, int size, string language, string country);
  ProductList getPresentsSent(long start, int size, string language, string country);
  Product getProduct(long packageID, string language, string country);
  ProductList getProductList(string[] productIdList, string language, string country);
  ProductList getProductListWithCarrier(string[] productIdList, string language, string country, string carrierCode);
  Product getProductWithCarrier(long packageID, string language, string country, string carrierCode);
  ProductList getPurchaseHistory(long start, int size, string language, string country);
  Coin getTotalBalance(PaymentType appStoreCode);
  long notifyDownloaded(long packageId, string language);
  PaymentReservationResult reserveCoinPurchase(ref const(CoinPurchaseReservation) request);
  PaymentReservationResult reservePayment(ref const(PaymentReservation) paymentReservation);

  alias line_types.TalkException TalkException;

  enum methodMeta = [
    TMethodMeta(`buyCoinProduct`, 
      [TParamMeta(`paymentReservation`, 2)],
      [TExceptionMeta(`e`, 1, `TalkException`)]
    ),
    TMethodMeta(`buyFreeProduct`, 
      [TParamMeta(`receiverMid`, 2), TParamMeta(`productId`, 3), TParamMeta(`messageTemplate`, 4), TParamMeta(`language`, 5), TParamMeta(`country`, 6), TParamMeta(`packageId`, 7)],
      [TExceptionMeta(`e`, 1, `TalkException`)]
    ),
    TMethodMeta(`buyMustbuyProduct`, 
      [TParamMeta(`receiverMid`, 2), TParamMeta(`productId`, 3), TParamMeta(`messageTemplate`, 4), TParamMeta(`language`, 5), TParamMeta(`country`, 6), TParamMeta(`packageId`, 7), TParamMeta(`serialNumber`, 8)],
      [TExceptionMeta(`e`, 1, `TalkException`)]
    ),
    TMethodMeta(`checkCanReceivePresent`, 
      [TParamMeta(`recipientMid`, 2), TParamMeta(`packageId`, 3), TParamMeta(`language`, 4), TParamMeta(`country`, 5)],
      [TExceptionMeta(`e`, 1, `TalkException`)]
    ),
    TMethodMeta(`getActivePurchases`, 
      [TParamMeta(`start`, 2), TParamMeta(`size`, 3), TParamMeta(`language`, 4), TParamMeta(`country`, 5)],
      [TExceptionMeta(`e`, 1, `TalkException`)]
    ),
    TMethodMeta(`getActivePurchaseVersions`, 
      [TParamMeta(`start`, 2), TParamMeta(`size`, 3), TParamMeta(`language`, 4), TParamMeta(`country`, 5)],
      [TExceptionMeta(`e`, 1, `TalkException`)]
    ),
    TMethodMeta(`getCoinProducts`, 
      [TParamMeta(`appStoreCode`, 2), TParamMeta(`country`, 3), TParamMeta(`language`, 4)],
      [TExceptionMeta(`e`, 1, `TalkException`)]
    ),
    TMethodMeta(`getCoinProductsByPgCode`, 
      [TParamMeta(`appStoreCode`, 2), TParamMeta(`pgCode`, 3), TParamMeta(`country`, 4), TParamMeta(`language`, 5)],
      [TExceptionMeta(`e`, 1, `TalkException`)]
    ),
    TMethodMeta(`getCoinPurchaseHistory`, 
      [TParamMeta(`request`, 2)],
      [TExceptionMeta(`e`, 1, `TalkException`)]
    ),
    TMethodMeta(`getCoinUseAndRefundHistory`, 
      [TParamMeta(`request`, 2)],
      [TExceptionMeta(`e`, 1, `TalkException`)]
    ),
    TMethodMeta(`getDownloads`, 
      [TParamMeta(`start`, 2), TParamMeta(`size`, 3), TParamMeta(`language`, 4), TParamMeta(`country`, 5)],
      [TExceptionMeta(`e`, 1, `TalkException`)]
    ),
    TMethodMeta(`getEventPackages`, 
      [TParamMeta(`start`, 2), TParamMeta(`size`, 3), TParamMeta(`language`, 4), TParamMeta(`country`, 5)],
      [TExceptionMeta(`e`, 1, `TalkException`)]
    ),
    TMethodMeta(`getNewlyReleasedPackages`, 
      [TParamMeta(`start`, 2), TParamMeta(`size`, 3), TParamMeta(`language`, 4), TParamMeta(`country`, 5)],
      [TExceptionMeta(`e`, 1, `TalkException`)]
    ),
    TMethodMeta(`getPopularPackages`, 
      [TParamMeta(`start`, 2), TParamMeta(`size`, 3), TParamMeta(`language`, 4), TParamMeta(`country`, 5)],
      [TExceptionMeta(`e`, 1, `TalkException`)]
    ),
    TMethodMeta(`getPresentsReceived`, 
      [TParamMeta(`start`, 2), TParamMeta(`size`, 3), TParamMeta(`language`, 4), TParamMeta(`country`, 5)],
      [TExceptionMeta(`e`, 1, `TalkException`)]
    ),
    TMethodMeta(`getPresentsSent`, 
      [TParamMeta(`start`, 2), TParamMeta(`size`, 3), TParamMeta(`language`, 4), TParamMeta(`country`, 5)],
      [TExceptionMeta(`e`, 1, `TalkException`)]
    ),
    TMethodMeta(`getProduct`, 
      [TParamMeta(`packageID`, 2), TParamMeta(`language`, 3), TParamMeta(`country`, 4)],
      [TExceptionMeta(`e`, 1, `TalkException`)]
    ),
    TMethodMeta(`getProductList`, 
      [TParamMeta(`productIdList`, 2), TParamMeta(`language`, 3), TParamMeta(`country`, 4)],
      [TExceptionMeta(`e`, 1, `TalkException`)]
    ),
    TMethodMeta(`getProductListWithCarrier`, 
      [TParamMeta(`productIdList`, 2), TParamMeta(`language`, 3), TParamMeta(`country`, 4), TParamMeta(`carrierCode`, 5)],
      [TExceptionMeta(`e`, 1, `TalkException`)]
    ),
    TMethodMeta(`getProductWithCarrier`, 
      [TParamMeta(`packageID`, 2), TParamMeta(`language`, 3), TParamMeta(`country`, 4), TParamMeta(`carrierCode`, 5)],
      [TExceptionMeta(`e`, 1, `TalkException`)]
    ),
    TMethodMeta(`getPurchaseHistory`, 
      [TParamMeta(`start`, 2), TParamMeta(`size`, 3), TParamMeta(`language`, 4), TParamMeta(`country`, 5)],
      [TExceptionMeta(`e`, 1, `TalkException`)]
    ),
    TMethodMeta(`getTotalBalance`, 
      [TParamMeta(`appStoreCode`, 2)],
      [TExceptionMeta(`e`, 1, `TalkException`)]
    ),
    TMethodMeta(`notifyDownloaded`, 
      [TParamMeta(`packageId`, 2), TParamMeta(`language`, 3)],
      [TExceptionMeta(`e`, 1, `TalkException`)]
    ),
    TMethodMeta(`reserveCoinPurchase`, 
      [TParamMeta(`request`, 2)],
      [TExceptionMeta(`e`, 1, `TalkException`)]
    ),
    TMethodMeta(`reservePayment`, 
      [TParamMeta(`paymentReservation`, 2)],
      [TExceptionMeta(`e`, 1, `TalkException`)]
    )
  ];
}
