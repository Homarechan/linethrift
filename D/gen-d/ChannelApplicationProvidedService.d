/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
module ChannelApplicationProvidedService;

import thrift.base;
import thrift.codegen.base;
import thrift.util.hashset;

import line_types;

interface ChannelApplicationProvidedService {
  long activeBuddySubscriberCount();
  void addOperationForChannel(OpType opType, string param1, string param2, string param3);
  long displayBuddySubscriberCount();
  Contact findContactByUseridWithoutAbuseBlockForChannel(string userid);
  string[] getAllContactIdsForChannel();
  CompactContact[] getCompactContacts(long lastModifiedTimestamp);
  Contact[] getContactsForChannel(string[] ids);
  string getDisplayName(string mid);
  string[] getFavoriteMidsForChannel();
  string[] getFriendMids();
  string[] getGroupMemberMids(string groupId);
  Group[] getGroupsForChannel(string[] groupIds);
  IdentityCredential getIdentityCredential();
  string[] getJoinedGroupIdsForChannel();
  MetaProfile getMetaProfile();
  string getMid();
  SimpleChannelClient getPrimaryClientForChannel();
  Profile getProfileForChannel();
  SimpleChannelContact[] getSimpleChannelContacts(string[] ids);
  string getUserCountryForBilling(string country, string remoteIp);
  long getUserCreateTime();
  string[RegistrationType] getUserIdentities();
  string getUserLanguage();
  string[] getUserMidsWhoAddedMe();
  bool isGroupMember(string groupId);
  bool isInContact(string mid);
  string registerChannelCP(string cpId, string registerPassword);
  void removeNotificationStatus(NotificationStatus notificationStatus);
  Message sendMessageForChannel(ref const(Message) message);
  void sendPinCodeOperation(string verifier);
  void updateProfileAttributeForChannel(ProfileAttribute profileAttribute, string value);

  alias line_types.TalkException TalkException;

  enum methodMeta = [
    TMethodMeta(`activeBuddySubscriberCount`, 
      [],
      [TExceptionMeta(`e`, 1, `TalkException`)]
    ),
    TMethodMeta(`addOperationForChannel`, 
      [TParamMeta(`opType`, 1), TParamMeta(`param1`, 2), TParamMeta(`param2`, 3), TParamMeta(`param3`, 4)],
      [TExceptionMeta(`e`, 1, `TalkException`)]
    ),
    TMethodMeta(`displayBuddySubscriberCount`, 
      [],
      [TExceptionMeta(`e`, 1, `TalkException`)]
    ),
    TMethodMeta(`findContactByUseridWithoutAbuseBlockForChannel`, 
      [TParamMeta(`userid`, 2)],
      [TExceptionMeta(`e`, 1, `TalkException`)]
    ),
    TMethodMeta(`getAllContactIdsForChannel`, 
      [],
      [TExceptionMeta(`e`, 1, `TalkException`)]
    ),
    TMethodMeta(`getCompactContacts`, 
      [TParamMeta(`lastModifiedTimestamp`, 2)],
      [TExceptionMeta(`e`, 1, `TalkException`)]
    ),
    TMethodMeta(`getContactsForChannel`, 
      [TParamMeta(`ids`, 2)],
      [TExceptionMeta(`e`, 1, `TalkException`)]
    ),
    TMethodMeta(`getDisplayName`, 
      [TParamMeta(`mid`, 2)],
      [TExceptionMeta(`e`, 1, `TalkException`)]
    ),
    TMethodMeta(`getFavoriteMidsForChannel`, 
      [],
      [TExceptionMeta(`e`, 1, `TalkException`)]
    ),
    TMethodMeta(`getFriendMids`, 
      [],
      [TExceptionMeta(`e`, 1, `TalkException`)]
    ),
    TMethodMeta(`getGroupMemberMids`, 
      [TParamMeta(`groupId`, 1)],
      [TExceptionMeta(`e`, 1, `TalkException`)]
    ),
    TMethodMeta(`getGroupsForChannel`, 
      [TParamMeta(`groupIds`, 1)],
      [TExceptionMeta(`e`, 1, `TalkException`)]
    ),
    TMethodMeta(`getIdentityCredential`, 
      [],
      [TExceptionMeta(`e`, 1, `TalkException`)]
    ),
    TMethodMeta(`getJoinedGroupIdsForChannel`, 
      [],
      [TExceptionMeta(`e`, 1, `TalkException`)]
    ),
    TMethodMeta(`getMetaProfile`, 
      [],
      [TExceptionMeta(`e`, 1, `TalkException`)]
    ),
    TMethodMeta(`getMid`, 
      [],
      [TExceptionMeta(`e`, 1, `TalkException`)]
    ),
    TMethodMeta(`getPrimaryClientForChannel`, 
      [],
      [TExceptionMeta(`e`, 1, `TalkException`)]
    ),
    TMethodMeta(`getProfileForChannel`, 
      [],
      [TExceptionMeta(`e`, 1, `TalkException`)]
    ),
    TMethodMeta(`getSimpleChannelContacts`, 
      [TParamMeta(`ids`, 1)],
      [TExceptionMeta(`e`, 1, `TalkException`)]
    ),
    TMethodMeta(`getUserCountryForBilling`, 
      [TParamMeta(`country`, 2), TParamMeta(`remoteIp`, 3)],
      [TExceptionMeta(`e`, 1, `TalkException`)]
    ),
    TMethodMeta(`getUserCreateTime`, 
      [],
      [TExceptionMeta(`e`, 1, `TalkException`)]
    ),
    TMethodMeta(`getUserIdentities`, 
      [],
      [TExceptionMeta(`e`, 1, `TalkException`)]
    ),
    TMethodMeta(`getUserLanguage`, 
      [],
      [TExceptionMeta(`e`, 1, `TalkException`)]
    ),
    TMethodMeta(`getUserMidsWhoAddedMe`, 
      [],
      [TExceptionMeta(`e`, 1, `TalkException`)]
    ),
    TMethodMeta(`isGroupMember`, 
      [TParamMeta(`groupId`, 1)],
      [TExceptionMeta(`e`, 1, `TalkException`)]
    ),
    TMethodMeta(`isInContact`, 
      [TParamMeta(`mid`, 2)],
      [TExceptionMeta(`e`, 1, `TalkException`)]
    ),
    TMethodMeta(`registerChannelCP`, 
      [TParamMeta(`cpId`, 2), TParamMeta(`registerPassword`, 3)],
      [TExceptionMeta(`e`, 1, `TalkException`)]
    ),
    TMethodMeta(`removeNotificationStatus`, 
      [TParamMeta(`notificationStatus`, 2)],
      [TExceptionMeta(`e`, 1, `TalkException`)]
    ),
    TMethodMeta(`sendMessageForChannel`, 
      [TParamMeta(`message`, 2)],
      [TExceptionMeta(`e`, 1, `TalkException`)]
    ),
    TMethodMeta(`sendPinCodeOperation`, 
      [TParamMeta(`verifier`, 1)],
      [TExceptionMeta(`e`, 1, `TalkException`)]
    ),
    TMethodMeta(`updateProfileAttributeForChannel`, 
      [TParamMeta(`profileAttribute`, 2), TParamMeta(`value`, 3)],
      [TExceptionMeta(`e`, 1, `TalkException`)]
    )
  ];
}
