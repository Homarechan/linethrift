/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
module ChannelService;

import thrift.base;
import thrift.codegen.base;
import thrift.util.hashset;

import line_types;

interface ChannelService {
  OTPResult issueOTP(string channelId);
  ChannelToken approveChannelAndIssueChannelToken(string channelId);
  string approveChannelAndIssueRequestToken(string channelId, string otpId);
  NotificationFetchResult fetchNotificationItems(long localRev);
  ApprovedChannelInfos getApprovedChannels(long lastSynced, string locale);
  ChannelInfo getChannelInfo(string channelId, string locale);
  ChannelNotificationSetting getChannelNotificationSetting(string channelId, string locale);
  ChannelNotificationSetting[] getChannelNotificationSettings(string locale);
  ChannelInfos getChannels(long lastSynced, string locale);
  ChannelDomains getDomains(long lastSynced);
  FriendChannelMatricesResponse getFriendChannelMatrices(string[] channelIds);
  bool updateChannelSettings(ref const(ChannelSettings) channelSettings);
  ChannelDomains getCommonDomains(long lastSynced);
  int getNotificationBadgeCount(long localRev);
  ChannelToken issueChannelToken(string channelId);
  string issueRequestToken(string channelId, string otpId);
  RequestTokenResponse issueRequestTokenWithAuthScheme(string channelId, string otpId, string[] authScheme, string returnUrl);
  string issueRequestTokenForAutoLogin(string channelId, string otpId, string redirectUrl);
  string[] getUpdatedChannelIds(ChannelIdWithLastUpdated[] channelIds);
  string reserveCoinUse(ref const(CoinUseReservation) request, string locale);
  void revokeChannel(string channelId);
  ChannelSyncDatas syncChannelData(long lastSynced, string locale);
  void updateChannelNotificationSetting(ChannelNotificationSetting[] setting);

  alias line_types.ChannelException ChannelException;

  enum methodMeta = [
    TMethodMeta(`issueOTP`, 
      [TParamMeta(`channelId`, 2)],
      [TExceptionMeta(`e`, 1, `ChannelException`)]
    ),
    TMethodMeta(`approveChannelAndIssueChannelToken`, 
      [TParamMeta(`channelId`, 1)],
      [TExceptionMeta(`e`, 1, `ChannelException`)]
    ),
    TMethodMeta(`approveChannelAndIssueRequestToken`, 
      [TParamMeta(`channelId`, 1), TParamMeta(`otpId`, 2)],
      [TExceptionMeta(`e`, 1, `ChannelException`)]
    ),
    TMethodMeta(`fetchNotificationItems`, 
      [TParamMeta(`localRev`, 2)],
      [TExceptionMeta(`e`, 1, `ChannelException`)]
    ),
    TMethodMeta(`getApprovedChannels`, 
      [TParamMeta(`lastSynced`, 2), TParamMeta(`locale`, 3)],
      [TExceptionMeta(`e`, 1, `ChannelException`)]
    ),
    TMethodMeta(`getChannelInfo`, 
      [TParamMeta(`channelId`, 2), TParamMeta(`locale`, 3)],
      [TExceptionMeta(`e`, 1, `ChannelException`)]
    ),
    TMethodMeta(`getChannelNotificationSetting`, 
      [TParamMeta(`channelId`, 1), TParamMeta(`locale`, 2)],
      [TExceptionMeta(`e`, 1, `ChannelException`)]
    ),
    TMethodMeta(`getChannelNotificationSettings`, 
      [TParamMeta(`locale`, 1)],
      [TExceptionMeta(`e`, 1, `ChannelException`)]
    ),
    TMethodMeta(`getChannels`, 
      [TParamMeta(`lastSynced`, 2), TParamMeta(`locale`, 3)],
      [TExceptionMeta(`e`, 1, `ChannelException`)]
    ),
    TMethodMeta(`getDomains`, 
      [TParamMeta(`lastSynced`, 2)],
      [TExceptionMeta(`e`, 1, `ChannelException`)]
    ),
    TMethodMeta(`getFriendChannelMatrices`, 
      [TParamMeta(`channelIds`, 1)],
      [TExceptionMeta(`e`, 1, `ChannelException`)]
    ),
    TMethodMeta(`updateChannelSettings`, 
      [TParamMeta(`channelSettings`, 1)],
      [TExceptionMeta(`e`, 1, `ChannelException`)]
    ),
    TMethodMeta(`getCommonDomains`, 
      [TParamMeta(`lastSynced`, 1)],
      [TExceptionMeta(`e`, 1, `ChannelException`)]
    ),
    TMethodMeta(`getNotificationBadgeCount`, 
      [TParamMeta(`localRev`, 2)],
      [TExceptionMeta(`e`, 1, `ChannelException`)]
    ),
    TMethodMeta(`issueChannelToken`, 
      [TParamMeta(`channelId`, 1)],
      [TExceptionMeta(`e`, 1, `ChannelException`)]
    ),
    TMethodMeta(`issueRequestToken`, 
      [TParamMeta(`channelId`, 1), TParamMeta(`otpId`, 2)],
      [TExceptionMeta(`e`, 1, `ChannelException`)]
    ),
    TMethodMeta(`issueRequestTokenWithAuthScheme`, 
      [TParamMeta(`channelId`, 1), TParamMeta(`otpId`, 2), TParamMeta(`authScheme`, 3), TParamMeta(`returnUrl`, 4)],
      [TExceptionMeta(`e`, 1, `ChannelException`)]
    ),
    TMethodMeta(`issueRequestTokenForAutoLogin`, 
      [TParamMeta(`channelId`, 2), TParamMeta(`otpId`, 3), TParamMeta(`redirectUrl`, 4)],
      [TExceptionMeta(`e`, 1, `ChannelException`)]
    ),
    TMethodMeta(`getUpdatedChannelIds`, 
      [TParamMeta(`channelIds`, 1)],
      [TExceptionMeta(`e`, 1, `ChannelException`)]
    ),
    TMethodMeta(`reserveCoinUse`, 
      [TParamMeta(`request`, 2), TParamMeta(`locale`, 3)],
      [TExceptionMeta(`e`, 1, `ChannelException`)]
    ),
    TMethodMeta(`revokeChannel`, 
      [TParamMeta(`channelId`, 1)],
      [TExceptionMeta(`e`, 1, `ChannelException`)]
    ),
    TMethodMeta(`syncChannelData`, 
      [TParamMeta(`lastSynced`, 2), TParamMeta(`locale`, 3)],
      [TExceptionMeta(`e`, 1, `ChannelException`)]
    ),
    TMethodMeta(`updateChannelNotificationSetting`, 
      [TParamMeta(`setting`, 1)],
      [TExceptionMeta(`e`, 1, `ChannelException`)]
    )
  ];
}
